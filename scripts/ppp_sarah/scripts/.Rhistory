# what is the taxa annotation for the shared 18 ASV
all3 <- intersect(intersect(q0.25_res$asv_key,sig$feature), dv_analysis$significant_taxa)
all3_taxa <- taxa %>%
filter(rownames(.) %in% all3) %>%
rownames_to_column('asv_key')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
library(corncob)
library(tidyverse)
library(vdbR)
library("phyloseq")
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
View(pheno)
library(vdbR)
connect_database()
get_table_from_database('shotgun_lookup_ad')
View(shotgun_lookup_ad)
library(corncob)
library(metagenomeSeq)
data("mouseData")
View(mouseData)
View(mouseData@featureData@data)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(corncob)
library(tidyverse)
library(vdbR)
library("phyloseq")
connect_database()
get_table_from_database('asv_annotation_blast_ag')
get_table_from_database('shotgun_lookup_ad')
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
View(pheno)
# getting the cts from shotgun
fns <- list.files('../data/metaphlan/', pattern = 'profile')
test <- read_tsv(fns[1])
# getting the cts from shotgun
fns <- list.files('../data/metaphlan/', pattern = 'profile', full.names = T)
test <- read_tsv(fns[1])
View(test)
# getting the cts from shotgun
fns <- list.files('../data/metaphlan/', pattern = 'profile', full.names = T, skip = 5)
test <- read_tsv(fns[1], skip = 5)
test <- read_tsv(fns[1], skip = 4)
test
test <- read_tsv(fns[1], skip = 4) %>%
select(clade_name = `#clade_name`, counts = estimated_number_of_reads_from_the_clade)
test
test <- read_tsv(fns[1], skip = 4) %>%
select(clade_name = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(clade_name, 's__'))
View(test)
test <-
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(clade_name = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(clade_name, 's__'))) %>%
bind_rows(.id = 'sampleids')
# getting the cts from shotgun
fns <- list.files('../data/metaphlan/', pattern = 'profile', full.names = T)
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(clade_name = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(clade_name, 's__'))) %>%
bind_rows(.id = 'sampleids')
View(metaphlan)
View(pheno)
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00'))
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....'))
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
metaphlan
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....'))
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....'))
View(pheno)
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....')) %>%
filter(sampleid %in% pheno$sampleid)
View(metaphlan)
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
View(ctsfil)
metaphlan
cts <- metaphlan %>%
spread('sampleid','counts', fill = 0) %>%
column_to_rownames('species')
View(cts)
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....')) %>%
filter(sampleid %in% pheno$sampleid) %>%
# filter out virus ...
filter(!str_detect(species, 'k__Viruses'))
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....')) %>%
filter(sampleid %in% pheno$sampleid) %>%
# filter out virus ...
filter(!str_detect(species, 'k__Viruses'))
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....')) %>%
filter(sampleid %in% pheno$sampleid) %>%
# filter out virus ...
filter(!str_detect(species, 'k__Viruses'))
cts <- metaphlan %>%
spread('sampleid','counts', fill = 0) %>%
column_to_rownames('species')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(cts))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
?phyloseq
physeq = phyloseq(OTU,  samples)
# assemble a phyloseq object
OTU = otu_table(cts, taxa_are_rows = T)
physeq = phyloseq(OTU,  samples)
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
library(corncob)
library(tidyverse)
library(vdbR)
library("phyloseq")
connect_database()
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
# getting the cts from shotgun
fns <- list.files('../data/metaphlan/', pattern = 'profile', full.names = T)
metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4) %>%
select(species  = `#clade_name`, counts = estimated_number_of_reads_from_the_clade) %>%
filter(str_detect(species, 's__'))) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_extract(sampleid, 'C00....')) %>%
filter(sampleid %in% pheno$sampleid) %>%
# filter out virus ...
filter(!str_detect(species, 'k__Viruses'))
# it seems the 16s data will work better in this case
# use the 16s data instead
cts <- metaphlan %>%
spread('sampleid','counts', fill = 0) %>%
column_to_rownames('species')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(cts))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
# assemble a phyloseq object
OTU = otu_table(cts, taxa_are_rows = T)
physeq = phyloseq(OTU,  samples)
View(sampledata)
# You may see NAs in the model summary because Wald testing is invalid.
#Likelihood ratio testing can be used, but valid standard errors cannot be calculated.
set.seed(1)
dv_analysis <- differentialTest(
formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "LRT", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25)
library(Maaslin2)
View(metaphlan)
metaphlan
total <- metaphlan %>%
group_by(sampleid) %>%
summarise(total = sum(counts))
View(total)
relab <- metaphlan %>%
left_join(total)
View(relab)
relab
relab <- metaphlan %>%
left_join(total) %>%
mutate(relab = counts/total)
relab
cts_relab <- relab %>%
select(species, sampleid, relab)
View(cts_relab)
cts_relab <- relab %>%
select(species, sampleid, relab) %>%
spread('species','relab', fill = 0) %>%
column_to_rownames('sampleid')
cts_relab <- relab %>%
select(species, sampleid, relab) %>%
spread('species','relab', fill = 0) %>%
column_to_rownames('sampleid')
all.equal(rownames(sampledata), rownames(cts_relab))
library(Maaslin2)
cts_relab <- relab %>%
select(species, sampleid, relab) %>%
spread('species','relab', fill = 0) %>%
column_to_rownames('sampleid')
all.equal(rownames(sampledata), rownames(cts_relab))
fit_data <- Maaslin2(
input_data = cts_relab,
input_metadata = sampledata,
normalization = "TSS",
min_abundance = 0.0,
min_prevalence = 0.0,
max_significance = 0.25,
output = "../data/output_shotgun-Maaslin2",
fixed_effects = c("grp"),
reference = c("grp,BM"))
sig <- read_tsv('../data/output_shotgun-Maaslin2/significant_results.tsv')
all.equal(rownames(sampledata), rownames(cts_relab))
library(metagenomeSeq)
View(cts)
View(metaphlan)
pheno_data <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
all.equal(colnames(cts) , pheno$sampleid)
pheno_data <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
all.equal(colnames(cts) , pheno$sampleid)
phenotypeData <- AnnotatedDataFrame(pheno_data)
d7 <- newMRexperiment(cts,phenoData=phenotypeData)
p = cumNormStatFast(d7)
View(d7)
d7 = filterData(d7, present = 2, depth = 1)
d7 = filterData(d7, present = 2, depth = 1)
d7 <- cumNorm(d7, p = p)
pd <- pData(d7)
mod <- model.matrix(~1 + grp, data = pd)
d7_res = fitFeatureModel(d7, mod)
d7_res
d7_res@taxa
whole <- tibble(species = d7_res@taxa,
pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
q0.25_res <- whole %>%
filter(padj < 0.25)
library(ggvenn)
View(sig)
sig$feature
q0.25_res$species
sig <- read_tsv('../data/output_shotgun-Maaslin2/significant_results.tsv')
sig
sig <- read_tsv('../data/output_shotgun-Maaslin2/significant_results.tsv') %>%
mutate(feature = str_replace(feature, '\\.','\\|'))
sig <- read_tsv('../data/output_shotgun-Maaslin2/significant_results.tsv') %>%
mutate(feature = str_replace_all(feature, '\\.','\\|'))
sig$feature
sig$feature
sig$feature
q0.25_res$species
dv_analysis$significant_taxa
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$species,
MaAsLin2 = sig$feature,
Corncob = dv_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$species,
MaAsLin2 = sig$feature,
Corncob = dv_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
# what is the taxa annotation for the shared 18 ASV
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
all3
res_list <- list(metagenomeSeq = q0.25_res$species,
MaAsLin2 = sig$feature,
Corncob = dv_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
all3
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
mas_meta
dv_analysis$significant_taxa
mas_meta <- intersect(q0.25_res$species,sig$feature)
View(cts_relab)
cts_relab %>%
rownames_to_column('sampleid')
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3)
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp))
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
mas_meta <- intersect(q0.25_res$species,sig$feature)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# the intersected sig results between corncob and metagenomicSeq
intersect(q0.25_res$species,dv_analysis$significant_taxa)
# the intersected sig results between corncob and maaslin2
intersect(sig$feature,dv_analysis$significant_taxa)
# the sig results (FDR < 0.25) from MaAsLin2
sig$feature
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
union(q0.25_res$species,sig$feature, dv_analysis$significant_taxa)
union(sig$feature, dv_analysis$significant_taxa)
union(q0.25_res$species,union(sig$feature, dv_analysis$significant_taxa))
res_list
ggvenn(res_list, show_percentage = F)
union(q0.25_res$species,union(sig$feature, dv_analysis$significant_taxa))
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
# the intersected sig results between maaslin2 and metagenomicSeq
mas_meta <- intersect(q0.25_res$species,sig$feature)
mas_meta
# the intersected sig results between corncob and metagenomicSeq
intersect(q0.25_res$species,dv_analysis$significant_taxa)
# the intersected sig results between corncob and maaslin2
intersect(sig$feature,dv_analysis$significant_taxa)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% union(q0.25_res$species,union(sig$feature, dv_analysis$significant_taxa))) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% union(q0.25_res$species,union(sig$feature, dv_analysis$significant_taxa))) %>%
left_join(pheno %>% select(sampleid, grp))
# what is the taxa annotation for the shared 1
all3 <- intersect(intersect(q0.25_res$species,sig$feature), dv_analysis$significant_taxa)
# the intersected sig results between maaslin2 and metagenomicSeq
mas_meta <- intersect(q0.25_res$species,sig$feature)
mas_meta
# the intersected sig results between corncob and metagenomicSeq
intersect(q0.25_res$species,dv_analysis$significant_taxa)
# the intersected sig results between corncob and maaslin2
intersect(sig$feature,dv_analysis$significant_taxa)
# plot the boxplot relab of those asv
cts_relab %>%
rownames_to_column('sampleid') %>%
gather('species', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(species %in% union(q0.25_res$species,union(sig$feature, dv_analysis$significant_taxa))) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
mutate(spp = str_extract(species, 's__.+$')) %>%
split(.$spp) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
