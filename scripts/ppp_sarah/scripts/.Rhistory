knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
connect_database()
list_table_from_database('blast')
get_table_from_database('asv_annotation_blast_ag')
library(corncob)
library(tidyverse)
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil))
View(taxa)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key)
View(taxa)
all.equal(taxa$asv_key, rownames(ctsfil))
taxa
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species)
# assemble a phyloseq object
library("phyloseq")
ctsfil
?otu_table
taxa
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key')
library("phyloseq")
OTU = otu_table(ctsfil)
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key')
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
TAX = tax_table(taxa)
pheno
sampledata <- pheno %>%
column_to_rownames('sampleid')
?phyloseq
physeq = phyloseq(OTU, TAX, sampledata)
physeq
physeq = phyloseq(OTU, TAX)
physeq1 = merge_phyloseq(physeq, sampledata)
sampledata
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
sampledata
library("phyloseq")
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
physeq = phyloseq(OTU, TAX)
physeq1 = merge_phyloseq(physeq, sampledata)
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
# assemble a phyloseq object
library("phyloseq")
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
physeq = phyloseq(OTU, TAX)
physeq1 = merge_phyloseq(physeq, sampledata)
set.seed(1)
da_analysis <- differentialTest(formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "Wald", boot = FALSE,
data = physeq1,
fdr_cutoff = 0.05)
physeq1
physeq1 = merge_phyloseq(physeq, sampledata)
physeq1
sampledata
View(sampledata)
physeq = phyloseq(OTU, TAX, sampledata)
physeq
BiocManager::install("metagenomeSeq")
library(metagenomeSeq)
knitr::opts_chunk$set(echo = TRUE)
library(corncob)
library(tidyverse)
library(vdbR)
connect_database()
list_table_from_database('blast')
get_table_from_database('asv_annotation_blast_ag')
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
#all.equal(taxa$asv_key, rownames(ctsfil))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
library("phyloseq")
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
#all.equal(taxa$asv_key, rownames(ctsfil))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
# assemble a phyloseq object
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
physeq = phyloseq(OTU, TAX, samples)
ctsfil_relab <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count_relative) %>%
spread('asv_key','count_relative', fill = 0) %>%
column_to_rownames('sampleid')
View(ctsfil_relab)
