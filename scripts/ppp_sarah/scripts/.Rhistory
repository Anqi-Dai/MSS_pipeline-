q0.25_res <- MRcoefs(d7_res) %>%
filter(adjPvalues < 0.25)
View(q0.25_res)
d7_res$adjPvalues
whole <- tibble(pval = d7_res@pvalues)
View(whole)
whole
whole <- tibble(pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
View(whole)
q0.25_res <- whole %>%
filter(padj < 0.25)
View(q0.25_res)
d7_res@taxa
d7_res@taxa
whole <- tibble(asv_key = d7_res@taxa,
pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
whole <- tibble(asv_key = d7_res@taxa,
pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
q0.25_res <- whole %>%
filter(padj < 0.25)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
Maaslin2 = sig$feature,
corncob = da_analysis$significant_taxa
)
sig <- read_tsv('../data/output_16s-maslin/significant_results.tsv')
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
Maaslin2 = sig$feature,
corncob = da_analysis$significant_taxa
)
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
#all.equal(taxa$asv_key, rownames(ctsfil))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
OTU = otu_table(ctsfil, taxa_are_rows = T)
library(corncob)
OTU = otu_table(ctsfil, taxa_are_rows = T)
library("phyloseq")
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
#all.equal(taxa$asv_key, rownames(ctsfil))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
# assemble a phyloseq object
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
physeq = phyloseq(OTU, TAX, samples)
set.seed(1)
da_analysis <- differentialTest(formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "Wald", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25)
da_analysis$significant_taxa
otu_to_taxonomy(OTU=da_analysis$significant_taxa,data=physeq)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
Maaslin2 = sig$feature,
corncob = da_analysis$significant_taxa
)
ggvenn(res_list)
?ggvenn
ggvenn(res_list, show_percentage = F)
dv_analysis$all_models
otu_to_taxonomy(OTU=da_analysis$significant_taxa,data=physeq)
?differentialTest
da_analysis <- differentialTest(
formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "Wald", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25)
da_analysis <- differentialTest(
formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "Wald", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25, verbose = F)
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
cts <- get_counts_subset(pheno$sampleid)
keepasv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(pheno) * 0.2)) %>%
pull(asv_key)
ctsfil <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
# I think I need to build a phyloseq object for this
all.equal(pheno$sampleid, colnames(ctsfil))
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(ctsfil)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key') %>%
as.matrix()
#all.equal(taxa$asv_key, rownames(ctsfil))
sampledata <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
samples = sample_data(sampledata)
# assemble a phyloseq object
OTU = otu_table(ctsfil, taxa_are_rows = T)
TAX = tax_table(taxa)
physeq = phyloseq(OTU, TAX, samples)
?Maaslin2
library(Maaslin2)
?Maaslin2
library(Maaslin2)
ctsfil_relab <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count_relative) %>%
spread('asv_key','count_relative', fill = 0) %>%
column_to_rownames('sampleid')
all.equal(rownames(sampledata), rownames(ctsfil_relab))
fit_data <- Maaslin2(
input_data = ctsfil_relab,
input_metadata = sampledata,
normalization = "TSS",
min_abundance = 0.0,# has already filtered
min_prevalence = 0.0,# has already filtered
max_significance = 0.25,
output = "../data/output_16s-maslin",
fixed_effects = c("grp"),
reference = c("grp,BM"))
sig <- read_tsv('../data/output_16s-maslin/significant_results.tsv')
sig <- read_tsv('../data/output_16s-maslin/significant_results.tsv')
library(metagenomeSeq)
cts_ <- cts %>%
select(asv_key, sampleid, count) %>%
spread('sampleid','count', fill = 0) %>%
column_to_rownames('asv_key')
pheno_data <- pheno %>%
column_to_rownames('sampleid') %>%
mutate(grp = factor(grp, levels = c('BM','BMT')))
all.equal(colnames(cts_) , pheno$sampleid)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% rownames(cts_)) %>%
arrange(asv_key) %>%
select(asv_key, kingdom:species) %>%
column_to_rownames('asv_key')
all.equal(rownames(cts_) , rownames(taxa))
# assemble the object for metagenomeSeq
OTUdata <- AnnotatedDataFrame(taxa)
phenotypeData <- AnnotatedDataFrame(pheno_data)
d7 <- newMRexperiment(cts_,phenoData=phenotypeData,featureData=OTUdata)
p = cumNormStatFast(d7)
d7 = filterData(d7, present = 2, depth = 1)
d7 <- cumNorm(d7, p = p)
pd <- pData(d7)
mod <- model.matrix(~1 + grp, data = pd)
d7_res = fitFeatureModel(d7, mod)
whole <- tibble(asv_key = d7_res@taxa,
pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
q0.25_res <- whole %>%
filter(padj < 0.25)
d7_res = fitFeatureModel(d7, mod)
d7_res = fitFeatureModel(d7, mod)
d7 = filterData(d7, present = 2, depth = 1)
d7 <- cumNorm(d7, p = p)
pd <- pData(d7)
mod <- model.matrix(~1 + grp, data = pd)
d7_res = fitFeatureModel(d7, mod)
whole <- tibble(asv_key = d7_res@taxa,
pval = d7_res@pvalues) %>%
mutate(padj = p.adjust(pval, method = 'BH'))
q0.25_res <- whole %>%
filter(padj < 0.25)
View(q0.25_res)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
Maaslin2 = sig$feature,
corncob = da_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
MaAsLin2 = sig$feature,
Corncob = da_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
?Maaslin2
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
res_list
# what is the taxa annotation for the shared 18 ASV
all3 <- intersect(intersect(q0.25_res$asv_key,sig$feature), da_analysis$significant_taxa)
all3
View(taxa)
taxa
all3_taxa <- taxa %>%
filter(rownames(.) %in% all3)
View(all3_taxa)
View(cts_)
View(ctsfil)
ctsfil_relab <- cts %>%
filter(asv_key %in% keepasv) %>%
select(asv_key, sampleid, count_relative) %>%
spread('asv_key','count_relative', fill = 0) %>%
column_to_rownames('sampleid')
View(ctsfil_relab)
# plot the boxplot relab of those asv
ctsfil_relab %>%
gather()
# plot the boxplot relab of those asv
ctsfil_relab %>%
gather('asv_key', 'relab')
ctsfil_relab %>%
rownames_to_column('sampleid')
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(,)])
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)])
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3)
View(pheno)
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno)
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'dotplot')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, point = 16))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, point = 17))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, pch = 17))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, pch = 16))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'asv_key', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'genus', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus))
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp))
all3_taxa <- taxa %>%
filter(rownames(.) %in% all3) %>%
rownames_to_column('asv_key')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'genus', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
ggpubr::ggboxplot(x = 'grp', y ='relab', facet.by = 'species', add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
MaAsLin2 = sig$feature,
Corncob = da_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
ggpubr::ggboxplot(data = df,x = 'grp', y ='relab',  add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
split(.$species) %>%
map(function(df) {
ggpubr::ggboxplot(data = df,x = 'grp', y ='relab',  add = 'jitter',
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
})
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
split(.$species)
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 2, shape = 16))
})
set.seed(1)
da_analysis <- differentialTest(
formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "Wald", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25)
# You may see NAs in the model summary because Wald testing is invalid.
#Likelihood ratio testing can be used, but valid standard errors cannot be calculated.
set.seed(1)
dv_analysis <- differentialTest(
formula = ~ grp,
phi.formula = ~ grp,
formula_null = ~ 1,
phi.formula_null = ~ grp,
test = "LRT", boot = FALSE,
data = physeq,
fdr_cutoff = 0.25)
library(ggvenn)
res_list <- list(metagenomeSeq = q0.25_res$asv_key,
MaAsLin2 = sig$feature,
Corncob = dv_analysis$significant_taxa)
ggvenn(res_list, show_percentage = F)
# what is the taxa annotation for the shared 18 ASV
all3 <- intersect(intersect(q0.25_res$asv_key,sig$feature), dv_analysis$significant_taxa)
all3_taxa <- taxa %>%
filter(rownames(.) %in% all3) %>%
rownames_to_column('asv_key')
# plot the boxplot relab of those asv
ctsfil_relab %>%
rownames_to_column('sampleid') %>%
gather('asv_key', 'relab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(asv_key %in% all3) %>%
left_join(pheno %>% select(sampleid, grp)) %>%
left_join(all3_taxa %>% select(asv_key, genus, species)) %>%
split(.$species) %>%
imap(function(df_, Name_) {
ggpubr::ggboxplot(data = df_,x = 'grp', y ='relab',  add = 'jitter',
title = Name_,
add.params = list(color = 'forestgreen', alpha = 0.5, size = 3, shape = 16))
})
knitr::opts_chunk$set(echo = TRUE, warning = F, message = F)
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
library(corncob)
library(tidyverse)
library(vdbR)
library("phyloseq")
# it seems the 16s data will work better in this case
# use the 16s data instead
pheno <- readxl::read_excel('../data/05_meta_with_alpha.xlsx') %>%
filter(day == 'D7')
View(pheno)
library(vdbR)
connect_database()
get_table_from_database('shotgun_lookup_ad')
View(shotgun_lookup_ad)
library(corncob)
library(metagenomeSeq)
data("mouseData")
View(mouseData)
View(mouseData@featureData@data)
