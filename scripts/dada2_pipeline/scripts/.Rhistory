mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
quantile(logs$hg38_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
quantile(logs$hg38_perc, probs = seq(0.9, 1, 0.01)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
# host genome percentage
quantile(logs$hg38_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
quantile(logs$hg38_perc, probs = seq(0.9, 1, 0.01)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
logs
# mapped to the mouse genome
quantile(logs$mm38_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(mm38_perc = comma(value)) %>%
select(quantiles, mm38_perc) %>%
kbl(caption = 'mouse host genome percentage distribution in shotgun samples') %>%
kable_styling()
logs
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50)
logs
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50 & hg38_perc < 75)
round(nrow(keep)/nrow(logs)*100, 2)
View(qual)
qual
# quality score
qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count))
4924/4
# quality score
qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count')
# quality score
qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass )
209906 + 27706705
# quality score
qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass ) %>%
mutate(pass_perc = round(pass/total_one*100, 2))
# quality score
qualscore <- qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass ) %>%
mutate(pass_perc = round(pass/total_one*100, 2))
View(qualscore)
View(qualscore)
qualscore
# compare the quality score of the R1 and R2
qualscore %>%
ggboxplot(x = 'pair', y = 'pass_perc')
# compare the quality score of the R1 and R2
qualscore %>%
ggboxplot(x = 'pair', y = 'pass_perc') +
scale_y_log10()
# compare the quality score of the R1 and R2
qualscore %>%
ggboxplot(x = 'pass_perc', facet.by  = 'pair')
qualscore
# compare the quality score of the R1 and R2
qualscore %>%
ggboxplot(x = 'pass_perc', y  = 'pair')
# compare the quality score of the R1 and R2
qualscore %>%
ggboxplot(y = 'pass_perc', x  = 'pair')
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', y  = 'pair')
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', facet.by   = 'pair')
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc')  +
facet_grid(~ pair)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc')  +
facet_grid(pair~ .)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 30)  +
facet_grid(pair~ .)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 50)  +
facet_grid(pair~ .)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 50, color = 'white', fill = 'forestgreen')  +
facet_grid(pair~ .)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 50, color = 'white', fill = 'forestgreen',
title = '% reads that have average quality score > 28')  +
facet_grid(pair~ .)
View(qual)
View(over)
# how many samples are in the df
over %>% distinct(fn)
over
# how many samples are in the df
over %>% distinct(folder)
1377+503
# how many samples are in the df
over %>% distinct(folder) %>% nrow
# how many samples are in the df
have_primer_or_adapter <- over %>% distinct(folder) %>% nrow
# how many samples have_primer_or_adapter (perc)
have_primer_or_adapter/nrow(logs)*100
has_primer <- over %>%
filter(str_detect(source, 'Primer'))
View(has_primer)
has_primer %>% distinct(folder)
has_primer
has_primer <- over %>%
filter(str_detect(source, 'Primer')) %>%
group_by(folder) %>%
summarise(total_primer = sum(percentage))
View(logs)
over <- read_csv('../data/08_adapter_no_hit_FALSE.csv')
View(over)
# the table with the over-represented sequences
over <- read_csv('../data/08_adapter_no_hit_FALSE.csv') %>%
filter(str_detect(fn, 'chi_shotgun'))
# the table with the over-represented sequences
over <- read_csv('../data/08_adapter_no_hit_FALSE.csv') %>%
filter(str_detect(fn, 'chi_shotgun')) %>%
mutate(fn = str_replace(fn, '../data/chi_shotgun//','')) %>%
separate(fn, into = c('folder','pair'), sep = '__concat_')
View(over)
# the table with the over-represented sequences
over <- read_csv('../data/08_adapter_no_hit_FALSE.csv') %>%
filter(str_detect(fn, 'chi_shotgun')) %>%
mutate(fn = str_replace(fn, '../data/chi_shotgun//','')) %>%
separate(fn, into = c('folder','pair'), sep = '__concat_')
# how many samples are in the df
have_primer_or_adapter <- over %>% distinct(folder) %>% nrow
# how many samples have_primer_or_adapter (perc)
have_primer_or_adapter/nrow(logs)*100
# how many samples are in the df
have_primer_or_adapter <- over %>% distinct(folder) %>% nrow
has_primer <- over %>%
filter(str_detect(source, 'Primer'))
View(has_primer)
has_primer <- over %>%
filter(str_detect(source, 'Primer')) %>%
group_by(folder) %>%
summarise(total_primer = sum(percentage))
View(has_primer)
View(over)
has_primer
quantile(has_primer$total_primer, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(total_primer = comma(value)) %>%
select(quantiles, total_primer) %>%
kbl(caption = 'primer percentage distribution in 297 shotgun samples') %>%
kable_styling()
View(logs)
logs
has_primer %>%
inner_join(logs) %>%
top_frac(0.05, wt = trimmed_perc)
has_primer %>%
inner_join(logs) %>%
top_n(5, wt = trimmed_perc)
has_primer %>%
inner_join(logs) %>%
top_n(5, wt = trimmed_perc) %>%
arrange(desc(trimmed_perc))
has_primer %>%
inner_join(logs) %>%
top_n(5, wt = trimmed_perc) %>%
arrange(desc(trimmed_perc)) %>%
select(folder, total_primer, trimmed_perc)
over
has_adapter <- over %>%
filter(str_detect(source, 'Adapter')) %>%
group_by(folder) %>%
summarise(total_adapter = sum(percentage))
View(has_adapter)
has_primer %>%
inner_join(logs) %>%
top_n(5, wt = trimmed_perc) %>%
arrange(desc(trimmed_perc)) %>%
select(folder, total_primer, trimmed_perc)
View(over)
has_primer %>%
inner_join(logs) %>%
top_n(3, wt = trimmed_perc) %>%
arrange(desc(trimmed_perc)) %>%
select(folder, total, total_primer, trimmed_perc)
quantile(has_primer$total_primer, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(total_primer = comma(value)) %>%
select(quantiles, total_primer) %>%
kbl(caption = 'primer percentage distribution in 297 shotgun samples') %>%
kable_styling()
has_primer %>%
inner_join(logs) %>%
top_n(3, wt = trimmed_perc) %>%
arrange(desc(trimmed_perc)) %>%
select(folder, total, total_primer, trimmed_perc)
161791/3687946
View(has_primer)
has_primer <- over %>%
filter(str_detect(source, 'Primer'))
# how many samples are in the df
have_primer_or_adapter <- over %>% distinct(folder) %>% nrow
# how many samples have_primer_or_adapter (perc)
have_primer_or_adapter/nrow(logs)*100
has_primer <- over %>%
filter(str_detect(source, 'Primer'))
over %>%
filter(str_detect(source, 'Primer')) %>%
kbl(caption = 'primer hits in 297 shotgun samples') %>%
kable_styling()
over %>%
filter(str_detect(source, 'Adapter')) %>%
kbl(caption = 'Adapter hits in shotgun samples') %>%
kable_styling()
knitr::opts_chunk$set(echo = TRUE)
total <- read_csv('../data/08_total_seq_shotgun_FALSE.csv')
View(total)
qual <- read_csv('../data/08_quality_score_shotgun_FALSE.csv')
View(qual)
qual
read_csv('../data/08_quality_score_shotgun_FALSE.csv') %>%
mutate(fn = str_replace(fn, '../data/chi_16s//',''))
qual <- read_csv('../data/08_quality_score_shotgun_FALSE.csv') %>%
mutate(fn = str_replace(fn, '../data/chi_16s//','')) %>%
mutate(pair = if_else(str_detect(fn, 'R1'), 'R1', 'R2'))
total
total
total <- read_csv('../data/08_total_seq_shotgun_FALSE.csv') %>%
mutate(pair = if_else(str_detect(fn, 'R1'), 'R1', 'R2')) %>%
filter(pair == 'R1')
total
total <- read_csv('../data/08_total_seq_shotgun_FALSE.csv') %>%
mutate(pair = if_else(str_detect(fn, 'R1'), 'R1', 'R2')) %>%
filter(pair == 'R1') %>%
mutate(totalsample = totalseq * 2)
quantile(total$totalsample, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(totalsample = comma(value)) %>%
select(quantiles, totalsample) %>%
kbl(caption = 'Total number of reads distribution in 16s samples') %>%
kable_styling()
View(qual)
qual
# quality score
qualscore <- qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass ) %>%
mutate(pass_perc = round(pass/total_one*100, 2))
qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail'))
# quality score
qualscore <- qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(fn, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass ) %>%
mutate(pass_perc = round(pass/total_one*100, 2))
View(qualscore)
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 50, color = 'white', fill = 'forestgreen',
title = '% reads that have average quality score > 28 in 16s samples')  +
facet_grid(pair~ .)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(kableExtra)
library(ggpubr)
knitr::opts_chunk$set(echo = F, message = F, warning = F)
library(scales)
knitr::opts_chunk$set(echo = TRUE)
# all the irep values I got
fns <- list.files('../data/growth/irep/updated_irep/', full.names = T, pattern = '.tsv')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(ggpubr)
library(scales)
library(kableExtra)
# the table with the metrics grabbed from the log files
logs <- read_csv('../data/09_shotgun_QC.csv')
# the table with the quality score from fastqc
qual <- read_csv('../data/08_quality_score_shotgun_TRUE.csv') %>%
mutate(fn = str_replace(fn, '../data/chi_shotgun//','')) %>%
separate(fn, into = c('folder','pair'), sep = '__concat_')
# the table with the over-represented sequences
over <- read_csv('../data/08_adapter_no_hit_FALSE.csv') %>%
filter(str_detect(fn, 'chi_shotgun')) %>%
mutate(fn = str_replace(fn, '../data/chi_shotgun//','')) %>%
separate(fn, into = c('folder','pair'), sep = '__concat_')
# distribution of total number of reads in a sample
# logs %>%
#   ggviolin( y  ='total', add = 'boxplot', xlab = '') +
#   theme(axis.text.x = element_blank())
# the quantiles
quantile(logs$total, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(total = comma(value)) %>%
select(quantiles, total) %>%
kbl(caption = 'Total number of reads distribution in shotgun samples') %>%
kable_styling()
# decided to ignore samples with < 1 M reads
# the distribution of trimmed portions
quantile(logs$trimmed_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(trimmed_perc = comma(value)) %>%
select(quantiles, trimmed_perc) %>%
kbl(caption = 'Trimmed percentage distribution in shotgun samples') %>%
kable_styling()
# decided to ignore samples with trimmed portion > 50%
trim_remove_portion <- logs %>%
count(trimmed_perc > 50) %>%
mutate(perc = round(n/sum(n)*100,2))
trim_remove_portion %>%
kbl(caption = 'samples removed because trimmed portion > 50%') %>%
kable_styling()
# host genome percentage
quantile(logs$hg38_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
quantile(logs$hg38_perc, probs = seq(0.9, 1, 0.01)) %>%
enframe('quantiles', 'value') %>%
mutate(hg38_perc = comma(value)) %>%
select(quantiles, hg38_perc) %>%
kbl(caption = 'human host genome percentage distribution in shotgun samples') %>%
kable_styling()
# mapped to the mouse genome
quantile(logs$mm38_perc, probs = seq(0.1, 1, 0.1)) %>%
enframe('quantiles', 'value') %>%
mutate(mm38_perc = comma(value)) %>%
select(quantiles, mm38_perc) %>%
kbl(caption = 'mouse host genome percentage distribution in shotgun samples') %>%
kable_styling()
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50 & hg38_perc < 75)
# % of samples kept after the filtering
round(nrow(keep)/nrow(logs)*100, 2)
# quality score
qualscore <- qual %>%
mutate(threshold = if_else(qscore >= 28, 'pass', 'fail')) %>%
group_by(folder, pair, threshold) %>%
summarise(threshold_count = sum(count)) %>%
spread('threshold', 'threshold_count') %>%
mutate(total_one = fail + pass ) %>%
mutate(pass_perc = round(pass/total_one*100, 2))
# compare the quality score of the R1 and R2
qualscore %>%
gghistogram(x = 'pass_perc', bins = 50, color = 'white', fill = 'forestgreen',
title = '% reads that have average quality score > 28')  +
facet_grid(pair~ .)
# how many samples are in the df
have_primer_or_adapter <- over %>% distinct(folder) %>% nrow
# how many samples have_primer_or_adapter (perc)
have_primer_or_adapter/nrow(logs)*100
over %>%
filter(str_detect(source, 'Primer')) %>%
kbl(caption = 'primer hits in 297 shotgun samples') %>%
kable_styling()
over %>%
filter(str_detect(source, 'Adapter')) %>%
kbl(caption = 'Adapter hits in shotgun samples') %>%
kable_styling()
View(over)
View(over)
View(logs)
1617191/3687946
over
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage))
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
gghistogram( x = 'maxsample')
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50 & hg38_perc < 75)
View(keep)
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50)
keep
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50 & mm38_perc < 5)
keep
# ignore samples with < 1 M reads;  ignore samples with trimmed portion > 50% and ignore samples with high perc mapped to the mouse host genome. (the current host genomes include the human and mouse as well)
keep <- logs %>%
filter(total > 1e6 & trimmed_perc < 50 & mm38_perc < 5) %>%
mutate(left = total - trimmed - hg38 - mm38)
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
arrange( maxsample)
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
arrange( desc(maxsample))
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
gghistogram(x  = 'maxsample')
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage))
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
gghistogram(x  = 'maxsample')
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
quantiles( probability = seq(0,1,0.1))
?quantile
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
quantile( probability = seq(0,1,0.1))
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
quantile( probs = seq(0,1,0.1))
over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
quantile(x = .,  probs = seq(0,1,0.1))
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 )
df
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsamp > 1 ) %>%
quantile(x = .$maxsample,  probs = seq(0,1,0.1))
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsamp > 1 )
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 ) %>%
quantile(x = .$maxsample,  probs = seq(0,1,0.1))
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage)) %>%
filter(maxsample > 1 )
quantile(x = df$maxsample,  probs = seq(0,1,0.1))
df <- over %>%
group_by(folder) %>%
summarise(maxsample = max(percentage))
quantile(x = df$maxsample,  probs = seq(0,1,0.1))
quantile(x = df$maxsample,  probs = seq(0,1,0.01))
