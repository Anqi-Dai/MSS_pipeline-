'''
This Snakefile carries out diet project work with qiime2 **LOCALLTY**

To run, source activate qiime2-2020.2
'''
from glob import glob

rule all:
    input:
        'data/finalized/unweighted_unifrac_distance_matrix.qza'
        
sample_dir = '/Users/daia1/pipeline/scripts/food_tree/data/cleaned_diet_data'

#############################################################
# The diet data 
#############################################################

rule convert_dehywt_table_to_biom:
    input:
        '{sample_dir}/FINAL_97_food_code_counts_matrix.tsv'
    output:
        '{sample_dir}/FINAL_97_food_code_counts_matrix.biom'
    shell:
        'biom convert -i  {input[0]} -o {output[0]} --to-hdf5 --table-type="Table"'

rule convert_dehywt_table_to_qza:
    input:
        '{sample_dir}/FINAL_97_food_code_counts_matrix.biom'
    output:
        '{sample_dir}/FINAL_97_food_code_counts_matrix.qza'
    shell:
        'qiime tools import --input-path {input[0]} --output-path  {output[0]} --type "FeatureTable[Frequency]"' 

rule cal_unweighted_unifrac:
    input:
        cts='{sample_dir}/FINAL_97_food_code_counts_matrix.qza',
        tree='data/cleaned_tree/output_food_tree_datatree.qza'
    output:
        '{sample_dir}/FINAL_97_unweighted_unifrac_distance_matrix.qza'
    shell:
        '''
        qiime diversity beta-phylogenetic \
            --i-table {input.cts} \
            --i-phylogeny {input.tree} \
            --p-metric unweighted_unifrac \
            --o-distance-matrix {output[0]}
        '''

# export so that I can visualize in ggplot
rule export_food_unifrac:
    input:
        '{sample_dir}/FINAL_97_unweighted_unifrac_distance_matrix.qza'
    output:
        '{sample_dir}/FINAL_97_unweighted_unifrac_distance_matrix'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'


rule funifrac:
    input:
        sample_dir+'/FINAL_97_unweighted_unifrac_distance_matrix'

rule pcoa_unweighted_unifrac:
    input:
        'data/finalized/unweighted_unifrac_distance_matrix.qza'
    output:
        'data/finalized/unweighted_unifrac_pcoa.qza'
    shell:
        'qiime diversity pcoa \
            --i-distance-matrix {input[0]} \
            --o-pcoa {output[0]}'

# visualize needs to use the meta table 

rule visualize_unweighted_unifrac_with_emperor_custom_axes:
    input:
        pcoa='data/finalized/unweighted_unifrac_pcoa.qza',
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/unweighted_unifrac_distance_emperor_foodDayRT.qzv'
    shell:
        '''
        qiime emperor plot \
            --i-pcoa {input.pcoa} \
            --m-metadata-file {input.meta} \
            --p-custom-axes foodDayRT \
            --o-visualization  {output[0]}
        ''' 


rule visualize_unweighted_unifrac_with_emperor_faith_pd:
    input:
        pcoa='data/finalized/unweighted_unifrac_pcoa.qza',
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/unweighted_unifrac_distance_emperor_faith_pd.qzv'
    shell:
        '''
        qiime emperor plot \
            --i-pcoa {input.pcoa} \
            --m-metadata-file {input.meta} \
            --p-custom-axes faith_pd \
            --o-visualization  {output[0]}
        ''' 



rule visualize_unweighted_unifrac_with_emperor:
    input:
        pcoa='data/finalized/unweighted_unifrac_pcoa.qza',
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/unweighted_unifrac_distance_emperor.qzv'
    shell:
        '''
        qiime emperor plot \
            --i-pcoa {input.pcoa} \
            --m-metadata-file {input.meta} \
            --o-visualization  {output[0]}
        '''

rule viz:
    input:
        'data/finalized/unweighted_unifrac_distance_emperor.qzv',
        'data/finalized/unweighted_unifrac_distance_emperor_faith_pd.qzv',
        'data/finalized/unweighted_unifrac_distance_emperor_foodDayRT.qzv'

rule emperor:
    input:
        'data/finalized/unweighted_unifrac_distance_emperor.qzv', 'data/finalized/unweighted_unifrac_distance_emperor_faith_pd.qzv'

# so that I can do a ggplot
rule export_pcoa_matrix:
    input:
        'data/finalized/unweighted_unifrac_distance_matrix.qza'
    output:
        'data/finalized/unweighted_unifrac'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'



# longitudinal analysis

rule create_div_qza:
    input:
        'data/finalized/faith_all.tsv'
    output:
        'data/finalized/faith_all.qza'
    shell:
        '''
        qiime tools import --input-path {input[0]} --output-path  {output[0]} --type 'SampleData[AlphaDiversity]'
        '''


rule faith_alpha_volatility:
    input:
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/faith_alpha_volatility.qzv'
    shell:
        '''
        qiime longitudinal volatility \
            --m-metadata-file {input.meta} \
            --p-default-metric faith_pd \
            --p-default-group-column intensity \
            --p-state-column foodDayRT \
            --p-individual-id-column mrn \
            --o-visualization {output[0]}
        '''

# First differencing to track rate of change


rule faith_first_difference:
    input:
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/faith_first_difference.qza'
    shell:
        '''
        qiime longitudinal first-differences \
            --m-metadata-file {input.meta} \
            --p-metric faith_pd \
            --p-state-column foodDayRT \
            --p-individual-id-column mrn \
            --p-replicate-handling random \
            --o-first-differences {output[0]}
        '''


rule faith_first_difference_volatility:
    input:
        meta='data/finalized/meta_data_67.tsv',
        first_diff='data/finalized/faith_first_difference.qza'
    output:
        'data/finalized/faith_first_difference_volatility.qzv'
    shell:
        '''
        qiime longitudinal volatility \
            --m-metadata-file {input.meta} \
            --m-metadata-file {input.first_diff} \
            --p-default-metric Difference \
            --p-default-group-column intensity \
            --p-state-column foodDayRT \
            --p-individual-id-column mrn \
            --o-visualization {output[0]}
        '''


# feature volatility -- to pick out predictive features

'''
This pipeline identifies features that are predictive of a numeric metadata column, “state_column” (e.g., time), 
and plots their relative frequencies across states using interactive feature volatility plots
'''

rule feature_volatility:
    input:
        cts='data/finalized/all_patients_food_dehywt_table_w_fooID_by_day.qza',
        meta='data/finalized/meta_data_67.tsv'
    output:
        'data/finalized/cts_feature_volatility'
    shell:
        '''
        qiime longitudinal feature-volatility \
         1   --i-table {input.cts} \
            --m-metadata-file {input.meta} \
            --p-state-column faith_pd \
            --p-individual-id-column mrn \
            --p-n-jobs 4 \
            --output-dir {output[0]}
        '''

rule output:
    input:
        'data/finalized/cts_feature_volatility'








######################################################################
# the Microbiome data
######################################################################

# Train our own classifier

## import the silva OTU fasta seq and taxanomy to qiime

rule import_silva_ref_seq:
    input:
        'data/qiime/SILVA_132_QIIME_release/rep_set/rep_set_16S_only/99/silva_132_99_16S.fna'
    output:
        'data/qiime/silva_132_99.qza'
    shell:
        '''
        qiime tools import \
            --type 'FeatureData[Sequence]' \
            --input-path {input[0]} \
            --output-path {output[0]}
        '''

rule import_silva_taxonomy:
    input:
        'data/qiime/SILVA_132_QIIME_release/taxonomy/16S_only/99/majority_taxonomy_7_levels.txt'
    output:
        'data/qiime/silva_132_99_taxa.qza'
    shell:
        '''
        qiime tools import \
            --type 'FeatureData[Taxonomy]' \
            --input-format HeaderlessTSVTaxonomyFormat \
            --input-path {input[0]} \
            --output-path {output[0]}
        '''

# Extract reference reads
################################
#Here truncate at 210 cuz this
# dataset of 1002 samples look
# so
###############################

rule extract_ref_reads:
    input:
        silva_ref='data/qiime/silva_132_99.qza'
    output:
        ref_seq='data/qiime/us_ref-seqs.qza'
    shell:
        '''
        qiime feature-classifier extract-reads \
            --i-sequences {input.silva_ref} \
            --p-f-primer AYTGGGYDTAAAGNG \
            --p-r-primer CCGTCAATTYHTTTRAGT \
            --p-trunc-len 210 \
            --p-min-length 180 \
            --p-max-length 274 \
            --p-n-jobs 4 \
            --o-reads {output.ref_seq}
        '''


# train the classifier with Naive Bayes

rule fit_classifier_naive_bayes:
    input:
        ref_seq='data/qiime/us_ref-seqs.qza',
        taxonomy='data/qiime/silva_132_99_taxa.qza'
    output:
        classifier='data/qiime/us_classifier.qza'
    shell:
        '''
        qiime feature-classifier fit-classifier-naive-bayes \
            --i-reference-reads {input.ref_seq} \
            --i-reference-taxonomy {input.taxonomy} \
            --o-classifier {output.classifier}
        '''

# the above two steps are done on the cluster cuz it takes shorter time


# Test the classifier

rule test_classifier_on_our_data:
    input:
        classifier='data/qiime/us_classifier.qza',
        rep_seq='data/qiime/pe-demux_dada2_rep_seqs.qza'
    output:
        'data/qiime/us_taxonomy.qza'
    shell:
        '''
        qiime feature-classifier classify-sklearn \
            --i-classifier {input.classifier} \
            --i-reads {input.rep_seq} \
            --o-classification {output[0]}
        '''

rule visualize_our_taxonomy:
    input:
        'data/qiime/us_taxonomy.qza'
    output:
        'data/qiime/us_taxonomy.qzv'
    shell:
        'qiime metadata tabulate \
            --m-input-file {input[0]} \
            --o-visualization {output[0]}'

rule class:
    input:
        'data/qiime/us_taxonomy.qzv'

# Alpha rarefaction plotting
# need to use the pheno table for the stool samples
# here use pe-demux_dada2_filtered.qza cuz on the cluster only keeping the features in the insertion tree

rule visualize_alpha_rarefaction:
    input:
        cts='data/qiime/pe-demux_dada2_filtered.qza',
        tree='data/qiime/greengenes_insertion-tree.qza',
        meta='data/pheno/samples_pheno_67.tsv'
    output:
        'data/qiime/us_alpha-rarefaction.qzv'
    shell:
        '''
        qiime diversity alpha-rarefaction \
            --i-table {input.cts} \
            --i-phylogeny {input.tree} \
            --p-max-depth 4000 \
            --m-metadata-file {input.meta} \
            --o-visualization {output[0]}
        '''

 
# use the above visualization to decide the sampling depth for normalization in the core metrics step
# where does the curve start to level out?

rule core_metrics_phylogenetic:
    input:
        cts='data/qiime/pe-demux_dada2_filtered.qza',
        tree='data/qiime/greengenes_insertion-tree.qza',
        meta='data/pheno/samples_pheno_67.tsv',
        sampling_depth='1000'
    output:
        'data/qiime/core-metrics-results'
    shell:
        '''
        qiime diversity core-metrics-phylogenetic \
            --i-phylogeny {input.tree} \
            --i-table {input.cts} \
            --p-sampling-depth {input.sampling_depth} \
            --m-metadata-file {input.meta}  \
            --output-dir {output[0]}
        '''



rule rare:
    input:
        'data/qiime/core-metrics-results'



#########################################################################
# This section is for calculating beta diversity for our stool samples
# however you lump the stool samples together
########################################################################

# the diet data spans from the -10 to 41 relative to transplant, 
# so need to filter on the stool samples to include near to that period

# here I'm gonna use the samples I organized from the R script 13: stb_final_mean
# and to filter you can use a meta table and create a column to mark which samples to keep and which to remove
'''
rule filter_stool_samples_close_to_diet:
    input:
        ALL_in_tree='data/finalized/pe-demux_dada2_filtered.qza',
        meta='data/finalized/stool/filter_stool_close_to_diet_meta.tsv'
    output:
        'data/finalized/stool/pe-demux_dada2_filtered_close_to_diet_data.qza'
    shell:
        '
        qiime feature-table filter-samples \
            --i-table {input.ALL_in_tree} \
            --m-metadata-file {input.meta} \
            --p-where "[keep]='keep'" \
            --o-filtered-table {output[0]}
        '
'''


##########################
# For procrustes between mean microbiome and mean diet
#########################

###########
# microbe data
##########

rule convert_mean_microbe_relab_table_to_biom:
    input:
        'data/finalized/stool/mean_microbe_relab_per_pt.tsv'
    output:
        'data/finalized/stool/mean_microbe_relab_per_pt.biom'
    shell:
        'biom convert -i  {input[0]} -o {output[0]} --to-hdf5 --table-type="Table"'

rule convert_above_table_to_qza:
    input:
        'data/finalized/stool/mean_microbe_relab_per_pt.biom'
    output:
        'data/finalized/stool/mean_microbe_relab_per_pt.qza'
    shell:
        'qiime tools import --input-path {input[0]} --output-path  {output[0]} --type "FeatureTable[Frequency]"' 

# for species relab data calculate the braycurtis distance! lalala

rule calculate_mean_microbe_braycurtis_distance:
    input:
        'data/finalized/stool/mean_microbe_relab_per_pt.qza'
    output:
        'data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_distance_matrix.qza'
    shell:
        '''
        qiime diversity beta \
            --i-table {input[0]} \
            --p-metric  braycurtis \
            --o-distance-matrix {output[0]}
        '''

# do the PCoA

rule mean_microbe_braycurtis_PCoA:
    input:
        'data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_distance_matrix.qza'
    output:
        'data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_pcoa.qza'
    shell:
        'qiime diversity pcoa \
            --i-distance-matrix {input[0]} \
            --o-pcoa {output[0]}'


###########
# diet data
##########

rule convert_mean_food_to_biom:
    input:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt.tsv'
    output:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt.biom'
    shell:
        'biom convert -i  {input[0]} -o {output[0]} --to-hdf5 --table-type="Table"'

rule convert_mean_food_to_qza:
    input:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt.biom'
    output:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt.qza'
    shell:
        'qiime tools import --input-path {input[0]} --output-path  {output[0]} --type "FeatureTable[Frequency]"'


rule cal_unweighted_unifrac_for_mean_food:
    input:
        cts='data/finalized/mean_foodID_dehydrated_weight_per_pt.qza',
        tree='data/finalized/output_food_tree_datatree.qza'
    output:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_distance_matrix.qza'
    shell:
        '''
        qiime diversity beta-phylogenetic \
            --i-table {input.cts} \
            --i-phylogeny {input.tree} \
            --p-metric unweighted_unifrac \
            --o-distance-matrix {output[0]}
        '''

rule pcoa_unweighted_unifrac_mean_food:
    input:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_distance_matrix.qza'
    output:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza'
    shell:
        'qiime diversity pcoa \
            --i-distance-matrix {input[0]} \
            --o-pcoa {output[0]}'


###############
# output the pcoa
# and do it in R with vegan
##############

rule export_mean_food_pcoa:
    input:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza'
    output:
        'data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'


rule export_mean_microbe_pcoa:
    input:
        'data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_pcoa.qza'
    output:
        'data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_pcoa'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'

# Apply a two-sided Mantel test to identify correlation between two distance matrices

rule mean_both_mantel_test:
    input:
        food_distance='data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_distance_matrix.qza',
        microbe_distance='data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_distance_matrix.qza'
    output:
        'data/finalized/mean_food_microbe_mantel_test.qzv'
    shell:
        '''
        qiime diversity mantel \
            --i-dm1 {input.food_distance} \
            --i-dm2 {input.microbe_distance} \
            --p-method 'spearman' \
            --p-permutations 999 \
            --o-visualization {output[0]}
        '''


#############
# the procrustes
#############


rule mean_microbe_food_procrustes:
    input:
        food_pcoa='data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza',
        microbe_pcoa='data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_pcoa.qza'
    output:
        'data/finalized/mean_procrustes'
    shell:
        '''
        qiime diversity procrustes-analysis \
            --i-reference {input.food_pcoa} \
            --i-other {input.microbe_pcoa} \
            --output-dir {output[0]} 
        '''

# can be visualized in emperor

rule visualize_mean_procrustes_with_emperor:
    input:
        food_pcoa='data/finalized/mean_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza',
        microbe_pcoa='data/finalized/stool/mean_microbe_relab_per_pt_braycurtis_pcoa.qza',
        meta='data/finalized/pheno/meta_food_deID_67.tsv'
    output:
        'data/finalized/mean_procrustes_emperor_vis.qzv'
    shell:
        '''
        qiime emperor procrustes-plot \
            --i-reference-pcoa {input.food_pcoa} \
            --i-other-pcoa {input.microbe_pcoa} \
            --m-metadata-file {input.meta} \
            --o-visualization {output[0]}
        '''


#####################################################################################
# This section contains the template of doing beta diversity distance calculations 
# and the pcoa for diet data in different time period, need to do it here cuz 
# I need to use the tree.
#####################################################################################

rule covert_tree_to_qza:
    input:
        'data/cleaned_tree/output_food_tree_datatree.newick'
    output:
        'data/cleaned_tree/output_food_tree_datatree.qza'
    shell:
        '''
        qiime tools import \
            --input-path {input[0]} --output-path  {output[0]} --type 'Phylogeny[Rooted]'
        '''

rule convert_food_to_biom:
    input:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt.tsv'
    output:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt.biom'
    shell:
        'biom convert -i  {input[0]} -o {output[0]} --to-hdf5 --table-type="Table"'

rule convert_biom_to_qza:
    input:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt.biom'
    output:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt.qza'
    shell:
        'qiime tools import --input-path {input[0]} --output-path  {output[0]} --type "FeatureTable[Frequency]"'


rule cal_unweighted_unifrac_for_food:
    input:
        cts='data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt.qza',
        tree='data/cleaned_tree/output_food_tree_datatree.qza'
    output:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_distance_matrix.qza'
    shell:
        '''
        qiime diversity beta-phylogenetic \
            --i-table {input.cts} \
            --i-phylogeny {input.tree} \
            --p-metric unweighted_unifrac \
            --o-distance-matrix {output[0]}
        '''

rule pcoa_unweighted_unifrac_food:
    input:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_distance_matrix.qza'
    output:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza'
    shell:
        'qiime diversity pcoa \
            --i-distance-matrix {input[0]} \
            --o-pcoa {output[0]}'

rule export_food_pcoa:
    input:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa.qza'
    output:
        'data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'


###########
# microbe data
# have to use qiime too cuz using R vegan the matrix dimension just don't seem right
##########


rule convert_stool_relab_table_to_biom:
    input:
        'data/finalized/paired/pNday/{time}_stool_relab_species.tsv'
    output:
        'data/finalized/paired/pNday/{time}_stool_relab_species.biom'
    shell:
        'biom convert -i  {input[0]} -o {output[0]} --to-hdf5 --table-type="Table"'

rule convert_stool_table_to_qza:
    input:
        'data/finalized/paired/pNday/{time}_stool_relab_species.biom'
    output:
        'data/finalized/paired/pNday/{time}_stool_relab_species.qza'
    shell:
        'qiime tools import --input-path {input[0]} --output-path  {output[0]} --type "FeatureTable[Frequency]"' 

# for species relab data calculate the braycurtis distance

rule calculate_stool_microbe_braycurtis_distance:
    input:
        'data/finalized/paired/pNday/{time}_stool_relab_species.qza'
    output:
        'data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_distance_matrix.qza'
    shell:
        '''
        qiime diversity beta \
            --i-table {input[0]} \
            --p-metric  braycurtis \
            --o-distance-matrix {output[0]}
        '''

rule stool_microbe_braycurtis_PCoA:
    input:
        'data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_distance_matrix.qza'
    output:
        'data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_pcoa.qza'
    shell:
        'qiime diversity pcoa \
            --i-distance-matrix {input[0]} \
            --o-pcoa {output[0]}'

rule export_stool_microbe_pcoa:
    input:
        'data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_pcoa.qza'
    output:
        'data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_pcoa'
    shell:
        'qiime tools export --input-path {input[0]} --output-path {output[0]}'


# the loop variable for this part

with open('data/finalized/paired/pNday/p5day_names_loop.csv') as f:
    content = f.readlines()

times5_mrn = [x.strip() for x in content]

with open('data/finalized/paired/pNday/p4day_names_loop.csv') as f:
    content = f.readlines()

times4_mrn = [x.strip() for x in content]


with open('data/finalized/paired/pNday/p3day_names_loop.csv') as f:
    content = f.readlines()

times3_mrn = [x.strip() for x in content]


with open('data/finalized/paired/pNday/p2day_names_loop.csv') as f:
    content = f.readlines()

times2_mrn = [x.strip() for x in content]


loop_vars = times2_mrn +  times3_mrn + times4_mrn + times5_mrn

stool_loop_vars = ['prophylactic_p1d_scts','prophylactic_p2d_scts','prophylactic_p3d_scts','prophylactic_p4d_scts','prophylactic_p5d_scts']

food_loop_vars = ['prophylactic_p1d','prophylactic_p2d','prophylactic_p3d','prophylactic_p4d','prophylactic_p5d']

rule stool:
    input:
        expand('data/finalized/paired/pNday/{time}_stool_relab_species_braycurtis_pcoa', time = stool_loop_vars)

rule food:
    input:
        expand('data/finalized/paired/pNday/{time}_diet_foodID_dehydrated_weight_per_pt_unweighted_unifrac_pcoa',  time = food_loop_vars)
