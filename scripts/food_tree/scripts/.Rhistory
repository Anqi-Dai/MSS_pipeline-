}
mean_p2d_df <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_diet(mrn, p1d, p2d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'fg1_name', value = 'ave_fg', fill = 0) %>%
inner_join(stb, by = "sampleid") %>%
select(-age, -sex, -source)
# if a patient had EN in the previous two days before a stool sample collected,
# it will be marked TRUE or otherwise FALSE
p2d_df <- stb %>%
select(sampleid, mrn) %>%
inner_join(samples_castori_ag %>% select(sampleid, datecollection)) %>%
mutate(p1d = datecollection -1,
p2d = datecollection -2) %>%
mutate(p2d_int = interval(p2d, p1d)) %>%
select(sampleid, datecollection, mrn, p1d, p2d, p2d_int)
library(vdbR)
connect_database()
get_table_from_database('samples_castori_ag')
# if a patient had EN in the previous two days before a stool sample collected,
# it will be marked TRUE or otherwise FALSE
p2d_df <- stb %>%
select(sampleid, mrn) %>%
inner_join(samples_castori_ag %>% select(sampleid, datecollection)) %>%
mutate(p1d = datecollection -1,
p2d = datecollection -2) %>%
mutate(p2d_int = interval(p2d, p1d)) %>%
select(sampleid, datecollection, mrn, p1d, p2d, p2d_int)
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
rename(mrn = MRN) %>%
mutate(EN_int = interval(Date, Date))
has_en <- p2d_df %>%
inner_join(en, by = "mrn") %>%
mutate(had_en = int_overlaps(p2d_int, EN_int)) %>%
filter(had_en == 'TRUE')
# the above table has the sampleid that is exposed to EN
# a new column to mark the TPN
# if a patient had TPN in the previous two days before a stool sample collected,
TPN <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'TPN' & MRN %in% ptb$mrn) %>%
rename(mrn = MRN) %>%
mutate(TPN_int = interval(Date, Date))
has_tpn <- p2d_df %>%
inner_join(TPN, by = "mrn") %>%
mutate(had_tpn = int_overlaps(p2d_int, TPN_int)) %>%
filter(had_tpn == 'TRUE')
# the above table has the sampleid that is exposed to tpn
meta <- mean_p2d_df %>%
mutate(TPN = if_else(sampleid %in% has_tpn$sampleid, T, F),
EN = if_else(sampleid %in% has_en$sampleid, T, F)) %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left'))
meta %>%
write_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
View(meta)
View(meta)
meta %>%
write_csv('../data/046_meta1.csv')
meta1 <- read_csv('../data/046_meta1.csv')
meta1
meta1 <- read_csv('../data/046_meta1.csv') %>%
select(sampleid:fg_veggie)
STB <- read_csv('../data/152_combined_STB.csv')
META <- bind_rows(meta1, meta2)
META <- bind_rows(meta1, meta2) %>%
full_join(STB)
META <- bind_rows(meta1, meta2) %>%
full_join(STB, by = "sampleid")
View(META)
META <- bind_rows(meta1, meta2) %>%
full_join(STB, by = "sampleid") %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left'))
META %>% write_csv('../data/153_combined_META.csv')
META
# histogram of the alpha of two batches along time
META %>%
gghistogram(x = 'timebin', y = 'simpson_reciprocal') +
facet_grid(~ batch)
# histogram of the alpha of two batches along time
META %>%
gghistogram(x = 'sdrt', y = 'simpson_reciprocal') +
facet_grid(~ batch)
# histogram of the alpha of two batches along time
META %>%
gghistogram( x = 'simpson_reciprocal') +
facet_grid(~ batch)
# histogram of the alpha of two batches along time
META %>%
gghistogram( x = 'simpson_reciprocal') +
facet_grid(batch~ .)
# histogram of the alpha of two batches along time
META %>%
gghistogram( x = 'simpson_reciprocal', bins = 50) +
facet_grid(batch~ .)
# histogram of the alpha of two batches along time
META %>%
gghistogram( x = 'simpson_reciprocal', bins = 50) +
facet_grid(batch~ intensity)
ggsave('../data/153_alpha_conditioning.pdf')
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal') +
facet_grid(batch~ intensity)
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal')
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal') +
facet_grid(batch~ intensity)
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal', orientation = 'horizontal') +
facet_grid(batch~ intensity)
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal') +
facet_grid(batch~ intensity) +
theme(axis.text.x = element_text(angle = 90))
META %>%
ggboxplot( x = 'timebin', y = 'simpson_reciprocal', add = 'jitter') +
facet_grid(batch~ intensity) +
theme(axis.text.x = element_text(angle = 90))
ggsave('../data/153_timebin_alpha.pdf', width = 10)
run_fg_model <- function(meta_df, meta_df_name) {
model_div = brm( model_formular,
data = meta_df,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
post_res = suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv(str_glue('../data/153_model_fg_post_{meta_df_name}.csv'))
prior_df <- prior_draws(model_div)
prior_df %>% write_csv(str_glue('../data/153_model_fg_prior_{meta_df_name}.csv'))
}
model_formular <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "intensityreduced"),
prior(normal(2, 0.1), class = 'b', coef = "intensityablative"),
prior(normal(2, 0.1), class = 'b', coef = "intensitynonablative"))
library(brms)
library(tidybayes)
library(cowplot)
library(tidyverse)
library(ggpubr)
library(brms)
library(tidybayes)
library(cowplot)
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
model_formular <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "intensityreduced"),
prior(normal(2, 0.1), class = 'b', coef = "intensityablative"),
prior(normal(2, 0.1), class = 'b', coef = "intensitynonablative"))
run_fg_model <- function(meta_df, meta_df_name) {
model_div = brm( model_formular,
data = meta_df,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
post_res = suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv(str_glue('../data/153_model_fg_post_{meta_df_name}.csv'))
prior_df <- prior_draws(model_div)
prior_df %>% write_csv(str_glue('../data/153_model_fg_prior_{meta_df_name}.csv'))
}
View(META)
META_mod <- META %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
test <- run_fg_model(META_mod, 'all2')
# each batch individually
META_mod %>%
split(.$batch)
View(META_mod)
# pooled two batches
test <- run_fg_model(META_mod, 'all2')
# each batch individually
META_mod %>%
split(.$batch) %>%
imap(function(.x, .y){
run_fg_model(.x, .y)
})
META_mod
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model(.x, .y)
})
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model(.x, .y)
})
META_mod %>%
split(.$intensity)
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model(.x, .y)
})
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
run_fg_model_for_each_conditioning_level <- function(meta_df, meta_df_name) {
model_div = brm( model_formular_for_each_conditioning_level,
data = meta_df,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
post_res = suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv(str_glue('../data/153_model_fg_post_conditioning_{meta_df_name}.csv'))
prior_df <- prior_draws(model_div)
prior_df %>% write_csv(str_glue('../data/153_model_fg_prior_conditioning_{meta_df_name}.csv'))
}
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model_for_each_conditioning_level(.x, .y)
})
get_prior(model_formular_for_each_conditioning_level)
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior(model_formular_for_each_conditioning_level)
get_prior(model_formular_for_each_conditioning_level, data = META_mod)
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
priors_without_conditioning <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "Intercept"))
run_fg_model_for_each_conditioning_level <- function(meta_df, meta_df_name) {
model_div = brm( model_formular_for_each_conditioning_level,
data = meta_df,
warmup = 1000, iter = 3000,
prior = priors_without_conditioning,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
post_res = suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv(str_glue('../data/153_model_fg_post_conditioning_{meta_df_name}.csv'))
prior_df <- prior_draws(model_div)
prior_df %>% write_csv(str_glue('../data/153_model_fg_prior_conditioning_{meta_df_name}.csv'))
}
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model_for_each_conditioning_level(.x, .y)
})
get_prior(model_formular_for_each_conditioning_level)
get_prior(model_formular_for_each_conditioning_level, data = META_mod)
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
priors_without_conditioning <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'Intercept')
run_fg_model_for_each_conditioning_level <- function(meta_df, meta_df_name) {
model_formular_for_each_conditioning_level <-  log(simpson_reciprocal) ~
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
#intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
priors_without_conditioning <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'Intercept'))
run_fg_model_for_each_conditioning_level <- function(meta_df, meta_df_name) {
model_div = brm( model_formular_for_each_conditioning_level,
data = meta_df,
warmup = 1000, iter = 3000,
prior = priors_without_conditioning,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
post_res = suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv(str_glue('../data/153_model_fg_post_conditioning_{meta_df_name}.csv'))
prior_df <- prior_draws(model_div)
prior_df %>% write_csv(str_glue('../data/153_model_fg_prior_conditioning_{meta_df_name}.csv'))
}
get_prior(model_formular_for_each_conditioning_level, data = META_mod)
# pooled two batches and split on conditioning
META_mod %>%
split(.$intensity) %>%
imap(function(.x, .y){
run_fg_model_for_each_conditioning_level(.x, .y)
})
# split on conditioning for each batch
META_mod %>%
split(., list(.$batch, .$intensity)) %>%
imap(function(.x, .y){
run_fg_model_for_each_conditioning_level(.x, .y)
})
