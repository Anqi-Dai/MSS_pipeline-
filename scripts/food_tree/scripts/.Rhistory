filter(had_drug == 'TRUE')
exposed_empirical2 %>% distinct(sampleid)
exposed_empirical2 %>% distinct(sampleid)
p2d_df <- stb6 %>%
select(sampleid, mrn) %>%
inner_join(samples_castori_ag %>% select(sampleid, datecollection)) %>%
mutate(p1d = datecollection -1,
p2d = datecollection -2) %>%
mutate(p2d_int = interval(p2d, p1d)) %>%
select(sampleid, datecollection, mrn, p1d, p2d, p2d_int)
exposed_empirical2 <- empirical_med2 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical2
exposed_empirical2 %>% distinct(sampleid) %>% nrow
exposed_empirical2 %>% distinct(MRN) %>% nrow
exposed_empirical2 <- empirical_med2 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical2 %>% distinct(sampleid) %>% nrow
exposed_empirical2 %>% distinct(MRN) %>% nrow
View(exposed_empirical2)
exposed_empirical2 <- empirical_med2 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical2 %>% distinct(sampleid) %>% nrow
exposed_empirical2 %>% distinct(MRN) %>% nrow
# the above samples are flagged for exposed to empirical
stb7 <- stb6 %>%
mutate(empirical = if_else(sampleid %in% exposed_empirical2$sampleid, T, F))
stb7 %>% count(empirical)
exposed_empirical2 %>% distinct(sampleid) %>% nrow
# only few patients had TPN
# no patients had EN
support <- read_csv('../data/NutritionSupport_DietPatients.csv') %>%
filter(MRN %in% ptb$mrn) %>%
mutate(date = mdy(`Date Nutrition Support`)) %>%
filter(`Nutrition Support` == 'TPN') %>%
select(mrn = MRN,
date,
nutrition_support = `Nutrition Support`) %>%
mutate(TPN_int = interval(date, date))
# to find if any of those stool samples had TPN in the prior two days
has_tpn <- p2d_df %>%
inner_join(support, by = "mrn") %>%
mutate(had_tpn = int_overlaps(p2d_int, TPN_int)) %>%
filter(had_tpn == 'TRUE')
stb8 <- stb7 %>%
mutate(TPN = if_else(sampleid %in% has_tpn$sampleid, T, F)) %>%
mutate(EN = F)
# join with the intensity level of the patients
stb9 <- stb8 %>%
left_join(ptb %>% select(mrn, intensity), by = "mrn") %>%
mutate(intensity = case_when(
intensity == 'Ablative' ~ 'ablative',
intensity == 'Reduced Intensity' ~ 'reduced',
intensity == 'Nonablative' ~ 'nonablative'
))
stb9 %>% write_rds('../data/137_stb.rds')
exposed_empirical %>% distinct(sampleid)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(lubridate)
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('samples_castori_ag')
get_table_from_database ("antibiotics_antibacterial_multicenter_ag")
#abx <- read_rds('/Volumes/vandenbrinklab/Nutrition and microbiota/medication_exposures/meds_nutrition_batch1_2022-11-29.rds')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
ptb %>% write_rds('../data/cleaned_patients/diet_patients_97.rds')
meta %>% distinct(mrn)
# start the cleaning of the medication data from the raw source
picked <-  c('vancomycin', 'imipenem_cilastatin','meropenem','ertapenem', 'cefepime', 'linezolid','metronidazole','piperacillin_tazobactam')
med1 <- read_rds('../data/tasks_nutrition_batch1_2022-11-29.rds') %>%
select(MRN, start_date, stop_date, drug_name, route) %>%
mutate(drug_name_clean = str_replace_all(drug_name, '-', '_')) %>%
mutate(drug_name_clean = str_to_lower(drug_name_clean),
mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn)
now <-   med1 %>% count(drug_name_clean) %>% arrange(desc(n))
allpickes <- tibble(picked = picked) %>%
summarise(text = str_c(picked, collapse = "|"))
allhas <- now %>%
filter(str_detect(drug_name_clean, allpickes$text))
allroute <- empirical_med1 %>% count(together) %>% arrange(desc(n))
# start the cleaning of the medication data from the raw source
picked <-  c('vancomycin', 'imipenem_cilastatin','meropenem','ertapenem', 'cefepime', 'linezolid','metronidazole','piperacillin_tazobactam')
med1 <- read_rds('../data/tasks_nutrition_batch1_2022-11-29.rds') %>%
select(MRN, start_date, stop_date, drug_name, route) %>%
mutate(drug_name_clean = str_replace_all(drug_name, '-', '_')) %>%
mutate(drug_name_clean = str_to_lower(drug_name_clean),
mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn)
now <-   med1 %>% count(drug_name_clean) %>% arrange(desc(n))
allpickes <- tibble(picked = picked) %>%
summarise(text = str_c(picked, collapse = "|"))
allhas <- now %>%
filter(str_detect(drug_name_clean, allpickes$text))
#allroute <- empirical_med1 %>% count(together) %>% arrange(desc(n))
empirical_med1 <- med1 %>%
filter(drug_name_clean %in% picked) %>%
select(-drug_name) %>%
mutate(together = str_glue('{drug_name_clean}__{route}')) %>%
filter(! together %in% c('vancomycin__IV','vancomycin__IVPB'))
# picked <-  c("azithromycin","cefepime", "ciprofloxacin", "imipenem_cilastatin", "ertapenem","levofloxacin","linezolid","meropenem","metronidazole","piperacillin_tazobactam","sulfamethoxazole_trimethoprim")
#
# abx <- antibiotics_antibacterial_multicenter_ag %>%
#   filter(institution == 'MSKCC' ) %>%
#   mutate(mrn = as.numeric(patient_id)) %>%
#   filter(mrn %in% dtb$mrn) %>%
#   mutate (drug_clean = if_else (drug_name_clean == "vancomycin",
#                                 if_else (route_simple == "oral","vancomycin_oral", "vancomycin_iv"),
#                                 if_else (drug_name_clean %in% picked,
#                                          drug_name_clean,"atb_other"))) %>%
#   left_join(ptb %>% select(mrn, hct)) %>%
#   mutate(abx_p_start = start - hct,
#          abx_p_stop = stop - hct) %>%
#   filter (abx_p_start > -30 & abx_p_stop < 70)
p2d_df <- meta %>%
select(sampleid, mrn) %>%
inner_join(samples_castori_ag %>% select(sampleid, datecollection)) %>%
mutate(p1d = datecollection -1,
p2d = datecollection -2) %>%
mutate(p2d_int = interval(p2d, p1d)) %>%
select(sampleid, datecollection, mrn, p1d, p2d, p2d_int)
# then repeat this for all of the drugs
# all the drugs that I wanna see if there is an exposure in the previous 2 days
exposed_empirical <- empirical_med1 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical %>% distinct(sampleid)
exposed_empirical %>% distinct(MRN)
exposed_empirical %>% write_rds('../data/134_743stool_samples_p2d_drug_exposure.rds')
# find_exposure %>%
#   gghistogram(x = 'abx_start_day', facet.by = 'drug_clean', fill = 'black') +
#   geom_vline( xintercept =0)
# # find out the samples that were exposed to empirical abx
# empirical_abx <- c('vancomycin_oral',	'imipenem_cilastatin',	'meropenem',	'ertapenem',		'cefepime',		'linezolid',	'metronidazole',	'piperacillin_tazobactam')
#
# empirical_exposed <- find_exposure %>%
#   filter(drug_clean %in% empirical_abx)
#
# new_exposed <- empirical_exposed %>% distinct(sampleid)
#
# old_exposed <- meta %>%
#   filter(empirical == 'TRUE')
#
# library(ggvenn)
# two_list <- list(old = old_exposed$sampleid,new = new_exposed$sampleid)
# ggvenn(two_list)
# need to update my meta table with this newly updated exposure data
new_meta <- meta %>%
mutate(empirical = if_else(sampleid %in% exposed_empirical$sampleid, T, F))
new_meta %>% write_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
new_meta %>% summary()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(ggpubr)
# Below is the code I did to find out the exposure to the abx we picked orally
library(lubridate)
library(vdbR)
connect_database()
get_table_from_database('samples_castori_ag')
# the table that has the stool samples qualified to be in the model
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
# the table that has the patient information
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
# below is the empirical abx that we picked
picked <-  c('vancomycin', 'imipenem_cilastatin','meropenem','ertapenem', 'cefepime', 'linezolid','metronidazole','piperacillin_tazobactam')
# the below rds is the medication data Tsoni pulled on Nov 29 for batch 1
# clean the drug names
med1 <- read_rds('../data/tasks_nutrition_batch1_2022-11-29.rds') %>%
select(MRN, start_date, stop_date, drug_name, route) %>%
mutate(drug_name_clean = str_replace_all(drug_name, '-', '_')) %>%
mutate(drug_name_clean = str_to_lower(drug_name_clean),
mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn)
# select only the entries that represent the oral exposure to the empirical drugs
empirical_med_oral1 <- med1 %>%
filter(drug_name_clean %in% picked) %>%
select(-drug_name) %>%
filter(route == 'oral') %>%
filter(mrn %in% ptb$mrn)
# make a time interval that means the day -2 to day -1 for each qualified stool sample
p2d_df <- meta %>%
select(sampleid, mrn) %>%
inner_join(samples_castori_ag %>% select(sampleid, datecollection)) %>%
mutate(p1d = datecollection -1,
p2d = datecollection -2) %>%
mutate(p2d_int = interval(p2d, p1d)) %>%
select(sampleid, datecollection, mrn, p1d, p2d, p2d_int)
# find if there is an overlap between the prior two days of every stool sample and the administering of the oral empirical drugs, and identify the exposed stool samples
exposed_empirical <- empirical_med_oral1 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical %>% distinct(sampleid) %>% nrow
exposed_empirical %>% distinct(MRN) %>% nrow
# for batch 2, the same method is used
stb2 <- read_rds('../data/137_stb.rds')
stb2_exposed <- stb2 %>%
filter(empirical == 'TRUE')
stb2_exposed %>% distinct(sampleid) %>% nrow
stb2_exposed %>% distinct(mrn) %>% nrow
# prepare the tables for taxUMAP
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb2 <- read_rds('../data/136_updated_dtb2.rds') %>% mutate(Food_code = as.numeric(Food_code))
all.equal(colnames(dtb1), colnames(dtb2))
# the weight need to be relative so needs to normalize them
fc_table <- bind_rows(dtb1, dtb2) %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
group_by(mrn, fdrt, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
ungroup() %>%
mutate(index_column = str_glue('P{mrn}_{fdrt}')) %>%
select(index_column, Food_code, total)
fc_total <- fc_table %>%
group_by(index_column) %>%
summarise(daily_total = sum(total))
fc_df <- fc_table %>%
left_join(fc_total) %>%
mutate(daily_relative = total/daily_total) %>%
select(index_column,Food_code, daily_relative ) %>%
spread('Food_code', 'daily_relative', fill = 0)
fc_df %>% write_csv('../data/143_food_code_relative.csv')
actual_foodids <- as.character(fc_table$Food_code)
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(ASV = FoodID, Kingdom = L1, Phylum = L2, Class = L3, Order = L4)
food_taxa %>% write_csv('../data/143_food_taxa.csv')
# ~/pipeline/scripts/food_tree/softwares/taxumap/run_taxumap.py -t 143_food_taxa.csv -m 143_food_code_relative.csv --agg_levels Kingdom/Phylum -n 173 --weights 1/0.5 --outdir batch_all_taxumap_kingdom_and_phylum
# the resulted coords from taxUMAP
pt1 <- unique(dtb1$mrn)
pt2 <- unique(dtb2$mrn)
out <- read_csv('../data/batch_all_taxumap_kingdom_and_phylum/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt)) %>%
mutate(batch = if_else(mrn %in% pt1, 'batch1', if_else(mrn %in% pt2, 'batch2', 'NA')))
# to see the distribution of the two batches
out %>%
arrange(fdrt ) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'batch', palette = 'nejm', alpha = 0.1, facet.by = 'batch') +
theme(aspect.ratio = 1, legend.position = 'right')
knitr::opts_chunk$set(echo = TRUE)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')%>% mutate(Food_code = as.character(Food_code))
knitr::opts_chunk$set(echo = TRUE)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
dtb1_check <- dtb1 %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, Calories_kcal/Energy_kcal*100)) %>%
mutate(dehydrated_weight = if_else(total_weight == 99999, 0.0001, total_weight*(1 - Water_g/100))) %>%
mutate(check = if_else(dehydrated_weight > 30 & Water_g > 75, T, F))
dtb1_unchanged <- dtb1_check %>%
filter(check == 'FALSE')%>%
select(colnames(dtb1))
dtb1_change <- dtb1_check %>%
filter(check == 'TRUE')
# EN ones have the food code we created and the dehydrated weight are converted from the wet weight
dtb1_EN <- dtb1 %>%
filter(Unit == 'EN unit')
dtb1_change
checktotal <- dtb1_change %>%
distinct(Food_NSC, Unit, .keep_all = T )
# the unique items with the checked values
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check2 <- read_csv('../data/136_check_2_batch_cal_peter.csv')
# the ones that are checked in batch 2
check1_already <- read_csv('../data/136_check_1_batch_cal.csv')  %>%
left_join(check2 %>% distinct(Food_NSC, Unit) %>% mutate(grp = 'checked')) %>%
filter(grp == 'checked')  %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check1_all <- bind_rows(check1, check1_already)
# need to expand the 295 to 1934
all_portions <- dtb1_change %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(check1_all, by = c("Food_NSC",  "Por_eaten", "Unit"))
split_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
select(-Calories_kcal, -ratio) %>%
rename(Calories_kcal = scaled_cal) %>%
distinct()
# expand to have other columns
total_dtb1_change <- dtb1_change %>%
select(-Calories_kcal) %>%
inner_join(split_all_portions, by = c("Food_NSC",  "Por_eaten", "Unit")) %>%
select(mrn:fdrt, Calories_kcal) %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, Calories_kcal/Energy_kcal*100)) %>%
mutate(dehydrated_weight = if_else(total_weight == 99999, 0.0001, total_weight*(1 - Water_g/100))) %>%
select(colnames(dtb1))
#total_dtb1_change %>% write_csv('../data/140_changed_calories_in_batch1.csv')
# combine them together ...
dtb1_final <- bind_rows(dtb1_unchanged, total_dtb1_change, dtb1_EN)
View(split_all_portions)
213.5/14*4
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
225/14*4
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(total_dtb1_change)
View(all_portions)
split_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
View(dtb1_change)
dtb1_change
dtb1_change
dtb1_change
total_dtb1_change
total_dtb1_change
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb1)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check2 <- read_csv('../data/136_check_2_batch_cal_peter.csv')
View(check1)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
# now I know why the same Food_NSC doesn't have corrected values for a smaller portion
# it's cuz it doesn't meet the dehydrated_weight > 30 & Water_g > 75 threshold
# below is to make a correction using one item as example for the showing purpose to Jonas
# 2014, Juice,  Apple
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
View(vetted_by_peter)
all_portions <- dtb1 %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter, by = c("Food_NSC",  "Por_eaten", "Unit"))
View(all_portions)
all_portions <- dtb1 %>%
select(Food_NSC,  Por_eaten, Unit) %>%
inner_join(vetted_by_peter, by = c("Food_NSC",  "Por_eaten", "Unit"))
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple')
View(all_portions)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
inner_join(vetted_by_peter)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter)
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter)
all_portions
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
View(scale_all_portions)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
View(engy)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)','')))
engy
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
dtb1
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,Food_code,   Por_eaten, Unit) %>%
left_join(vetted_by_peter)
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
scale_all_portions
engy
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
engy
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, scaled_cal/Energy_kcal*100))
