y = 'Macronutrients',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
macronutrients_alpha_main %>%
write_rds('../data/090_macronutrients_alpha_main.rds')
# get the value of the actual 66% and 95% CI
post_coeff %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95)) %>%
distinct()
macronutrients_alpha_main
coeff_bi <- read_csv('../data/090_model_alpha_macro_fat_post.csv')   %>%
select(starts_with('b_')) %>%
select(!starts_with('b_ave')) %>%
gather('item', 'coeff')
View(coeff_bi)
# the binary vars
coeff_bi <- read_csv('../data/090_model_alpha_macro_fat_post.csv')   %>%
select(starts_with('b_')) %>%
select(!starts_with('b_ave')) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_intensitynonablative' ~ 'Intensity: nonablative',
item == 'b_intensityablative' ~ 'Intensity: ablative',
item ==  'b_intensityreduced' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure'))) %>%
mutate(grp = if_else(str_detect(item_name, 'Intensity'), 'Patient level', 'Sample level'))
macronutrients_alpha_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none',
axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1/2)
macronutrients_alpha_factor %>%
write_rds('../data/090_macronutrients_alpha_factor.rds')
coeff_bi %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95))
# find the perc of EN < 0
coeff_bi %>%
filter(item == 'b_ENTRUE') %>%
count(coeff < 0) %>%
mutate(perc = n / sum(n)*100)
# the binary vars
coeff_bi <- read_csv('../data/090_model_alpha_macro_fat_post.csv')   %>%
select(starts_with('b_')) %>%
select(!starts_with('b_ave')) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_intensitynonablative' ~ 'Intensity: nonablative',
item == 'b_intensityablative' ~ 'Intensity: ablative',
item ==  'b_intensityreduced' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure'))) %>%
mutate(grp = if_else(str_detect(item_name, 'Intensity'), 'Patient level', 'Sample level'))
macronutrients_alpha_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none',
axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1/2)
macronutrients_alpha_factor %>%
write_rds('../data/090_macronutrients_alpha_factor.rds')
coeff_bi %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95))
# find the perc of EN < 0
coeff_bi %>%
filter(item == 'b_ENTRUE') %>%
count(coeff < 0) %>%
mutate(perc = n / sum(n)*100)
# the binary vars
coeff_bi <- read_csv('../data/090_model_alpha_macro_fat_post.csv')   %>%
select(starts_with('b_')) %>%
select(!starts_with('b_ave')) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_intensitynonablative' ~ 'Intensity: nonablative',
item == 'b_intensityablative' ~ 'Intensity: ablative',
item ==  'b_intensityreduced' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure'))) %>%
mutate(grp = if_else(str_detect(item_name, 'Intensity'), 'Patient level', 'Sample level'))
macronutrients_alpha_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none',
axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1/2)
macronutrients_alpha_factor %>%
write_rds('../data/090_macronutrients_alpha_factor.rds')
coeff_bi %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95))
# find the perc of EN < 0
coeff_bi %>%
filter(item == 'b_ENTRUE') %>%
count(coeff < 0) %>%
mutate(perc = n / sum(n)*100)
macronutrients_alpha_factor
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
alpha_main <- read_rds('../data/090_macronutrients_alpha_main.rds')
alpha_factor <- read_rds('../data/090_macronutrients_alpha_factor.rds')
fat_pro_cor <- full %>%
ggscatter(x = 'ave_fat', y = 'ave_Protein', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average protein intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_pro_cor %>% write_rds('../data/090_fat_pro_cor.rds')
# the high correlation between fat and protein
fat_pro_cor <- full %>%
ggscatter(x = 'ave_fat', y = 'ave_Protein', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average protein intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_pro_cor %>% write_rds('../data/090_fat_pro_cor.rds')
# the correlation between fat and caloric intake
fat_cal_cor <- full %>%
ggscatter(x = 'ave_fat', y = 'ave_cal', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average caloric intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_cal_cor %>% write_rds('../data/090_fat_cal_cor.rds')
full %>%
ggscatter(x = 'ave_fat', y = 'ave_Sugars', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average sugar intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
corr <- read_rds('../data/090_fat_pro_cor.rds')
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
corr <- read_rds('../data/090_fat_pro_cor.rds')
alpha_main <- read_rds('../data/090_macronutrients_alpha_main.rds')
alpha_factor <- read_rds('../data/090_macronutrients_alpha_factor.rds')
alpha <-  plot_grid(corr, fat_cal_cor,  alpha_main,alpha_factor,
nrow = 2, labels = c('A','B', 'C', "D"),  align = 'hv', axis = 'tblr')
alpha
alpha
ggsave('../data/093_macronutrients_alpha_093.pdf',
width = 260,
height = 280,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../data/093_macronutrients_alpha_093.pdf',
width = 220,
height = 280,
plot = alpha,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../data/093_macronutrients_alpha_093.pdf',
width = 220,
height = 220,
plot = alpha,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
#dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb <- read_csv('../data/146_updated_dtb1.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
#filter(!sampleid %in% tb_rm$sampleid) %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
# the mean food group intake from our data
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
meta %>% distinct(mrn)
# what priors I can set
model_formular <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "intensityreduced"),
prior(normal(2, 0.1), class = 'b', coef = "intensityablative"),
prior(normal(2, 0.1), class = 'b', coef = "intensitynonablative"))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
prior_div <- prior_draws(model_div)
colnames(prior_div)
ave_each_fg_prior <- prior_div %>%
mutate(mean_fg_prior_div =
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_intensityreduced ) %>%
select(mean_fg_prior_div) %>%
mutate(grp = 'ave_each')  %>%
mutate(within_range = if_else(mean_fg_prior_div >= min(log(meta$simpson_reciprocal)) &  mean_fg_prior_div <= max(log(meta$simpson_reciprocal)), T, F))
prior_diversity <- ave_each_fg_prior %>%
gghistogram(x = 'mean_fg_prior_div', fill = 'within_range', color = 'white',
xlab = 'Predicted ln(diversity)\nwith prior distribution',
title = 'Diversity') +
geom_vline(xintercept = min(log(meta$simpson_reciprocal)), linetype = 'dashed') +
geom_vline(xintercept = max(log(meta$simpson_reciprocal)), linetype = 'dashed')  +
theme(legend.position = 'none')
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/(sum(n))*100)
prior_diversity %>%
write_rds('../data/068_prior_diversity_hist.rds'
)
prior_diversity
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/(sum(n))*100)
# make
post_all <-  read_csv('../data/068_div_model_fg_post.csv')
# extract posterior samples for the coeff
post_samples  <- read_csv('../data/068_div_model_fg_post.csv')
# extract posterior samples for the coeff
post_samples  <- read_csv('../data/068_div_model_fg_post.csv')
# make the forest plot of the post coeff
# like the one on the ash abstract
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key %>% select(fgrp1, color, shortname))  %>%
mutate(shortname = fct_reorder(shortname, coeff, .fun=median, .desc = F))
fg_labels <- levels(post_coeff$shortname)
cross0 <- post_coeff %>%
group_by(item) %>%
summarise(q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975)) %>%
mutate(Cross = if_else(q2.5 > 0 | q97.5 < 0, F, T))
# to find the quantiles of the post_coeff
post_coeff %>%
group_by(item) %>%
tidybayes::median_qi(coeff, .width = c( .66, .95))
post_coeff %>%
group_by(item) %>%
summarise(q50 = median(coeff))
post_coeff %>%
group_by(item) %>%
summarise(ave = mean(coeff))
post_coeff %>%
filter(item == 'fruit') %>%
count(coeff < 0) %>%
mutate(perc = n/sum(n)*100)
fg_colors <- post_coeff %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
deframe()
title1 <- bquote(Outcome: log[e]~(Simpsons~reciprocal))
div_post <- post_coeff %>%
left_join(cross0) %>%
ggplot(aes(x = coeff, y = shortname, col = Cross)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = c("#EC0000", "gray40")) +
theme(axis.text=element_text(size=8, color  = 'black'),
axis.title=element_text(size=8),
aspect.ratio=1)
div_post %>%
write_rds('../data/068_div_post.rds')
div_post
coeff_bi <- post_samples %>%
select(starts_with('b_')) %>%
select(!starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_intensitynonablative' ~ 'Intensity: nonablative',
item == 'b_intensityablative' ~ 'Intensity: ablative',
item ==  'b_intensityreduced' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure'))) %>%
mutate(grp = if_else(str_detect(item_name, 'Intensity'), 'Patient level', 'Sample level'))
# modify it to be the look that we have discussed
diversity_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1/2)
diversity_factor %>%
write_rds('../data/068_diversity_factor_forest.rds')
coeff_bi %>%
filter(item == 'b_ENTRUE') %>%
count(coeff < 0) %>%
mutate(perc = n / sum(n)*100)
coeff_bi %>%
filter(!str_detect(item, 'intensity')) %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp ~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1)
ggsave('../data/068_only_abx_diversity_bi.pdf', width = 3.5, height = 3)
diversity_factor
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
f2c <- read_rds('../data/068_div_post.rds')
f2c
div_fac <- read_rds('../data/068_diversity_factor_forest.rds')
div_fac
# to put the fg-div two plots together
div2 <- plot_grid(  f2c,div_fac,
nrow = 1, labels = c('A','B'), rel_widths = c(1, 1))
div2
ggsave('../data/086_div_fg_2_086.jpg',
width = 170, height = 60, units = c("mm"),
dpi = 400, device = 'jpg', plot = div2)
div2
div2
div2 <- plot_grid(  f2c,div_fac,
nrow = 1, labels = c('A','B'), rel_widths = c(1, 1))
ggsave('../data/086_div_fg_2_086.jpg',
width = 170, height = 60, units = c("mm"),
dpi = 400, device = 'jpg', plot = div2)
