guides(color = guide_legend(override.aes = list(size = 4),
title = 'HDI'))+
theme(axis.text=element_text(size=8),
legend.position = c(0.87, 0.3),
legend.key.size = unit(2, 'mm'),
legend.title = element_text( size=6),
legend.text=element_text(size=6),
axis.title=element_text(size=8),
legend.key = element_rect(fill = 'white', colour = NA),
aspect.ratio=1)
only3_sim
only3_sim %>%
write_rds('../data/068_only3_sim.rds')
View(only3)
View(maxs)
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave),
post_max_pred =  exp(max_),
post_ave_pred =  exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color, shortname)) %>%
mutate(shortname = fct_reorder(shortname, post_diff_original_scale, .fun=median, .desc = F))
# only plot the post diff forest in fruits and sweets
only3 <- post_diff_df %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie'))
only3
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred)
View(only3_two)
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred)
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5))
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5))
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black')
only3_two
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(~ grp)
only3_two
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(grp~ .)
only3_two
full <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
View(full)
faith <- read_tsv('../data/cleaned_diet_data/FINAL_97_faith_pd/alpha-diversity.tsv') %>%
separate(...1, into = c('mrn', 'fdrt'), sep = 'd', convert = T)  %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')))
View(faith)
# the previous two days average faith pd
# # the daily caloric intake :
all_daily_pt <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_daily = sum(Calories_kcal))
View(all_daily_pt)
stb_pair <- meta %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
View(stb_pair)
faith
stb_pair <- meta %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
mean_p2d_faith <-  function(mrn_, p1d_, p2d_){
df = faith %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_faith = sum(faith_pd)/2)
return(df)
}
mean_p2d_faith_df <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_faith(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
# the previous two days average faith pd
# the previous two days average for each stool sample
stb_pair <- meta %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
mean_p2d_faith <-  function(mrn_, p1d_, p2d_){
df = faith %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_faith = sum(faith_pd)/2)
return(df)
}
mean_p2d_faith_df <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_faith(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
View(mean_p2d_faith_df)
full
# the previous two days average faith pd
# the previous two days average for each stool sample
stb_pair <- meta %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
mean_p2d_faith <-  function(mrn_, p1d_, p2d_){
df = faith %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_faith = sum(faith_pd)/2)
return(df)
}
mean_p2d_faith_df <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_faith(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
combined <- mean_p2d_faith_df %>%
full_join(full )
View(combined)
combined
combined %>%
ggscatter( x = 'ave_faith', y = 'simpson_reciprocal')
combined %>%
ggscatter( x = 'simpson_reciprocal', y = 'ave_faith')
combined %>%
ggscatter( x = 'simpson_reciprocal', y = 'ave_faith') +
scale_y_log10()
combined %>%
ggscatter( x = 'simpson_reciprocal', y = 'ave_faith',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n")) +
scale_y_log10()
combined %>%
ggscatter( x = 'simpson_reciprocal', y = 'ave_faith', alpha = 0.2,
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n" )) +
scale_y_log10()
df <- combined %>%
select(starts_with('fg_'), ave_faith)
View(df)
df
df <- combined %>%
select(starts_with('fg_'), ave_faith) %>%
gather('grp', 'gram', fg_egg:fg_veggie)
df
df <- combined %>%
select(starts_with('fg_'), ave_faith) %>%
gather('grp', 'gram', fg_egg:fg_veggie) %>%
ggscatter( x = 'ave_faith', y = 'gram', facet.by = 'grp')
combined %>%
select(starts_with('fg_'), ave_faith) %>%
gather('grp', 'gram', fg_egg:fg_veggie) %>%
ggscatter( x = 'ave_faith', y = 'gram', facet.by = 'grp')
combined %>%
select(starts_with('fg_'), ave_faith) %>%
gather('grp', 'gram', fg_egg:fg_veggie) %>%
ggscatter( x = 'ave_faith', y = 'gram', facet.by = 'grp', alpha = 0.2,
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n" ))
combined %>%
select(starts_with('ave_'))
combined %>%
select(starts_with('ave_')) %>%
select(-ave_cal) %>%
gather('grp', 'gram', ave_fiber:ave_carb)
combined %>%
select(starts_with('ave_')) %>%
select(-ave_cal) %>%
gather('grp', 'gram', ave_fiber:ave_carb) %>%
ggscatter( x = 'ave_faith', y = 'gram', facet.by = 'grp', alpha = 0.2,
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n" ))
combined %>%
select(starts_with('fg_'),  simpson_reciprocal) %>%
gather('grp', 'gram', fg_egg:fg_veggie)
combined %>%
select(starts_with('fg_'),  simpson_reciprocal) %>%
gather('grp', 'gram', fg_egg:fg_veggie) %>%
ggscatter( x = 'simpson_reciprocal', y = 'gram', facet.by = 'grp', alpha = 0.2,
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n" ))
View(dtb)
# only plot the post diff forest in fruits and sweets
only3 <- post_diff_df %>%
filter(term %in% c('fg_sweets'))
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(grp~ .)
labs(x = expression(Change~`in`~alpha~diversity),
y = '',
title = 'Diversity prediction') +
theme_classic()
only3_two
meab(full$fg_sweets)
mean(full$fg_sweets)
# only plot the post diff forest in fruits and sweets
only3 <- post_diff_df %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie'))
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(grp~ .)
labs(x = expression(Change~`in`~alpha~diversity),
y = '',
title = 'Diversity prediction') +
theme_classic()
only3_two
View(only3)
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(shortname~ .)
only3_two
# the version that doesn't show the difference but show the max and the ave one
only3_two <- only3 %>%
gather('grp','predicted', post_max_pred:post_ave_pred) %>%
group_by(term, shortname, grp) %>%
median_qi(predicted, .width = c(.95, .8, .5)) %>%
ggplot(aes(y = shortname, x = predicted)) +
geom_interval(aes(xmin = .lower, xmax = .upper)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
facet_grid(grp~ .)
labs(x = expression(Change~`in`~alpha~diversity),
y = '',
title = 'Diversity prediction') +
theme_classic()
only3_two
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(ggpubr)
post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv')
post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
post_res_genera <- post_df %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = str_replace(item, 'B_','')) %>%
left_join(key %>% select(item = fg1_name, shortname))
col_key <- post_res_genera %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
# make the blautia and enterococcus to be in red font for easier see
genus_text_color <- ifelse(sort(target_genera, decreasing = F) %in% c('Blautia','Enterococcus'), 'red', 'black')
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% meta$sampleid)
library(tidyverse)
library(brms)
library(ggpubr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
axis_text_size <- 7
axis_title_size <- 7
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% meta$sampleid)
thre <- seq(0.0001, 0.002, 0.0001)
thre %>%
set_names(thre) %>%
map_dfr(function(num){
cts %>%
group_by(genus) %>%
count(relab > num) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
filter(genus != 'NA') %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
nrow
}) %>%
gather('thre', 'num')
target_genera <-  cts %>%
group_by(genus) %>%
count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
filter(genus != 'NA') %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(genus)
post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
post_res_genera <- post_df %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = str_replace(item, 'B_','')) %>%
left_join(key %>% select(item = fg1_name, shortname))
col_key <- post_res_genera %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
# make the blautia and enterococcus to be in red font for easier see
genus_text_color <- ifelse(sort(target_genera, decreasing = F) %in% c('Blautia','Enterococcus'), 'red', 'black')
genus_fg_main <- ggplot(post_res_genera, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = color,  x = genus, y =  shortname), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  shortname),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11, colour = genus_text_color),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
panel.background=element_rect(colour="black"),
legend.key = element_rect( colour = "gray50"))
genus_fg_main <- ggplot(post_res_genera, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = color,  x = genus, y =  shortname), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  shortname),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11, colour = genus_text_color),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
panel.background=element_rect(colour="black"),
legend.key = element_rect( colour = "gray50"))
genus_fg_main
ggsave('../figs/paper/087_heatmap_genus_36_foodgroup_ggplot.pdf', width = 12, height = 5)
# the factors for the genus-fg
post_bi_res <- post_df %>%
select(genus, starts_with('b_')) %>%
select(-starts_with('b_fg'), -b_Intercept) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item_name = case_when(
item ==  'b_inten_non' ~ 'Intensity: nonablative',
item == 'b_inten_ab' ~ 'Intensity: ablative',
item ==  'b_inten_re' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
))
genus_fg_factor <- ggplot(post_bi_res, aes(x = genus, y = item_name)) +
geom_tile(aes(fill = color,  x = genus, y =  item_name), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  item_name),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0','75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background = element_rect(colour="black"))
ggsave('../figs/paper/087_heatmap_factors_genus_fg_ggplot.pdf', width = 9, height = 4)
# stack the two heatmap together
library(cowplot)
heatmap <-  plot_grid(  genus_fg_main,genus_fg_factor,
nrow = 2, labels = c('A','B'), rel_heights  = c(1, 0.8), align = 'hv', axis = 'tblr')
ggsave( '../figs/paper/S9_heatmap_fg_genus_087_Jan25.pdf',
width = 250,
height = 220,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf', plot = heatmap)
# stack the two heatmap together
library(cowplot)
heatmap <-  plot_grid(  genus_fg_main,genus_fg_factor,
nrow = 2, labels = c('A','B'), rel_heights  = c(1, 0.8), align = 'hv', axis = 'tblr')
ggsave( '../figs/paper/S9_heatmap_fg_genus_087.pdf',
width = 250,
height = 220,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf', plot = heatmap)
