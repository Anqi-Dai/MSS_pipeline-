library(vdbR)
connect_database('~/dbConfig.txt')
tre <- read.newick('../data/cleaned_tree/output_food_tree_datatree.newick')
leaves <- tibble(
fcode = tre$tip.label
)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
matching <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccc')
food_code_sum <- dtb %>%
group_by(Food_code) %>%
summarise(fc_sum = sum(dehydrated_weight)) %>%
mutate(Food_code = as.character(Food_code))  %>%
filter(Food_code %in% leaves$fcode)
food_code_sum_ <- food_code_sum[order(leaves$fcode),]
all.equal(food_code_sum_$Food_code , leaves$fcode)  #I'm fine with 3 mismatches. they are very close anyway
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, Main.food.description)
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character()))
View(tree_df)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, Main.food.description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
# make the circular bar plot
bars <- food_code_sum_ %>%
mutate(log10gram = log10(fc_sum + 1)) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
left_join(matching, by = "fgrp1") %>%
mutate(fg1_name = factor(fg1_name, levels = c('fg_egg', 'fg_oils', 'fg_legume', 'fg_fruit', 'fg_sweets', 'fg_milk','fg_meat', 'fg_veggie', 'fg_grain' ))) %>%
arrange(fg1_name)
food_code_level <- bars %>% pull(Food_code)
bars_ <- bars %>%
mutate(Food_code = factor(Food_code, levels = food_code_level))
fill_val <- bars %>%
distinct(fg1_name, color) %>%
deframe()
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, Main.food.description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, description)
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, description)
# make the circular bar plot
bars <- food_code_sum_ %>%
mutate(log10gram = log10(fc_sum + 1)) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
left_join(matching, by = "fgrp1") %>%
mutate(fg1_name = factor(fg1_name, levels = c('fg_egg', 'fg_oils', 'fg_legume', 'fg_fruit', 'fg_sweets', 'fg_milk','fg_meat', 'fg_veggie', 'fg_grain' ))) %>%
arrange(fg1_name)
food_code_level <- bars %>% pull(Food_code)
bars_ <- bars %>%
mutate(Food_code = factor(Food_code, levels = food_code_level))
fill_val <- bars %>%
distinct(fg1_name, color) %>%
deframe()
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(description, key, ring_level, value)
ring %>%
write_tsv('../data/source/ring_annot.txt', col_names = F)
# add the annotation marker for the example daily meal for that patient
dm5 <-  read_csv('../data/cleaned_diet_data/example_pt_dm5_diet.csv') %>%
inner_join(tree_df %>% mutate(Food_code = as.numeric(FoodID))) %>%
mutate(log10wt = log10(dehydrated_weight))
clade_markder <- dm5 %>%
select(Main.food.description, clade_marker_color = color) %>%
mutate(clade_marker_shape = '.',
clade_marker_size = 100,
clade_marker_edge_color = 'white') %>%
gather('key','value', clade_marker_color:clade_marker_edge_color)
# add the annotation marker for the example daily meal for that patient
dm5 <-  read_csv('../data/cleaned_diet_data/example_pt_dm5_diet.csv') %>%
inner_join(tree_df %>% mutate(Food_code = as.numeric(FoodID))) %>%
mutate(log10wt = log10(dehydrated_weight))
clade_markder <- dm5 %>%
select(description, clade_marker_color = color) %>%
mutate(clade_marker_shape = '.',
clade_marker_size = 100,
clade_marker_edge_color = 'white') %>%
gather('key','value', clade_marker_color:clade_marker_edge_color)
clade_markder %>%
write_tsv('../data/source/clade_annot_marker.txt', col_names = F)
ring_itself <- tibble(
ring_level = c(1, 2),
ring_internal_separator_thickness = 0.1,
ring_external_separator_thickness = 0.1,
ring_label_font_size = 5,
ring_separator_color = 'black'
) %>%
gather('key', 'value', ring_internal_separator_thickness:ring_separator_color) %>%
select(key, ring_level, value) %>%
write_tsv('../data/source/ring_annot_marker.txt', col_names = F)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(Main.food.description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(Main.food.description, key, ring_level, value)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(Main.food.description, key, ring_level, value)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(description, key, ring_level, value)
ring2 %>% write_tsv('../data/source/ring2.txt', col_names = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_family_counts.csv') %>%
filter(sampleid %in% meta$sampleid) %>%
dplyr::select(sampleid, taxa_family, relab) %>%
mutate(taxa_family = str_extract(taxa_family, 'f__.+$')) %>%
mutate(taxa_family = str_replace(taxa_family, 'f__','')) %>%
filter(taxa_family != 'NA')
thre <- seq(0.0001, 0.003, 0.0001)
thre %>%
set_names(thre) %>%
map_dfr(function(num){
cts %>%
group_by(taxa_family) %>%
count(relab > num) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
nrow
}) %>%
gather('thre', 'num')
# choose 0.002
target_family <-  cts %>%
group_by(taxa_family) %>%
count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(taxa_family)
domcts <- cts %>%
filter(taxa_family %in% target_family) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab) %>%
spread(key = 'taxa_family', value = 'relablog')
All <- domcts %>%
full_join(meta, by = "sampleid")
# getting to know the distributionn of the family relab log
domcts_narrow <- cts %>%
filter(taxa_family %in% target_family) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab)
range(domcts_narrow$relablog) # 0 , -5.7
priors <- c(# for the food group variables
prior(normal(0, 1.2), class = 'b', coef = "fg_egg"),
prior(normal(0, 1.2), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1.2), class = 'b', coef = "fg_grain"),
prior(normal(0, 1.2), class = 'b', coef = "fg_legume"),
prior(normal(0, 1.2), class = 'b', coef = "fg_meat"),
prior(normal(0, 1.2), class = 'b', coef = "fg_milk"),
prior(normal(0, 1.2), class = 'b', coef = "fg_oils"),
prior(normal(0, 1.2), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1.2), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(-3, 1), class = 'Intercept'))
model_formular <- Bacteroidaceae ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
# wannt to do the above for every family I'm going to run
# so basically run every model and extract the priors later
## all family model run
ret <- target_family %>%
set_names(target_family) %>%
purrr::map(function(fam) {
mod =  brm( as.formula(str_glue('{fam}  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = All,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
sessionInfo()
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
sessionInfo()
knitr::opts_chunk$set(echo = TRUE)
library(brms)
library(brms)
sessionInfo()
library(tidyverse)
library(brms)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_family_counts.csv') %>%
filter(sampleid %in% meta$sampleid) %>%
dplyr::select(sampleid, taxa_family, relab) %>%
mutate(taxa_family = str_extract(taxa_family, 'f__.+$')) %>%
mutate(taxa_family = str_replace(taxa_family, 'f__','')) %>%
filter(taxa_family != 'NA')
thre <- seq(0.0001, 0.003, 0.0001)
thre %>%
set_names(thre) %>%
map_dfr(function(num){
cts %>%
group_by(taxa_family) %>%
count(relab > num) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
nrow
}) %>%
gather('thre', 'num')
# choose 0.002
target_family <-  cts %>%
group_by(taxa_family) %>%
count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(taxa_family)
thre <- seq(0.0001, 0.003, 0.0001)
thre %>%
set_names(thre) %>%
map_dfr(function(num){
cts %>%
group_by(taxa_family) %>%
count(relab > num) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
nrow
}) %>%
gather('thre', 'num')
# choose 0.002
target_family <-  cts %>%
group_by(taxa_family) %>%
count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(taxa_family)
domcts <- cts %>%
filter(taxa_family %in% target_family) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab) %>%
spread(key = 'taxa_family', value = 'relablog')
All <- domcts %>%
full_join(meta, by = "sampleid")
# getting to know the distributionn of the family relab log
domcts_narrow <- cts %>%
filter(taxa_family %in% target_family) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab)
range(domcts_narrow$relablog) # 0 , -5.7
priors <- c(# for the food group variables
prior(normal(0, 1.2), class = 'b', coef = "fg_egg"),
prior(normal(0, 1.2), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1.2), class = 'b', coef = "fg_grain"),
prior(normal(0, 1.2), class = 'b', coef = "fg_legume"),
prior(normal(0, 1.2), class = 'b', coef = "fg_meat"),
prior(normal(0, 1.2), class = 'b', coef = "fg_milk"),
prior(normal(0, 1.2), class = 'b', coef = "fg_oils"),
prior(normal(0, 1.2), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1.2), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(-3, 1), class = 'Intercept'))
model_formular <- Bacteroidaceae ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
# wannt to do the above for every family I'm going to run
# so basically run every model and extract the priors later
## all family model run
ret <- target_family %>%
set_names(target_family) %>%
purrr::map(function(fam) {
mod =  brm( as.formula(str_glue('{fam}  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = All,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
# wannt to do the above for every family I'm going to run
# so basically run every model and extract the priors later
## all family model run
ret <- target_family %>%
set_names(target_family) %>%
purrr::map(function(fam) {
mod =  brm( as.formula(str_glue('{fam}  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = All,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
connect_database('~/dbConfig.txt')
sessionInfo()
install_version("ggplot2", version = "0.6", repos = "http://cran.us.r-project.org")
require(devtools)
install_version("ggplot2", version = "0.6", repos = "http://cran.us.r-project.org")
install_version("DBI", version = "0.6", repos = "http://cran.us.r-project.org")
session_info()
knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
connect_database('~/dbConfig.txt')
require(devtools)
session_info()
