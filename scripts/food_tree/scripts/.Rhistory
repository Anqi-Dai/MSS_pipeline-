scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
top <- plot_grid(tree, fig1_umap, NA,
#labels = c('B', "C", "D"),
nrow = 1, rel_widths = c(1.5,1, 1), axis = 'lbrt', align = 'hv')
# import the tree from pdf to a ggplot kind of object
p <- '../figs/paper/080_food_tree_ring.png'
tree <- ggdraw() +
draw_image(p,   scale = 1.3)
stool_two <- plot_grid(stool_alpha,stool_alpha,
nrow = 2,axis = 'lbrt', align = 'hv')
bot <- plot_grid(food2, m_panel, fg_panel,  stool_two,
nrow = 1,
align = 'hv',
rel_widths =  c(1,1.2,1.4,1),
#rel_heights = c(1,1),
labels = c('E','F', 'G', "H"),
axis = 'tblr')
# the macronutrients scatter plot
m_all <- dtb %>%
select(mrn, fdrt,Protein_g:Sodium_g ) %>%
gather('grp','gram', Protein_g:Sodium_g) %>%
mutate(grp = str_replace(grp, '_g$','')) %>%
group_by(mrn, fdrt, grp) %>%
summarise(eachsum = sum(gram))
m_panel <- m_all %>%
ggscatter(x = 'fdrt', y = 'eachsum', alpha = 0.005, size = point_size,
xlab = 'Day relative to HCT',
ylab = 'Grams',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1))  +
facet_wrap(~ grp, nrow = 3, scales = 'free_y') +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme(axis.text=element_text(size=6),
strip.background = element_blank(),
strip.text.x = element_text(size = stip_txt_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1)
m_panel
fg_all <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
mutate(fgrp1 = as.numeric(fgrp1)) %>%
group_by(mrn, fdrt, fgrp1) %>%
summarise(eachsum = sum(dehydrated_weight)) %>%
left_join(key)
fg_panel <- fg_all %>%
ggscatter(x = 'fdrt', y = 'eachsum', alpha = 0.005, size = point_size,
xlab = 'Day relative to HCT',
ylab = 'Grams',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1))  +
facet_wrap(~ shortname,
scales = 'free_y',
nrow = 3, ) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme(axis.text=element_text(size=6),
strip.background = element_blank(),
strip.text.x = element_text(size = stip_txt_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1)
fg_panel
stool_two <- plot_grid(stool_alpha,stool_alpha,
nrow = 2,axis = 'lbrt', align = 'hv')
bot <- plot_grid(food2, m_panel, fg_panel,  stool_two,
nrow = 1,
align = 'hv',
rel_widths =  c(1,1.2,1.4,1),
#rel_heights = c(1,1),
labels = c('E','F', 'G', "H"),
axis = 'tblr')
top <- plot_grid(tree, fig1_umap, NA,
#labels = c('B', "C", "D"),
nrow = 1, rel_widths = c(1.5,1, 1), axis = 'lbrt', align = 'hv')
# assemble all
f1 <-  plot_grid(top, bot,
rel_heights = c(1,1),
nrow = 2)
ggsave('../figs/paper/F1_overview_072_raw.pdf',
width = 220,
height = 140,
#height = 60,
units = c("mm"),
dpi = 400, plot = f1)
dcoords <- read_csv('../data/016_umap_embedding_for_angel.csv')
link <- read_csv('../data/cleaned_diet_data/deidentify_dsample_map.csv')
coord <- dcoords %>%
inner_join(link) %>%
select(-fid, -pt)
fcts_fg <- read_csv('../data/cleaned_diet_data/summarize_food_groups_pt_daily.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv')
fcts_fg_dom <- fcts_fg %>%
group_by(mrn, fdrt) %>%
arrange(-grp_frac, .by_group = T) %>%
slice(1) %>%
ungroup() %>%
transmute(fid = str_glue('P{mrn}d{fdrt}'),
fg1_dom = fg1_name) %>%
inner_join(link %>% select(fid, index_column))
df <- coord %>%
inner_join(fcts_fg_dom) %>%
left_join(fpalette %>% select(fg1_dom = fg1_name, color)) %>%
add_count(fg1_dom) %>%
rename(fg1_name = fg1_dom) %>%
left_join(key )
color_key <- df %>%
ungroup() %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
#mutate(shortname = factor(shortname)) %>%
#arrange(shortname) %>%
deframe()
fig1_umap <- df %>%
arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 0.8,size = 1.5 , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
stool_two <- plot_grid(stool_alpha,stool_alpha,
nrow = 2,axis = 'lbrt', align = 'hv')
bot <- plot_grid(food2, m_panel, fg_panel,  stool_two,
nrow = 1,
align = 'hv',
rel_widths =  c(1,1.2,1.4,1),
#rel_heights = c(1,1),
labels = c('E','F', 'G', "H"),
axis = 'tblr')
top <- plot_grid(tree, fig1_umap, NA,
#labels = c('B', "C", "D"),
nrow = 1, rel_widths = c(1.5,1, 1), axis = 'lbrt', align = 'hv')
# assemble all
f1 <-  plot_grid(top, bot,
rel_heights = c(1,1),
nrow = 2)
ggsave('../figs/paper/F1_overview_072_raw.pdf',
width = 220,
height = 140,
#height = 60,
units = c("mm"),
dpi = 400, plot = f1)
display.brewer.all()
display.brewer()
RColorBrewer::display.brewer.pal('Spectral')
display.brewer.pal(9, "Spectral")
pdf(file = "../figs/paper/F1_spectral_legend.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 1)
display.brewer.pal(9, "Spectral")
pdf(file = "../figs/paper/F1_spectral_legend.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4)
display.brewer.pal(9, "Spectral")
dev.off()
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
dtb %>%
distinct(mrn) %>%
write_csv('../data/nutrition_patients_97_mrns.csv', col_names = T)
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
colnames(meta)
glimpse(meta)
meta %>%
select(-mrn) %>%
summary
meta %>%
select(-mrn) %>%
mutate(inten_non = factor(inten_non),
inten_ab = factor(inten_ab),
inten_re = factor(inten_re)) %>%
summary
meta %>%
select(-mrn, -disease.simple, -admit_wt, -ci) %>%
mutate(inten_non = factor(inten_non),
inten_ab = factor(inten_ab),
inten_re = factor(inten_re)) %>%
summary
model_formular
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
model_formular
model_formular
model_formular
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(2, 0.1), class = 'Intercept'))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div)) %>%
select(-starts_with('r_'))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
model_div
model_div
prior_div <- prior_draws(model_div)
ave_each_fg_prior <- prior_div %>%
mutate(mean_fg_prior_div = Intercept +
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_inten_re ) %>%
select(mean_fg_prior_div) %>%
mutate(grp = 'ave_each')  %>%
mutate(within_range = if_else(mean_fg_prior_div >= min(log(meta$simpson_reciprocal)) &  mean_fg_prior_div <= max(log(meta$simpson_reciprocal)), T, F))
# the mean food group intake from our data
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
prior_div <- prior_draws(model_div)
ave_each_fg_prior <- prior_div %>%
mutate(mean_fg_prior_div = Intercept +
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_inten_re ) %>%
select(mean_fg_prior_div) %>%
mutate(grp = 'ave_each')  %>%
mutate(within_range = if_else(mean_fg_prior_div >= min(log(meta$simpson_reciprocal)) &  mean_fg_prior_div <= max(log(meta$simpson_reciprocal)), T, F))
prior_diversity <- ave_each_fg_prior %>%
gghistogram(x = 'mean_fg_prior_div', fill = 'within_range', color = 'white',
xlab = 'Predicted ln(diversity)\nwith prior distribution',
title = 'Diversity') +
geom_vline(xintercept = min(log(meta$simpson_reciprocal)), linetype = 'dashed') +
geom_vline(xintercept = max(log(meta$simpson_reciprocal)), linetype = 'dashed')  +
theme(legend.position = 'none')
prior_diversity %>%
write_rds('../data/068_prior_diversity_hist.rds'
)
View(ave_each_fg_prior)
ave_each_fg_prior %>%
count(within_range)
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/(sum(n)*100))
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/(sum(n))*100)
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/(sum(n))*100)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(ggpubr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
axis_text_size <- 7
axis_title_size <- 7
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% meta$sampleid)
thre <- seq(0.0001, 0.002, 0.0001)
thre %>%
set_names(thre) %>%
map_dfr(function(num){
cts %>%
group_by(genus) %>%
count(relab > num) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
filter(genus != 'NA') %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
nrow
}) %>%
gather('thre', 'num')
target_genera <-  cts %>%
group_by(genus) %>%
count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
filter(genus != 'NA') %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(genus)
gcts <- read_csv('../data/088_genus_relab_log10_wide.csv') %>%
select(sampleid, all_of(target_genera))
full <- meta %>%
full_join(gcts)
priors <- c(# for the food group variables
prior(normal(0, 1.2), class = 'b', coef = "fg_egg"),
prior(normal(0, 1.2), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1.2), class = 'b', coef = "fg_grain"),
prior(normal(0, 1.2), class = 'b', coef = "fg_legume"),
prior(normal(0, 1.2), class = 'b', coef = "fg_meat"),
prior(normal(0, 1.2), class = 'b', coef = "fg_milk"),
prior(normal(0, 1.2), class = 'b', coef = "fg_oils"),
prior(normal(0, 1.2), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1.2), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(-3, 1), class = 'Intercept'))
ret_genus <- target_genera %>%
set_names(target_genera) %>%
purrr::map(function(genus) {
mod =  brm( as.formula(str_glue('{genus}  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = full,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
entero_genus <- brm( Enterococcus  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin),
data = full,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
post_enterco <- suppressWarnings(posterior_samples(entero_genus)) %>%
select(-starts_with('r_'))
post_enterco %>%  write_csv('../data/087_Enterococcus_model_fg_post.csv')
entero_genus
prior_entero <- prior_draws(entero_genus)
ave_each_fg_prior <- prior_entero %>%
mutate(mean_fg_prior_entero = Intercept +
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_inten_re ) %>%
select(mean_fg_prior_entero) %>%
mutate(grp = 'ave_each')  %>%
mutate(within_range = if_else(mean_fg_prior_entero >= min(full$Enterococcus) &  mean_fg_prior_entero <= max(full$Enterococcus), T, F))
prior_enterococcus <- ave_each_fg_prior %>%
gghistogram(x = 'mean_fg_prior_entero', fill = 'within_range', color = 'white',
xlab = 'Predicted log10(Enterococcus)\nwith prior distribution',
title = 'Enterococcus') +
geom_vline(xintercept = min(full$Enterococcus), linetype = 'dashed') +
geom_vline(xintercept = max(full$Enterococcus), linetype = 'dashed')  +
theme(legend.position = 'none')
prior_enterococcus %>%
write_rds('../data/087_prior_enterococcus_hist.rds'
)
ave_each_fg_prior %>%
count(within_range)
ave_each_fg_prior %>%
count(within_range) %>%
mutate(perc = n/sum(n)*100)
