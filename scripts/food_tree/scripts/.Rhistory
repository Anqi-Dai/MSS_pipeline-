left_join(cross0) %>%
ggplot(aes(x = coeff, y = shortname, col = Cross)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = c("#EC0000", "gray40")) +
theme(axis.text=element_text(size=8, color  = 'black'),
axis.title=element_text(size=8),
aspect.ratio=1)
div_post %>%
write_rds('../data/068_div_post.rds')
div_post
coeff_bi <- post_samples %>%
select(starts_with('b_')) %>%
select(!starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_intensitynonablative' ~ 'Intensity: nonablative',
item == 'b_intensityablative' ~ 'Intensity: ablative',
item ==  'b_intensityreduced' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure'))) %>%
mutate(grp = if_else(str_detect(item_name, 'Intensity'), 'Patient level', 'Sample level'))
# modify it to be the look that we have discussed
diversity_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1/2)
diversity_factor %>%
write_rds('../data/068_diversity_factor_forest.rds')
coeff_bi %>%
filter(item == 'b_ENTRUE') %>%
count(coeff < 0) %>%
mutate(perc = n / sum(n)*100)
coeff_bi %>%
filter(!str_detect(item, 'intensity')) %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp ~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1)
ggsave('../data/068_only_abx_diversity_bi.pdf', width = 3.5, height = 3)
diversity_factor
coeff_bi %>%
filter(!str_detect(item, 'intensity')) %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
facet_wrap(grp ~ . , scales = 'free', dir = 'v') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank(),
aspect.ratio=1)
View(dtb)
View(dtb)
View(en)
View(dtb1)
View(dtb)
View(en_df)
View(dtb)
View(en_df)
View(dtb1)
View(dtb)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv') %>%
mutate(Food_NSC = if_else(Food_NSC == '2017 BRATT II - Smoothie, Banana Nut', '2017 BRATT II, Smoothie, Banana Nut', Food_NSC))
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv') %>%
mutate(Food_NSC = if_else(Food_NSC == '2017 BRATT II - Smoothie, Banana Nut', '2017 BRATT II, Smoothie, Banana Nut', Food_NSC))
unit %>% write_csv('../data/144_non_EN_unit_diet_metrics.csv')
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv')
# the dtb2
dtb2 <- read_rds('../data/136_updated_dtb2.rds')
View(dtb2)
dtb2
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit)
View(combo2)
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit)
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit)
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit)
View(combo2)
View(unit)
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit) %>%
left_join(unit)
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit) %>%
left_join(unit, by = c("Food_NSC", "Unit"))
View(combo2)
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit) %>%
left_join(unit, by = c("Food_NSC", "Unit")) %>%
arrange(Food_code,Food_NSC )
View(combo2)
462/1087
462/1087
View(dtb2)
dtb2 %>%
distinct(Food_NSC, Unit)
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit, Food_code, description) %>%
left_join(unit)
dtb2
# the dtb2
dtb2 <- read_rds('../data/136_updated_dtb2.rds') %>% mutate(Food_code = as.numeric(Food_code))
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit, Food_code, description) %>%
left_join(unit)
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit, Food_code, description) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description"))
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit, Food_code, description) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description")) %>%
arrange(Food_code,Food_NSC )
View(combo2)
combo2
# the unique combination of food_nsc and unit in batch 2
combo2 <- dtb2 %>%
distinct(Food_NSC, Unit, Food_code, description) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description")) %>%
arrange(Food_code,Food_NSC ) %>%
select(Food_NSC:gram_psu)
combo2 %>% write_csv('../data/147_batch2_unit_food_nsc_to_be_vet.csv', na = '')
# I need to redo the EN ones with updated calculations
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv')
View(en)
en
# I need to redo the EN ones with updated calculations
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn)
View(en)
en
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`))
en
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`)) %>%
left_join(ptb %>% select(mrn, hct), by = 'mrn') %>%
mutate(fdrt = Date - hct)
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`)) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct)
en_part <- dtb1 %>%
filter(Unit == 'EN unit') %>%
select(-Sodium_g) %>%
mutate(total_weight = NA) %>%
mutate(dehydrated_weight = Protein_g + Fat_g + Carbohydrates_g + Fibers_g + Sugars_g) %>%
select(colnames(dtb1_scale))
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
en_part <- dtb1 %>%
filter(Unit == 'EN unit') %>%
select(-Sodium_g) %>%
mutate(total_weight = NA) %>%
mutate(dehydrated_weight = Protein_g + Fat_g + Carbohydrates_g + Fibers_g + Sugars_g) %>%
select(colnames(dtb1_scale))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# there are some cleaning to do, possibly char change during manual work at the spreadsheet
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv') %>%
mutate(Food_NSC = if_else(Food_NSC == '2017 BRATT II - Smoothie, Banana Nut', '2017 BRATT II, Smoothie, Banana Nut', Food_NSC))
unit %>% write_csv('../data/144_non_EN_unit_diet_metrics.csv')
# find about the portions and dates of the intake among the patients
dtb1_p <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten) %>%
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit))
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
select(new_nsc =  Food_NSC) %>%
separate(new_nsc, into = c('Food_NSC','parts'), remove = F, sep = '--') %>%
select(-parts)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match) %>%
mutate(Food_NSC = new_nsc) %>%
select(-new_nsc) %>%
# change the unit for milk to be cup
mutate(Unit = if_else(str_detect(Food_NSC, 'Milk') & Unit == 'each', 'cup', Unit))
dtb1_p2 <- bind_rows(
dtb1_p %>% filter(!str_detect(Food_NSC, 'Scandi')),
dtb1_p_scandi
)
# join the unit table and scale it to all the different portions
dtb1_scale <- dtb1_p2 %>%
left_join(unit, by = c("Food_NSC", "Unit")) %>%
# and then scale the correct portion's values
mutate(Calories_kcal = Por_eaten * cal_psu,
total_weight = Por_eaten * gram_psu,
Protein_g = Por_eaten * Protein_psu,
Fat_g = Por_eaten * Fat_psu,
Carbohydrates_g = Por_eaten * Carbohydrate_psu,
Fibers_g = Por_eaten * Fiber_psu,
Sugars_g = Por_eaten * Sugars_psu,
dehydrated_weight = Por_eaten * dehydrated_psu) %>%
select(-ends_with('psu'))
# then I need to add the EN ones and then I'm done!!!!!
# right now they are still the EN unit and I'm not recording the ml but maybe I should
en_part <- dtb1 %>%
filter(Unit == 'EN unit') %>%
select(-Sodium_g) %>%
mutate(total_weight = NA) %>%
mutate(dehydrated_weight = Protein_g + Fat_g + Carbohydrates_g + Fibers_g + Sugars_g) %>%
select(colnames(dtb1_scale))
View(en_part)
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`)) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt))
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`)) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49)
View(en)
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
View(en)
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn)
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`)) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49)
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
mutate(Date = mdy(`Date Nutrition Support`))
View(en)
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
en
en <- readxl::read_xlsx('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
en <- readxl::read_xls('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
mutate(Date = as.Date(Date Nutrition Support`, origin = "1899-12-30"))
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
mutate(Date = as.Date(`Date Nutrition Support`, origin = "1899-12-30"))
as.Date(42880, origin = "1899-12-30")
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx')
en
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`)
en
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date))
en
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30"))
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49)
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49)
View(en)
knitr::opts_chunk$set(echo = TRUE)
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
library(tidyverse)
# here is the calculation for the EN things
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49)
View(en)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb1)
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49) %>%
rename_all(funs(str_replace_all(., ' ','_')))
en
# the below table has the updated calculations
en <- readxl::read_excel('../data/cleaned_diet_data/NutritionSupport_DietPatients.xlsx') %>%
rename(Date = `Date Nutrition Support`) %>%
mutate(Date = as.numeric(Date)) %>%
mutate(Date = as.Date(Date, origin = "1899-12-30")) %>%
filter(`Nutrition Support` == 'EN' & MRN %in% ptb$mrn) %>%
left_join(ptb %>% select(MRN = mrn, hct), by = 'MRN') %>%
mutate(fdrt = Date - hct) %>%
mutate(fdrt = as.numeric(fdrt)) %>%
filter(fdrt %in%  5:49) %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
mutate(EN_volume_weight_g = as.numeric(EN_volume_weight_g))
en_part <- dtb1 %>%
filter(Unit == 'EN unit') %>%
select(-Sodium_g) %>%
mutate(total_weight = NA) %>%
select(colnames(dtb1_scale))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# there are some cleaning to do, possibly char change during manual work at the spreadsheet
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv') %>%
mutate(Food_NSC = if_else(Food_NSC == '2017 BRATT II - Smoothie, Banana Nut', '2017 BRATT II, Smoothie, Banana Nut', Food_NSC))
unit %>% write_csv('../data/144_non_EN_unit_diet_metrics.csv')
# find about the portions and dates of the intake among the patients
dtb1_p <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten) %>%
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit))
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
select(new_nsc =  Food_NSC) %>%
separate(new_nsc, into = c('Food_NSC','parts'), remove = F, sep = '--') %>%
select(-parts)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match) %>%
mutate(Food_NSC = new_nsc) %>%
select(-new_nsc) %>%
# change the unit for milk to be cup
mutate(Unit = if_else(str_detect(Food_NSC, 'Milk') & Unit == 'each', 'cup', Unit))
dtb1_p2 <- bind_rows(
dtb1_p %>% filter(!str_detect(Food_NSC, 'Scandi')),
dtb1_p_scandi
)
# join the unit table and scale it to all the different portions
dtb1_scale <- dtb1_p2 %>%
left_join(unit, by = c("Food_NSC", "Unit")) %>%
# and then scale the correct portion's values
mutate(Calories_kcal = Por_eaten * cal_psu,
total_weight = Por_eaten * gram_psu,
Protein_g = Por_eaten * Protein_psu,
Fat_g = Por_eaten * Fat_psu,
Carbohydrates_g = Por_eaten * Carbohydrate_psu,
Fibers_g = Por_eaten * Fiber_psu,
Sugars_g = Por_eaten * Sugars_psu,
dehydrated_weight = Por_eaten * dehydrated_psu) %>%
select(-ends_with('psu'))
en_part <- dtb1 %>%
filter(Unit == 'EN unit') %>%
select(-Sodium_g) %>%
mutate(total_weight = NA) %>%
select(colnames(dtb1_scale))
dtb1_N <- bind_rows(dtb1_scale , en_part)
dtb1_N %>% write_csv('../data/146_updated_dtb1.csv')
View(dtb1_N)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb <- read_csv('../data/146_updated_dtb1.csv')
#dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb <- read_csv('../data/146_updated_dtb1.csv')
nodes <- read_tsv('../data/source/NodeLabels.txt', col_types = 'cc') %>%
filter(nchar(Level.code) == 1) %>%
rename(fgrp1 = Level.code,
fdesc = Main.food.description)
fgrps_df <- dtb %>%
select(mrn, fdrt, dehydrated_weight, Food_code) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1))
# the total dehydated weight for a patient for one day for a single food group
total_per_group <- fgrps_df %>%
group_by(mrn, fdrt, fgrp1) %>%
summarise(grp_tol = sum(dehydrated_weight)) %>%
mutate(fg1_name = case_when(
fgrp1 == '1' ~ 'fg_milk',
fgrp1 == '2' ~ 'fg_meat',
fgrp1 == '3' ~ 'fg_egg',
fgrp1 == '4' ~ 'fg_legume',
fgrp1 == '5' ~ 'fg_grain',
fgrp1 == '6' ~ 'fg_fruit',
fgrp1 == '7' ~ 'fg_veggie',
fgrp1 == '8' ~ 'fg_oils',
fgrp1 == '9' ~ 'fg_sweets'
))
drug <- read_rds('../data/134_743stool_samples_p2d_drug_exposure.rds')
stb <- read_csv('../data/cleaned_stool/selected_stool_samples_type_abx.csv') %>%
mutate(empirical = if_else(sampleid %in% drug$sampleid, T, F))
stb_pair <- stb %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
mean_p2d_diet <-  function(mrn_, p1d_, p2d_){
df = total_per_group %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(fg1_name) %>%
summarise(ave_fg = sum(grp_tol)/2)
return(df)
}
mean_p2d_df <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_diet(mrn, p1d, p2d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'fg1_name', value = 'ave_fg', fill = 0) %>%
inner_join(stb, by = "sampleid") %>%
select(-age, -sex, -source)
# if a patient had EN in the previous two days before a stool sample collected,
# it will be marked TRUE or otherwise FALSE
en <- read_csv('../data/!question/NutritionSupport_DietPatients_peter.csv') %>%
filter(`Nutrition Support` == 'EN')
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
en_df <- en %>%
select(mrn = MRN,
date_support = `Date Nutrition Support`) %>%
left_join(ptb %>% select(mrn, hct), by = 'mrn') %>%
mutate(date_support = lubridate::mdy(date_support)) %>%
mutate(endrt = date_support - hct) %>%
mutate(endrt = as.numeric(endrt))
p2d_EN_T_or_F <- function(mrn_, p1d_, p2d_){
num = en_df %>%
filter(mrn == mrn_) %>%
filter(endrt %in% c(p1d_, p2d_  )) %>%
nrow
if(num > 0) { return(T)}
else {return(F)}
}
p2d_EN_T_or_F_df <-  pmap(stb_pair, function(mrn, p1d, p2d){
p2d_EN_T_or_F(mrn, p1d, p2d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
gather(key = 'sampleid', value = 'EN')
