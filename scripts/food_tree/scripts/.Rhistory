scale_all_combos
scale_all_combos
scale_all_combos
totalvet %>%
filter(Food_NSC == 'Specials, Angel Hair Pasta (2)') %>%
slice(1) %>%
mutate(ratio = 1,scaled_cal = 165, scaled_total_g = 105) %>%
select(colnames(scale_all_combos))
# need some manual correction of Specials, Angel Hair Pasta (2) since the data was entered wrong into computrition
part1 <- scale_all_combos %>%
filter(Unit != 'EN unit') %>%
filter(Food_NSC != 'Specials, Angel Hair Pasta (2)') %>%
add_row(totalvet %>%
filter(Food_NSC == 'Specials, Angel Hair Pasta (2)') %>%
slice(1) %>%
mutate(ratio = 1,scaled_cal = 165, scaled_total_g = 105) %>%
select(colnames(scale_all_combos)))
View(part1)
View(dtb1)
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit')
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Por_eaten, Food_code:fdrt)
View(dtb_)
part1
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code", "description"))
View(part1)
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Por_eaten, Food_code:fdrt)
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
View(dtb_)
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit')
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
View(dtb_)
scale_all_combos
View(totalvet)
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit))
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit)) %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
View(dtb_)
View(dtb1)
knitr::opts_chunk$set(echo = TRUE)
nutrients <- read_csv('~/Downloads/FoodData_Central_survey_food_csv_2022-10-28 2/food_nutrient.csv')
portions <- read_csv('~/Downloads/FoodData_Central_survey_food_csv_2022-10-28 2/food_portion.csv')
# the below table has the matching of fdc_id and food_code and wweia_code
matching <- read_csv('~/Downloads/FoodData_Central_survey_food_csv_2022-10-28 2/survey_fndds_food.csv')
View(portions)
View(matching)
View(nutrients)
fndds_json <- fromJSON(file = "~/Downloads/FoodData_Central_survey_food_json_2022-10-28 2.json")
library(rjson)
fndds_json <- fromJSON(file = "~/Downloads/FoodData_Central_survey_food_json_2022-10-28 2.json")
View(fndds_json)
View(vet)
View(totalvet)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# the below data has the vetted calories and the total weight in grams
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx') %>%
rename(total_g = weight_grams)
# first make sure all of the my entries in cal is not NA
nacor <- read_csv('../data/144_check_NA_ones_peter.csv') %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code") %>%
select(colnames(vet))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# the current dtb1
# the final expanded table should be the same number 22840
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# the below data has the vetted calories and the total weight in grams
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx') %>%
rename(total_g = weight_grams)
# first make sure all of the my entries in cal is not NA
nacor <- read_csv('../data/144_check_NA_ones_peter.csv') %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code") %>%
select(colnames(vet))
# the below are the total vetted ones that are not EN
totalvet <- bind_rows(vet, nacor)
# the table that has the water gram weight for 100 gram total weight of a food code
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Water_g) %>%
mutate(Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
left_join(totalvet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g), by = c("Food_NSC", "Unit", "Por_eaten"))
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
# need some manual correction of Specials, Angel Hair Pasta (2) since the data was entered wrong into computrition
part1 <- scale_all_combos %>%
filter(Unit != 'EN unit') %>%
filter(Food_NSC != 'Specials, Angel Hair Pasta (2)') %>%
add_row(totalvet %>%
filter(Food_NSC == 'Specials, Angel Hair Pasta (2)') %>%
slice(1) %>%
mutate(ratio = 1,scaled_cal = 165, scaled_total_g = 105) %>%
select(colnames(scale_all_combos)))
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit)) %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
View(dtb_)
View(dtb_)
dtb_
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit)) %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code")) %>%
rename(Calories_kcal = scaled_cal)
dtb_
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit)) %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code")) %>%
select(mrn:fdrt, Calories_kcal = scaled_cal, total_g = scaled_total_g)
calcor <- read_csv('../data/144_check_cal_500_ones_peter.csv')
calcor <- read_csv('../data/144_check_cal_500_ones_peter.csv')
View(calcor)
View(dtb_)
View(calcor)
# find the food_nsc in these and scale to other portions
needcal_food <- calcor %>%
distinct(Food_NSC)
# find the food_nsc in these and scale to other portions
needcal_food <- calcor %>%
distinct(Food_NSC) %>% pull(Food_NSC)
needcal_food
needcal_food <- calcor %>%
distinct(Food_NSC) %>% pull(Food_NSC)
# find all of the combo of Portion + Unit for these food_nsc
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
filter(Food_NSC %in% needcal_food)
View(allcombo)
needcal_food
# find all of the combo of Portion + Unit for these food_nsc
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food)
View(calcombo)
calcor
# find all of the combo of Portion + Unit for these food_nsc
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food) %>%
left_join(calcor %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g), by = c("Food_NSC", "Unit", "Por_eaten"))
calcor
# find all of the combo of Portion + Unit for these food_nsc
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food) %>%
left_join(calcor %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal = scaled_cal, total_g = scaled_total_g), by = c("Food_NSC", "Unit", "Por_eaten"))
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food)
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food)
# find all of the combo of Portion + Unit for these food_nsc
calcombo <- dtb_ %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
ungroup() %>%
filter(Food_NSC %in% needcal_food) %>%
left_join(calcor %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal = scaled_cal, total_g = scaled_total_g), by = c("Food_NSC", "Unit", "Por_eaten"))
View(calcombo)
scale_cal_check <- calcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
View(scale_cal_check)
View(scale_cal_check[["Cdn,Pasta,Fully Cooked,Novita,Borden, Fettuccine.cup"]])
scale_cal_check <- calcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
scale_cal_check <- calcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
View(scale_cal_check)
View(calcombo)
scale_cal_check <- calcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
View(dtb_)
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx') %>%
rename(total_g = weight_grams)
# first make sure all of the my entries in cal is not NA
nacor <- read_csv('../data/144_check_NA_ones_peter.csv') %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code") %>%
select(colnames(vet))
# the below are the total vetted ones that are not EN
totalvet <- bind_rows(vet, nacor)
View(totalvet)
needcal_food
needcal_food <- calcor %>%
distinct(Food_NSC)
View(needcal_food)
View(calcor)
# there are some NAs in the above table and a result because of the same food with differnt Unit
# try to find the values in the previous vetted data
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal))
View(scale_cal_check_na)
scale_cal_check_na
totalvet
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
inner_join(totalvet)
View(scale_cal_check_na)
# there are some NAs in the above table and a result because of the same food with differnt Unit
# try to find the values in the previous vetted data
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(totalvet)
View(part1)
scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code)
# there are some NAs in the above table and a result because of the same food with differnt Unit
# try to find the values in the previous vetted data
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(part1)
# there are some NAs in the above table and a result because of the same food with differnt Unit
# try to find the values in the previous vetted data
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal))
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
scale_cal_check_na <- scale_cal_check %>%
filter(is.na(scaled_cal)) %>%
select(Food_NSC:Food_code) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code"))
scale_cal_check %>%
filter(is.na(scaled_cal))
View(scale_cal_check_na)
scale_cal_check_full <- bind_rows(
scale_cal_check %>% filter(!is.na(scaled_cal)),
scale_cal_check_na
)
View(scale_cal_check_full)
View(dtb_)
View(scale_cal_check_full)
scale_cal_check_full
scale_cal_check_full
# like Jonas said now I get the full meaning of why it would be good to have a relational database
# because you can just calibrate the unit portion for one thing and then scale it to all others accordingly so you don't need to worry about the scaling every single time
# now to have such a unit portion thing
# there are two parts that I need to assemble
cal2 <- scale_cal_check_full %>%
select(Food_NSC, Food_code, Por_eaten, Unit, Calories_kcal = scaled_cal, total_g = scaled_total_g)
View(cal2)
# like Jonas said now I get the full meaning of why it would be good to have a relational database
# because you can just calibrate the unit portion for one thing and then scale it to all others accordingly so you don't need to worry about the scaling every single time
# now to have such a unit portion thing
# there are two parts that I need to assemble
cal2 <- scale_cal_check_full %>%
select(Food_NSC, Food_code, Por_eaten, Unit, Calories_kcal = scaled_cal, total_g = scaled_total_g) %>%
distinct(Food_NSC,Unit, .keep_all = T )
cal2
# like Jonas said now I get the full meaning of why it would be good to have a relational database
# because you can just calibrate the unit portion for one thing and then scale it to all others accordingly so you don't need to worry about the scaling every single time
# now to have such a unit portion thing
# there are two parts that I need to assemble
cal2 <- scale_cal_check_full %>%
select(Food_NSC, Food_code, Por_eaten, Unit, Calories_kcal = scaled_cal, total_g = scaled_total_g) %>%
distinct(Food_NSC,Unit, .keep_all = T ) %>%
mutate(cal_per_serving_unit = round(Calories_kcal/Por_eaten,1))
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food)
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
ungroup() %>%
filter(!Food_NSC %in% needcal_food)
# find the food_nsc in these and scale to other portions
needcal_food <- calcor %>%
distinct(Food_NSC) %>% pull(Food_NSC)
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food)
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food) %>%
distinct(Food_NSC,Unit, .keep_all = T )
View(cal1)
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food) %>%
distinct(Food_NSC,Unit, .keep_all = T )
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food) %>%
distinct(Food_NSC,Unit, .keep_all = T ) %>%
mutate(cal_per_serving_unit = round(Calories_kcal/Por_eaten,1))
# prepare a table for the food_nsc that is not in the calcor table
cal1 <- dtb_ %>%
filter(!Food_NSC %in% needcal_food) %>%
distinct(Food_NSC,Unit, .keep_all = T ) %>%
mutate(cal_per_serving_unit = round(Calories_kcal/Por_eaten,1)) %>%
select(colnames(cal2))
# combine those two tables
calall <- bind_rows(cal1, cal2)
View(calall)
calall
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1))
calall
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1))
calall
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit)
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit)
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit)
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit)
calall %>% write_csv('../data/144_cal_and_gram_per_serving_unit_batch1.csv')
# to make a plot shows that Jonas suggested that has the foodcode+unit combination boxplot to see if they are generallly consistent
calall %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))
# to make a plot shows that Jonas suggested that has the foodcode+unit combination boxplot to see if they are generallly consistent
calall %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}')) %>%
ggboxplot(y = 'cal_per_serving_unit') +
facet_wrap(~ fd_unit, scales = 'free')
calall
calall %>% count(Food_code, Unit)
tally_combo <- calall %>% count(Food_code, Unit, sort = T)
View(tally_combo)
tally_combo <- calall %>% count(fd_unit, sort = T)
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))
calall %>% write_csv('../data/144_cal_and_gram_per_serving_unit_batch1.csv')
tally_combo <- calall %>% count(fd_unit, sort = T)
to_plot <- tally_combo %>%
filter(n >= 5) %>% pull(fd_unit)
# select to plot the combos that have at least 5 points
to_plot_calall <- calall %>%
filter(fd_unit %in% to_plot)
to_plot_calall %>%
ggboxplot(y = 'cal_per_serving_unit') +
facet_wrap(~ fd_unit, scales = 'free')
ggsave('../data/144_fd_unit5.pdf', width = 10, height = 15)
ggsave('../data/144_fd_unit5.pdf', width = 8, height = 10)
ggsave('../data/144_fd_unit5.pdf', width = 16, height = 15)
to_plot_calall %>%
ggboxplot(y = 'cal_per_serving_unit') +
facet_wrap(~ fd_unit, scales = 'free')
ggsave('../data/144_fd_unit5.pdf', width = 16, height = 15)
View(calall)
View(tally_combo)
sd_combo <- calall %>%
split(.$fd_unit)
View(sd_combo)
View(sd_combo[["11111000:each"]])
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))  %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code")
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))  %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code")
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))
# combine those two tables
calall <- bind_rows(cal1, cal2) %>%
mutate(total_gram_per_serving_unit = round(total_g/Por_eaten,1)) %>%
select(Food_NSC, Food_code,Unit, cal_per_serving_unit, total_gram_per_serving_unit) %>%
mutate(fd_unit = str_glue('{Food_code}:{Unit}'))  %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code")
calall %>% write_csv('../data/144_cal_and_gram_per_serving_unit_batch1.csv')
sd_combo[[1]]
sd_combo[[1]] %>% mutate(num_data = nrow(.))
sd_combo[[1]]
sd_combo[[1]] %>% mutate(num_data = nrow(.))
sd_combo[[1]] %>% mutate(num_data = nrow(.))
sd_combo <- calall %>%
split(.$fd_unit) %>%
map(function(df){
df %>%
mutate(num_data = nrow(.)) %>%
group_by(fd_unit, description, num_data) %>%
summarise(mean_cal = mean(cal_per_serving_unit),
sd_cal = sd(cal_per_serving_unit))
})
View(sd_combo)
View(sd_combo[["11111000:each"]])
View(sd_combo[["41601030:oz"]])
sd_combo_df <- sd_combo %>% bind_rows()
View(sd_combo_df)
View(calall)
