ylab(paste0("PC 2 [",percent_var[2],"%]")) +
theme(aspect.ratio=1, legend.position = 'bottom')
library(tidyverse)
library(vdbR)
library(readxl)
library(ggpubr)
connect_database()
get_table_from_database('asv_alpha_diversity_ag')
get_table_from_database('asv_annotation_blast_ag')
pheno <- read_excel('../data/Exp9_Flourfenicol, Biapenem + Diets .xlsx')
sampleids <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1154'))
cts <- get_counts_subset(sampleids$sampleid)
View(cts)
get_table_from_database('asv_annotation_blast_color_ag')
dat <- cts %>%
select(asv_key:count_total, count_relative) %>%
left_join(asv_annotation_blast_color_ag %>%
select(asv_key,color_label_group_distinct), by = "asv_key")
View(dat)
# there are some ASVs that don't have a color with it, but can use the color for the genus level
color_group <- dat %>%
split(is.na(.$color_label_group_distinct))
# find the genus for these asv
no_color <- color_group %>%
pluck('TRUE') %>%
distinct(asv_key) %>%
inner_join(asv_annotation_blast_ag %>%
select(asv_key, genus))
# find the colors for these genera
genera_colors <- no_color %>%
distinct(genus) %>%
inner_join(asv_annotation_blast_color_ag %>%
distinct(genus, color_label_group_distinct))
# the full df for the no color genera
no_color_df <- no_color %>%
left_join(genera_colors)
no_color_df_full <- color_group %>%
pluck('TRUE') %>%
select(-color_label_group_distinct) %>%
left_join(no_color_df %>%
select(- genus))
# so if the genus is unknown then it's gonna be assigned "other" gray color
# the question is do we go one taxa level higher or make a new color base and shades for the new asv
# after discussing with Tsoni, we decided that it's ok to assign gray to the unknown genus
# merge the new no_color_df_full to the original df
dat <- bind_rows(
no_color_df_full,
color_group %>%
pluck('FALSE')
)
View(dat)
asv_color_set <- asv_annotation_blast_color_ag %>%
distinct(color,color_label_group_distinct,color_label_group,color_base) %>%
select(color_label_group_distinct, color) %>%
deframe()
cbd <- compute_beta_diversity_and_tsne(sampleid = dat$sampleid,
taxonomy = dat$color_label_group_distinct,
count = dat$count);
#compute beta diversity
cbd$compute_beta_diversity()
stacked_bar <- ggplot(dat,aes(sampleid, count_relative, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
ylab = 'Relative counts') +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "none") +
scale_fill_manual(values = asv_color_set)
stacked_bar
library(cowplot)
p <- '../data/composition_legend.png'
p <- '../data/composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
p <- '../../miscellaneous/data//composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
legend
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(1, 2) )
ggsave('../data/121_bar_human_palette.pdf',
width = 220,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 1) )
ggsave('../data/121_bar_human_palette.pdf',
width = 220,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
View(dat)
# so if the genus is unknown then it's gonna be assigned "other" gray color
# the question is do we go one taxa level higher or make a new color base and shades for the new asv
# after discussing with Tsoni, we decided that it's ok to assign gray to the unknown genus
# merge the new no_color_df_full to the original df
dat <- bind_rows(
no_color_df_full,
color_group %>%
pluck('FALSE')
) %>% left_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier ))
# so if the genus is unknown then it's gonna be assigned "other" gray color
# the question is do we go one taxa level higher or make a new color base and shades for the new asv
# after discussing with Tsoni, we decided that it's ok to assign gray to the unknown genus
# merge the new no_color_df_full to the original df
dat <- bind_rows(
no_color_df_full,
color_group %>%
pluck('FALSE')
) %>% left_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier ))%>%
arrange(Treatment, Day, Mouse_identifier) %>%
mutate(sid = str_glue('{Treatment}__Day:{Day}__Mouse:{Mouse_identifier}'))
stacked_bar <- ggplot(dat,aes(sid, count_relative, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
ylab = 'Relative counts') +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "none") +
scale_fill_manual(values = asv_color_set)
stacked_bar
library(cowplot)
p <- '../../miscellaneous/data//composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
legend
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 1) )
ggsave('../data/121_bar_human_palette.pdf',
width = 220,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
stacked_bar <- ggplot(dat,aes(sid, count_relative, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
facet_grid(Day ~ Treatment, scales = 'free') +
labs(title = '',
ylab = 'Relative counts') +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "none") +
scale_fill_manual(values = asv_color_set)
stacked_bar
library(cowplot)
p <- '../../miscellaneous/data//composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
legend
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 1) )
ggsave('../data/121_bar_human_palette.pdf',
width = 220,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
# so if the genus is unknown then it's gonna be assigned "other" gray color
# the question is do we go one taxa level higher or make a new color base and shades for the new asv
# after discussing with Tsoni, we decided that it's ok to assign gray to the unknown genus
# merge the new no_color_df_full to the original df
dat <- bind_rows(
no_color_df_full,
color_group %>%
pluck('FALSE')
) %>% left_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier ))%>%
arrange(Treatment, Day, Mouse_identifier) %>%
mutate(sid = str_glue('Day:{Day}__Mouse:{Mouse_identifier}'))
stacked_bar <- ggplot(dat,aes(sid, count_relative, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
facet_grid(Day ~ Treatment, scales = 'free') +
labs(title = '',
ylab = 'Relative counts') +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "none") +
scale_fill_manual(values = asv_color_set)
stacked_bar
library(cowplot)
p <- '../../miscellaneous/data//composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
legend
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 1) )
ggsave('../data/121_bar_human_palette.pdf',
width = 220,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
ggsave('../data/121_bar_human_palette.pdf',
width = 300,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 0.5) )
ggsave('../data/121_bar_human_palette.pdf',
width = 300,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# the colony count
colony <- read_csv('../data/Antibiotics + Diet Murine Experiments_ 7152022.csv')
View(colony)
library(tidyverse)
library(vdbR)
library(readxl)
library(ggpubr)
connect_database()
get_table_from_database('asv_alpha_diversity_ag')
get_table_from_database('asv_annotation_blast_ag')
get_table_from_database('asv_annotation_blast_color_ag')
q <- read_excel('../data/Tsoni_59samples_pool1154_16SqPCR_Results_07112022.xlsx')
pheno <- read_excel('../data/Exp9_Flourfenicol, Biapenem + Diets .xlsx')
sampleids <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1154'))
cts <- get_counts_subset(sampleids$sampleid)
cts_entero <- cts %>%
left_join(asv_annotation_blast_ag %>%
select(asv_key, genus)) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(count_relative)) %>%
filter(genus == 'Enterococcus') %>%
full_join(q %>%
select(sampleid  = `Tube ID`, copies_16s_per_g = `16S COPIES/G`)) %>%
mutate(entero_copy = copies_16s_per_g*relab)  %>%
inner_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier )) %>%
full_join(sampleids %>%
select(sampleid:shannon)) %>%
select(-shannon) %>%
relocate(relab, .after = simpson_reciprocal) %>%
relocate(entero_copy, .after = relab)  %>%
gather('key', 'value', simpson_reciprocal:entero_copy) %>%
mutate(key = factor(key, levels = c('entero_copy','relab','simpson_reciprocal')))
cts_entero %>%
write_csv('../data/121_mouse_exp.csv')
cts_entero %>%
ggscatter(x = 'Day', y = 'value', label = 'Mouse_identifier', repel = T,color = 'Day',
ylab = 'Enterococcus and alpha diversity') +
facet_grid(key~ Treatment, scales = 'free_y') +
theme_update() +
scale_x_continuous('Day', breaks = c(0,3,7))  +
theme(legend.position = 'none')
# the colony count
colony <- read_csv('../data/Antibiotics + Diet Murine Experiments_ 7152022.csv')
View(colony)
colo_biap
# the colony count
colony <- read_csv('../data/Antibiotics + Diet Murine Experiments_ 7152022.csv')
colo_biap <- colony %>%
filter(str_detect())
colony
colo_biap <- colony %>%
filter(str_detect(Treatment, Biapenem''))
colo_biap <- colony %>%
filter(str_detect(Treatment, 'Biapenem'))
View(colo_biap)
colo_biap
colo_biap %>%
count(Treatment, Group, Day)
tt <- colo_biap %>%
count(Treatment, Group, Day)
View(tt)
View(cts_entero)
length(intersect(colo_biap$TubeID, cts_entero$sampleid))
length(unique(cts_entero$sampleid))
cts_enterococcus <- cts %>%
left_join(asv_annotation_blast_ag %>%
select(asv_key, genus)) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(count_relative)) %>%
filter(genus == 'Enterococcus') %>%
full_join(q %>%
select(sampleid  = `Tube ID`, copies_16s_per_g = `16S COPIES/G`)) %>%
mutate(entero_copy = copies_16s_per_g*relab)  %>%
inner_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier )) %>%
full_join(sampleids %>%
select(sampleid:shannon)) %>%
select(-shannon) %>%
relocate(relab, .after = simpson_reciprocal) %>%
relocate(entero_copy, .after = relab)
joined <- colo_biap %>%
left_join(cts_enterococcus %>% rename(TubeID = sampleid))
joined <- colo_biap %>%
left_join(cts_enterococcus %>% rename(TubeID = sampleid),by = 'TubeID' )
View(joined)
# the colony count
colony <- read_csv('../data/Antibiotics + Diet Murine Experiments_ 7152022.csv')
colo_biap <- colony %>%
filter(str_detect(Treatment, 'Biapenem'))
joined <- colo_biap %>%
left_join(cts_enterococcus %>% rename(TubeID = sampleid),by = 'TubeID' )
colo_biap
colo_biap
joined <- colo_biap %>%
left_join(cts_enterococcus %>% rename(TubeID = sampleid),by = 'TubeID' )
View(cts_enterococcus)
setdiff(cts_entero$sampleid, colo_biap$TubeID)
cts_enterococcus
cts_enterococcus %>%
filter(sampleid %in% joined$TubeID)
cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
knitr::opts_chunk$set(echo = TRUE,
fig.width = 3,
fig.height = 3,
fig.align = 'center')
library(rethinking)
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking")
# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(c("coda","mvtnorm","devtools","loo","dagitty","shape"))
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda", "mvtnorm", "devtools", "loo", "dagitty", "shape"))
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
library(dplyr)
library(ggplot2)
library(quantreg)
library(ggpmisc)
library(broom)
cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
df <- read.csv(file='../sum of sugar intake vs max zscore family(E,E).csv')
df <- read.csv(file='../data/sum of sugar intake vs max zscore family(E,E).csv')
outpath <- '../data'
encode_ordinal <- function(x, order = unique(x)) {
x <- as.numeric(factor(x, levels = order, exclude = NULL))
x
}
df$pid_encoded <- encode_ordinal(df$pid)
## remove NA
df <- df %>% filter(!is.na(sum_sugar) )
## standardize
df$sum_sugar_s <- (df$sum_sugar - mean(df$sum_sugar)) / sd(df$sum_sugar)
df <- df %>% select(iRep_zscore,sum_sugar,sum_sugar_s,genus,best_species,pid,pid_encoded,family)
head(df)
ggplot(df, aes(x = sum_sugar, y = iRep_zscore)) + geom_point() +
theme_classic()+
xlab('Sum of sugar (g) standardized') +
ylab('iRep zscore') +
ggtitle(paste0('Sum of sugar intake vs irep zscore \nsamples=',nrow(df))) +
theme(plot.title = element_text(size = 10, face = "bold")) +
stat_smooth(method = "lm",formula = y~x) +
stat_fit_glance(method = 'lm',
method.args = list(formula = y ~ x),
geom = 'text',
aes(label = paste("p-value=", signif(..p.value.., digits = 3),
sep = "")),
label.x = 3, label.y = 3, size = 4)
View(df)
df %>% distinct(pid)
ggplot(df, aes(x = sum_sugar_s, y = iRep_zscore)) + geom_point() +
theme_classic()+
xlab('Sum (sweets, fruit) (g) standardized') +
ylab('iREP z-score (family level)') +
ggtitle(paste0('Sum (sweets, fruit) intake vs iREP z-score \nsamples=',nrow(df))) +
theme(plot.title = element_text(size = 10, face = "bold")) +
stat_smooth(method = "lm",formula = y~x) +
stat_fit_glance(method = 'lm',
method.args = list(formula = y ~ x),
geom = 'text',
aes(label = paste("p-value=", signif(..p.value.., digits = 3),
sep = "")),
label.x = 3, label.y = 3, size = 4)
d <- list(irep = df$iRep_zscore,
sugar = df$sum_sugar_s,
pid = df$pid_encoded)
mfam <- ulam(
alist(
irep ~ dnorm(mu,sigma),
mu <- a_p[pid] + b*sugar,
a_p[pid] ~ dnorm(a,sigma_a),
a ~ dnorm(0,1),
b ~ dnorm(0,0.5),
sigma ~ dexp(1),
sigma_a ~ dexp(5)
),data = d, chains = 4, iter=2000
)
mfam <- ulam(
alist(
irep ~ dnorm(mu,sigma),
mu <- a_p[pid] + b*sugar,
a_p[pid] ~ dnorm(a,sigma_a),
a ~ dnorm(0,1),
b ~ dnorm(0,0.5),
sigma ~ dexp(1),
sigma_a ~ dexp(5)
),data = d, chains = 4, iter=2000
)
joined <- colo_biap %>%
left_join(cts_enterococcus %>% rename(TubeID = sampleid),by = 'TubeID' )
View(joined)
View(cts_enterococcus)
cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
not <- cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
View(not)
not <- cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
joined <- colo_biap %>%
inner_join(cts_enterococcus %>% rename(TubeID = sampleid),by = 'TubeID' )
not <- cts_enterococcus %>%
filter(!sampleid %in% joined$TubeID)
joined
joined %>% count(Treatment.x, Day.x)
look <- joined %>% count(Treatment.x, Day.x)
View(look)
dat <- cts %>%
select(asv_key:count_total, count_relative) %>%
left_join(asv_annotation_blast_color_ag %>%
select(asv_key,color_label_group_distinct), by = "asv_key")
# there are some ASVs that don't have a color with it, but can use the color for the genus level
color_group <- dat %>%
split(is.na(.$color_label_group_distinct))
# find the genus for these asv
no_color <- color_group %>%
pluck('TRUE') %>%
distinct(asv_key) %>%
inner_join(asv_annotation_blast_ag %>%
select(asv_key, genus))
# find the colors for these genera
genera_colors <- no_color %>%
distinct(genus) %>%
inner_join(asv_annotation_blast_color_ag %>%
distinct(genus, color_label_group_distinct))
# the full df for the no color genera
no_color_df <- no_color %>%
left_join(genera_colors)
no_color_df_full <- color_group %>%
pluck('TRUE') %>%
select(-color_label_group_distinct) %>%
left_join(no_color_df %>%
select(- genus))
# so if the genus is unknown then it's gonna be assigned "other" gray color
# the question is do we go one taxa level higher or make a new color base and shades for the new asv
# after discussing with Tsoni, we decided that it's ok to assign gray to the unknown genus
# merge the new no_color_df_full to the original df
dat <- bind_rows(
no_color_df_full,
color_group %>%
pluck('FALSE')
) %>% left_join(pheno %>%
select(sampleid = TubeID, Treatment:Mouse_identifier ))%>%
arrange(Treatment, Day, Mouse_identifier) %>%
mutate(sid = str_glue('Day:{Day}__Mouse:{Mouse_identifier}'))
asv_color_set <- asv_annotation_blast_color_ag %>%
distinct(color,color_label_group_distinct,color_label_group,color_base) %>%
select(color_label_group_distinct, color) %>%
deframe()
cbd <- compute_beta_diversity_and_tsne(sampleid = dat$sampleid,
taxonomy = dat$color_label_group_distinct,
count = dat$count);
#compute beta diversity
cbd$compute_beta_diversity()
stacked_bar <- ggplot(dat,aes(sid, count_relative, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
facet_grid(Day ~ Treatment, scales = 'free') +
labs(title = '',
ylab = 'Relative counts') +
theme(axis.text.x = element_text(angle = 90),
axis.text.y = element_blank(),
legend.position = "none") +
scale_fill_manual(values = asv_color_set)
stacked_bar
library(cowplot)
p <- '../../miscellaneous/data//composition_legend.png'
legend <- ggdraw() +
draw_image(magick::image_read(p),   scale = 0.9)
legend
top <- plot_grid(stacked_bar, legend, labels = 'none',rel_widths  = c(2, 0.5) )
ggsave('../data/121_bar_human_palette.pdf',
width = 300,
height = 120,
#height = 60,
units = c("mm"),
dpi = 400, plot = top)
View(dat)
View(joined)
View(colony)
View(colo_biap)
View(cts_enterococcus)
View(pheno)
# the colony count
colony <- read_csv('../data/Antibiotics + Diet Murine Experiments_ 7152022.csv')
View(colony)
joined
joined %>%
filter(Treatment.x != Treatment.y)
joined %>%
select(Treatment.x, Treatment.y) %>%
filter(Treatment.x != Treatment.y)
joined %>%
select(Treatment.x, Treatment.y) %>%
filter(Treatment.x != Treatment.y)
