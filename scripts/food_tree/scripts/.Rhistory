theme(aspect.ratio = 1, legend.position = 'none')
META %>%
mutate(log_div = log(simpson_reciprocal)) %>%
#mutate(empirical = if_else(empirical == 'TRUE', 'abx exposed', 'abx NOT exposed')) %>%
ggscatter(x = 'fg_sweets', y = 'log_div', color = 'empirical',
ylab = 'log(diversity)',
alpha = 0.3, shape = 16,
add = "reg.line",  # Add regressin line
add.params = list(color = "empirical", fill = "empirical"), # Customize line
conf.int = TRUE # Add confidence interval
) +
stat_cor(aes(color = empirical),  label.x.npc = "middle", label.y.npc = "top") +
scale_x_sqrt() +
scale_y_sqrt() +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#facet_wrap(~ empirical, labeller = 'label_both') +
theme(aspect.ratio = 1, legend.position = 'none')
META %>%
mutate(log_div = log(simpson_reciprocal)) %>%
#mutate(empirical = if_else(empirical == 'TRUE', 'abx exposed', 'abx NOT exposed')) %>%
ggscatter(x = 'fg_sweets', y = 'log_div', color = 'empirical',
ylab = 'log(diversity)',
alpha = 0.3, shape = 16,
add = "reg.line",  # Add regressin line
add.params = list(color = "empirical", fill = "empirical"), # Customize line
conf.int = TRUE # Add confidence interval
) +
stat_cor(aes(color = empirical), method = "spearman", label.x.npc = "middle", label.y.npc = "top") +
scale_x_sqrt() +
scale_y_sqrt() +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#facet_wrap(~ empirical, labeller = 'label_both') +
theme(aspect.ratio = 1, legend.position = 'none')
META %>%
mutate(log_div = log(simpson_reciprocal)) %>%
#mutate(empirical = if_else(empirical == 'TRUE', 'abx exposed', 'abx NOT exposed')) %>%
ggscatter(x = 'fg_sweets', y = 'log_div', color = 'empirical',
ylab = 'log(diversity)',
alpha = 0.3, shape = 16,
add = "reg.line",  # Add regressin line
add.params = list(color = "empirical", fill = "empirical"), # Customize line
conf.int = TRUE # Add confidence interval
) +
stat_cor(aes(color = empirical), method = "spearman", label.x.npc = "middle", label.y.npc = "top") +
scale_x_sqrt() +
scale_y_sqrt() +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#facet_wrap(~ empirical, labeller = 'label_both') +
theme(aspect.ratio = 1, legend.position = 'none')
ggsave('../data/184_raw_diversity_sweets_combined.pdf', width = 3.5, height = 3.5)
META %>%
mutate(log_div = log(simpson_reciprocal)) %>%
#mutate(empirical = if_else(empirical == 'TRUE', 'abx exposed', 'abx NOT exposed')) %>%
ggscatter(x = 'fg_sweets', y = 'log_div', color = 'empirical',
ylab = 'log(diversity)',
alpha = 0.3, shape = 16,
add = "reg.line",  # Add regressin line
add.params = list(color = "empirical", fill = "empirical"), # Customize line
conf.int = TRUE # Add confidence interval
) +
stat_cor(aes(color = empirical), method = "spearman", label.x.npc = "middle", label.y.npc = "top",
size = 3) +
scale_x_sqrt() +
scale_y_sqrt() +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#facet_wrap(~ empirical, labeller = 'label_both') +
theme(aspect.ratio = 1, legend.position = 'none')
ggsave('../data/184_raw_diversity_sweets_combined.pdf', width = 3.5, height = 3.5)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
library(ggridges)
library(brmstools)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
dtb <- read_csv('../data/152_combined_DTB.csv')
range(dtb$fdrt)
# I wanna use the original data types for this thing
meta_original <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn))
# %>%
#   mutate(fg_egg = fg_egg/100,
#          fg_fruit = fg_fruit/100,
#          fg_grain = fg_grain/100,
#          fg_legume = fg_legume/100,
#          fg_meat = fg_meat/100,
#          fg_milk = fg_milk/100,
#          fg_oils = fg_oils/100,
#          fg_sweets = fg_sweets/100,
#          fg_veggie = fg_veggie/100)
mod_original <- log(simpson_reciprocal) ~ 0 +
intensity+
empirical+
fg_fruit:empirical+
fg_meat:empirical+
fg_milk:empirical+
fg_oils:empirical+
fg_egg:empirical+
fg_grain:empirical+
fg_sweets:empirical+
fg_legume:empirical+
fg_veggie:empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior(mod_original,data = meta_original )
div_priors_original <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal( 2, .1), class = 'b', coef = "intensityablative"),
prior(normal( 2, .1), class = 'b', coef = "intensityreduced"),
prior(normal( 2, .1), class = 'b', coef = "intensitynonablative")
)
model_div_original <- brm( mod_original,
data = meta_original,
warmup = 1000, iter = 3000,
prior = div_priors_original,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T, file = '../data/173_interaction_conditional_model')
# I wanna use the original data types for this thing
meta_original <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn))
# %>%
#   mutate(fg_egg = fg_egg/100,
#          fg_fruit = fg_fruit/100,
#          fg_grain = fg_grain/100,
#          fg_legume = fg_legume/100,
#          fg_meat = fg_meat/100,
#          fg_milk = fg_milk/100,
#          fg_oils = fg_oils/100,
#          fg_sweets = fg_sweets/100,
#          fg_veggie = fg_veggie/100)
mod_original <- log(simpson_reciprocal) ~ 0 +
intensity+
empirical+
fg_fruit:empirical+
fg_meat:empirical+
fg_milk:empirical+
fg_oils:empirical+
fg_egg:empirical+
fg_grain:empirical+
fg_sweets:empirical+
fg_legume:empirical+
fg_veggie:empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior(mod_original,data = meta_original )
div_priors_original <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal( 2, .1), class = 'b', coef = "intensityablative"),
prior(normal( 2, .1), class = 'b', coef = "intensityreduced"),
prior(normal( 2, .1), class = 'b', coef = "intensitynonablative")
)
model_div_original <- brm( mod_original,
data = meta_original,
warmup = 1000, iter = 3000,
prior = div_priors_original,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T, file = '../data/173_interaction_conditional_model')
# I wanna use the original data types for this thing
meta_original <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn))
# %>%
#   mutate(fg_egg = fg_egg/100,
#          fg_fruit = fg_fruit/100,
#          fg_grain = fg_grain/100,
#          fg_legume = fg_legume/100,
#          fg_meat = fg_meat/100,
#          fg_milk = fg_milk/100,
#          fg_oils = fg_oils/100,
#          fg_sweets = fg_sweets/100,
#          fg_veggie = fg_veggie/100)
mod_original <- log(simpson_reciprocal) ~ 0 +
intensity+
empirical+
fg_fruit:empirical+
fg_meat:empirical+
fg_milk:empirical+
fg_oils:empirical+
fg_egg:empirical+
fg_grain:empirical+
fg_sweets:empirical+
fg_legume:empirical+
fg_veggie:empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior(mod_original,data = meta_original )
div_priors_original <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal( 2, .1), class = 'b', coef = "intensityablative"),
prior(normal( 2, .1), class = 'b', coef = "intensityreduced"),
prior(normal( 2, .1), class = 'b', coef = "intensitynonablative")
)
model_div_original <- brm( mod_original,
data = meta_original,
warmup = 1000, iter = 3000,
prior = div_priors_original,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T, file = '../data/173_interaction_conditional_model')
g_sweets <- plot(conditional_effects(model_div_original, effects = 'fg_sweets:empirical'),
points = F, plot = F)[[1]] +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
g_sweets
dat9 <- conditional_effects(model_div_original, effects = 'fg_sweets:empirical')
View(dat9)
dat9
dat9 <- conditional_effects(model_div_original, effects = 'fg_sweets:empirical')[['fg_sweets:empirical']]
View(dat9)
nd <-
crossing(cid        = 1:2,
rugged_std = seq(from = -0.2, to = 1.2, length.out = 30))
View(nd)
?crossing
g_sweets <- plot(conditional_effects(model_div_original, effects = 'fg_sweets:empirical', surface = T),
points = F, plot = F)[[1]] +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
vars <- tibble(var = names(dat)) %>% filter(str_detect(var, '\\:'))
g_sweets
dat9 <- conditional_effects(model_div_original, effects = 'fg_sweets:empirical',  surface = T)[['fg_sweets:empirical']]
View(dat9)
dat9 <- conditional_effects(model_div_original, effects = 'fg_sweets:empirical',  surface = T, resolution = 10000)[['fg_sweets:empirical']]
g_sweets <- plot(conditional_effects(model_div_original, effects = 'fg_sweets:empirical', surface = T, resolution = 10000),
points = F, plot = F)[[1]] +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
g_sweets
dat9
dat9 %>%
ggplot(aes(x = fg_sweets, y = `log(simpson_reciprocal)`, fill = effect2__, color = effect2__)) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)
dat9 %>%
ggplot(aes(x = fg_sweets, y = `log(simpson_reciprocal)`, fill = effect2__, color = effect2__)) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9
dat9 %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
stat_lineribbon(.width = seq(from = .03, to = .99, by = .03),
alpha = .1, size = 0)
dat9 %>%
sample_frac(size = 2000)
dat9 %>%
sample_frac(size = 0.2,  replace = F)
dat9 %>%
sample_frac(size = 0.2,  replace = F) %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
stat_lineribbon(.width = seq(from = .03, to = .99, by = .03),
alpha = .1, size = 0) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9 %>%
sample_frac(size = 0.2,  replace = F) %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
stat_lineribbon(
alpha = .1, size = 0)
dat9 %>%
sample_frac(size = 0.1,  replace = F) %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
stat_lineribbon(
alpha = .9, size = 0)
dat9 %>%
sample_frac(size = 0.1,  replace = F) %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
stat_lineribbon(
alpha = .9, size = 1)
dat9 %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9
META
META <- read_csv('../data/153_combined_META.csv')
META
dat9 %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9
dat9 %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3)
dat9 %>%
ggplot(aes(x = effect1__, y = estimate__, fill = effect2__, color = effect2__)) +
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3)
dat9 %>%
ggplot() +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__, fill = effect2__, color = effect2__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9 %>%
ggplot(aes(x = effect1__ )) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__, fill = effect2__, color = effect2__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9 %>%
ggplot(aes(x = effect1__ )) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__, fill = effect2__, color = effect2__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
scale_x_sqrt() +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
dat9 %>%
ggplot(aes(x = effect1__ )) +
geom_smooth(data = dat9,
aes(y = estimate__, ymin = lower__, ymax = upper__, fill = effect2__, color = effect2__),
stat = "identity",
alpha = 1/4, linewidth = 1/2)+
geom_point(data = META ,
aes(x = fg_sweets, y = log(simpson_reciprocal), color = empirical),
size = 2/3) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
scale_x_sqrt() +
scale_y_sqrt() +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
