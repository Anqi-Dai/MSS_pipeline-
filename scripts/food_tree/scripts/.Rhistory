axis.title=element_text(size=8),
aspect.ratio=1)
with_sigma_pred
ave_fg
meta
meta %>%
select(starts_with('fg'))
set.seed(123)
onereal <- meta %>%
select(starts_with('fg')) %>%
slice_sample(n = 1)
View(onereal)
onereal
set.seed(123)
onereal <- meta %>%
select(starts_with('fg')) %>%
slice_sample(n = 1)
cal_mean_onereal <- function(b_fg_fruit_,b_fg_meat_,b_fg_milk_,b_fg_oils_,b_fg_egg_,b_fg_grain_,b_fg_sweets_,b_fg_legume_,b_fg_veggie_,b_intensityreduced_ ){
res =
b_fg_egg_ * onereal$fg_egg +
b_fg_fruit_ * onereal$fg_fruit +
b_fg_grain_ * onereal$fg_grain +
b_fg_legume_ * onereal$fg_legume +
b_fg_meat_ * onereal$fg_meat +
b_fg_milk_ * onereal$fg_milk +
b_fg_oils_ * onereal$fg_oils +
b_fg_sweets_ * onereal$fg_sweets +
b_fg_veggie_ * onereal$fg_veggie +
b_intensityreduced_
}
set.seed(123)
onereal <- meta %>%
select(starts_with('fg')) %>%
slice_sample(n = 1)
cal_mean_onereal <- function(b_fg_fruit_,b_fg_meat_,b_fg_milk_,b_fg_oils_,b_fg_egg_,b_fg_grain_,b_fg_sweets_,b_fg_legume_,b_fg_veggie_,b_intensityreduced_ ){
res =
b_fg_egg_ * onereal$fg_egg +
b_fg_fruit_ * onereal$fg_fruit +
b_fg_grain_ * onereal$fg_grain +
b_fg_legume_ * onereal$fg_legume +
b_fg_meat_ * onereal$fg_meat +
b_fg_milk_ * onereal$fg_milk +
b_fg_oils_ * onereal$fg_oils +
b_fg_sweets_ * onereal$fg_sweets +
b_fg_veggie_ * onereal$fg_veggie +
b_intensityreduced_
}
that_onereal <- pmap(test_coeffb, function(b_fg_fruit,b_fg_meat,b_fg_milk,b_fg_oils,b_fg_egg,b_fg_grain,b_fg_sweets,b_fg_legume,b_fg_veggie,b_intensityreduced){
cal_mean_onereal(b_fg_fruit,b_fg_meat,b_fg_milk,b_fg_oils,b_fg_egg,b_fg_grain,b_fg_sweets,b_fg_legume,b_fg_veggie,b_intensityreduced)
})%>% set_names(seq(1, 100)) %>%
bind_rows(.id = 'ID') %>%
gather('key','onereal')%>%
mutate(sigma = test$sigma)
sampled_div_mean_onereal <- that_onereal %>%
select(sigma, onereal) %>%
pmap(function(sigma, onereal){
rnorm(500, mean = onereal, sd = sigma)
}) %>% set_names(seq(1, 100)) %>%
bind_rows(.id = 'id') %>%
gather()%>% mutate(div_mean_onereal = exp(value))
set.seed(123)
onereal <- meta %>%
select(starts_with('fg')) %>%
slice_sample(n = 1)
cal_mean_onereal <- function(b_fg_fruit_,b_fg_meat_,b_fg_milk_,b_fg_oils_,b_fg_egg_,b_fg_grain_,b_fg_sweets_,b_fg_legume_,b_fg_veggie_,b_intensityreduced_ ){
res =
b_fg_egg_ * onereal$fg_egg +
b_fg_fruit_ * onereal$fg_fruit +
b_fg_grain_ * onereal$fg_grain +
b_fg_legume_ * onereal$fg_legume +
b_fg_meat_ * onereal$fg_meat +
b_fg_milk_ * onereal$fg_milk +
b_fg_oils_ * onereal$fg_oils +
b_fg_sweets_ * onereal$fg_sweets +
b_fg_veggie_ * onereal$fg_veggie +
b_intensityreduced_
}
that_onereal <- pmap(test_coeffb, function(b_fg_fruit,b_fg_meat,b_fg_milk,b_fg_oils,b_fg_egg,b_fg_grain,b_fg_sweets,b_fg_legume,b_fg_veggie,b_intensityreduced){
cal_mean_onereal(b_fg_fruit,b_fg_meat,b_fg_milk,b_fg_oils,b_fg_egg,b_fg_grain,b_fg_sweets,b_fg_legume,b_fg_veggie,b_intensityreduced)
})%>% set_names(seq(1, 100)) %>%
bind_rows(.id = 'ID') %>%
gather('key','onereal')%>%
mutate(sigma = test$sigma)
sampled_div_mean_onereal <- that_onereal %>%
select(sigma, onereal) %>%
pmap(function(sigma, onereal){
rnorm(500, mean = onereal, sd = sigma)
}) %>% set_names(seq(1, 100)) %>%
bind_rows(.id = 'id') %>%
gather()%>% mutate(div_mean_onereal = exp(value))
# combine the above results together and do the subtraction
all_diff <- bind_cols(
sampled_div_mean_all = sampled_div_mean_all$div_mean_all,
sampled_div_fruit = sampled_div_fruit$div_mean_max_fruit,
sampled_div_sweet = sampled_div_sweet$div_mean_max_sweet,
sampled_div_veggie = sampled_div_veggie$div_mean_max_veggie,
sampled_div_mean_all_0_fruit = sampled_div_mean_all_0_fruit$div_mean_all_0_fruit,
sampled_div_mean_all_0_sweet = sampled_div_mean_all_0_sweet$div_mean_all_0_sweet,
sampled_div_mean_all_0_veggie = sampled_div_mean_all_0_veggie$div_mean_all_0_veggie,
sampled_div_mean_onereal = sampled_div_mean_onereal$div_mean_onereal
) %>%
#   mutate(Fruits = sampled_div_fruit - sampled_div_mean_all,
#          Sweets = sampled_div_sweet - sampled_div_mean_all,
#           Vegetables = sampled_div_veggie - sampled_div_mean_all
# ) %>%
#     mutate(Fruits = sampled_div_fruit - sampled_div_mean_all_0_fruit,# ok change the average fruit to 0 fruit not much change
#          Sweets = sampled_div_sweet - sampled_div_mean_all_0_sweet,
#           Vegetables = sampled_div_veggie - sampled_div_mean_all_0_veggie
# ) %>%
mutate(Fruits = sampled_div_fruit - sampled_div_mean_onereal,
Sweets = sampled_div_sweet - sampled_div_mean_onereal,
Vegetables = sampled_div_veggie - sampled_div_mean_onereal
) %>%
select(-starts_with('sample')) %>%
gather()
with_sigma_pred <- all_diff %>%
ggplot(aes(y = key, x = value, color = '#A73030FF' )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = '',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
#axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
# combine the above results together and do the subtraction
all_diff <- bind_cols(
sampled_div_mean_all = sampled_div_mean_all$div_mean_all,
sampled_div_fruit = sampled_div_fruit$div_mean_max_fruit,
sampled_div_sweet = sampled_div_sweet$div_mean_max_sweet,
sampled_div_veggie = sampled_div_veggie$div_mean_max_veggie,
sampled_div_mean_all_0_fruit = sampled_div_mean_all_0_fruit$div_mean_all_0_fruit,
sampled_div_mean_all_0_sweet = sampled_div_mean_all_0_sweet$div_mean_all_0_sweet,
sampled_div_mean_all_0_veggie = sampled_div_mean_all_0_veggie$div_mean_all_0_veggie,
sampled_div_mean_onereal = sampled_div_mean_onereal$div_mean_onereal
) %>%
#   mutate(Fruits = sampled_div_fruit - sampled_div_mean_all,
#          Sweets = sampled_div_sweet - sampled_div_mean_all,
#           Vegetables = sampled_div_veggie - sampled_div_mean_all
# ) %>%
#     mutate(Fruits = sampled_div_fruit - sampled_div_mean_all_0_fruit,# ok change the average fruit to 0 fruit not much change
#          Sweets = sampled_div_sweet - sampled_div_mean_all_0_sweet,
#           Vegetables = sampled_div_veggie - sampled_div_mean_all_0_veggie
# ) %>%
mutate(Fruits = sampled_div_fruit - sampled_div_mean_onereal,
Sweets = sampled_div_sweet - sampled_div_mean_onereal,
Vegetables = sampled_div_veggie - sampled_div_mean_onereal
) %>%
select(-starts_with('sample')) %>%
gather()
with_sigma_pred <- all_diff %>%
ggplot(aes(y = key, x = value, color = '#A73030FF' )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = '',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
#axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
with_sigma_pred
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
library(ggridges)
library(brmstools)
dtb <- read_csv('../data/152_combined_DTB.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
# dtb %>%
#   distinct(mrn) %>%
#   write_csv('../data/nutrition_patients_97_mrns.csv', col_names = T)
# extract posterior samples for the coeff
post_samples  <- read_csv('../data/068_div_model_fg_post.csv')
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key %>% select(fgrp1, color, shortname))  %>%
mutate(shortname = fct_reorder(shortname, coeff, .fun=median, .desc = F))
# make a forest plot of the fg coeff and annotate the percentage
# sort the fg in the order of
# find the sorting order of the tree, which should be number of food codes in each fg
# fg_order <- dtb %>% distinct(Food_code) %>% mutate(fgrp1 = str_sub(as.character(Food_code),1, 1)) %>%
#   count(fgrp1) %>%
#   full_join(key) %>% arrange(n) %>% pull(shortname)
# calculate the percentage of > 0 and < 0 and annotate that to the figure
percs <- post_coeff %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# Install scales R package
library("scales")
# Amount of default colors
hex_codes1 <- hue_pal()(2)                             # Identify hex codes
hex_codes1
View(percs)
# calculate the percentage of > 0 and < 0 and annotate that to the figure
percs <- post_coeff %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(neg_num = negative) %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# sort the fg in the negative perc desc order
fg_order <- percs %>% arrange(desc(neg_num)) %>% pull(shortname)
percs <- post_coeff %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(neg_num = negative) %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# sort the fg in the negative perc desc order
fg_order <- percs %>% arrange(desc(neg_num)) %>% pull(shortname)
fg_order
post_coeff
# calculate the percentage of > 0 and < 0 and annotate that to the figure
percs <- post_coeff %>%
mutate(shortname = as.character(shortname)) %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(neg_num = negative) %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# sort the fg in the negative perc desc order
fg_order <- percs %>% arrange(desc(neg_num)) %>% pull(shortname)
fg_order
div_post_ridge <- post_coeff %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
left_join(percs) %>%
ggplot(aes(x = coeff, y = shortname, fill = stat(x > 0))) +
stat_pointinterval(.width = c(.66, .95)) +stat_halfeye() +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
geom_text(data = percs, aes(x = pos_x, y = shortname, label = positive, color = stat(x > 0))) +
geom_text(data = percs, aes(x = neg_x, y = shortname, label = negative, color =stat(x > 0))) +
#scale_fill_manual(values = c("gray80", "skyblue")) +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
#scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(axis.text=element_text(size=axis_text_size, color  = 'black'),
axis.title=element_text(size=axis_text_size),
aspect.ratio=1)
div_post_ridge
div_post_ridge %>%
write_rds('../data/068_div_post_ridge.rds')
div_post_ridge <- post_coeff %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
left_join(percs) %>%
ggplot(aes(x = coeff, y = shortname, fill = after_stat(x > 0))) +
stat_pointinterval(.width = c(.66, .95)) +stat_halfeye() +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
geom_text(data = percs, aes(x = pos_x, y = shortname, label = positive, color = after_stat(x > 0))) +
geom_text(data = percs, aes(x = neg_x, y = shortname, label = negative, color =after_stat(x > 0))) +
#scale_fill_manual(values = c("gray80", "skyblue")) +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
#scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(axis.text=element_text(size=axis_text_size, color  = 'black'),
axis.title=element_text(size=axis_text_size),
aspect.ratio=1)
div_post_ridge
div_post_ridge %>%
write_rds('../data/068_div_post_ridge.rds')
div_post_ridge <- post_coeff %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
left_join(percs) %>%
ggplot(aes(x = coeff, y = shortname, fill = after_stat(x > 0))) +
stat_pointinterval(.width = c(.66, .95)) +stat_halfeye() +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
geom_text(data = percs, aes(x = pos_x, y = shortname, label = positive, color = after_stat(x > 0))) +
geom_text(data = percs, aes(x = neg_x, y = shortname, label = negative, color =after_stat(x > 0))) +
#scale_fill_manual(values = c("gray80", "skyblue")) +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
#scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(axis.text=element_text(size=axis_text_size, color  = 'black'),
axis.title=element_text(size=axis_text_size),
aspect.ratio=1)
div_post_ridge
div_post_ridge %>%
write_rds('../data/068_div_post_ridge.rds')
post_coeff %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
left_join(percs)
post_coeff
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key %>% select(fgrp1, color, shortname))
percs <- post_coeff %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(neg_num = negative) %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# sort the fg in the negative perc desc order
fg_order <- percs %>% arrange(desc(neg_num)) %>% pull(shortname)
# Install scales R package
library("scales")
# Amount of default colors
hex_codes1 <- hue_pal()(2)                             # Identify hex codes
hex_codes1
post_coeff
post_coeff %>%
left_join(percs) %>%
mutate(shortname = factor(shortname, levels = fg_order))
div_post_ridge <- post_coeff %>%
left_join(percs) %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
ggplot(aes(x = coeff, y = shortname, fill = after_stat(x > 0))) +
stat_pointinterval(.width = c(.66, .95)) +stat_halfeye() +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
geom_text(data = percs, aes(x = pos_x, y = shortname, label = positive, color = after_stat(x > 0))) +
geom_text(data = percs, aes(x = neg_x, y = shortname, label = negative, color =after_stat(x > 0))) +
#scale_fill_manual(values = c("gray80", "skyblue")) +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
#scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(axis.text=element_text(size=axis_text_size, color  = 'black'),
axis.title=element_text(size=axis_text_size),
aspect.ratio=1)
div_post_ridge
div_post_ridge %>%
write_rds('../data/068_div_post_ridge.rds')
# make a forest plot of the fg coeff and annotate the percentage
# sort the fg in the order of
# find the sorting order of the tree, which should be number of food codes in each fg
# fg_order <- dtb %>% distinct(Food_code) %>% mutate(fgrp1 = str_sub(as.character(Food_code),1, 1)) %>%
#   count(fgrp1) %>%
#   full_join(key) %>% arrange(n) %>% pull(shortname)
# calculate the percentage of > 0 and < 0 and annotate that to the figure
percs <- post_coeff %>%
count(shortname, coeff > 0) %>%
mutate(perc =round(n/4000*100,1))  %>% select(-n) %>%
spread('coeff > 0', 'perc') %>%
rename(positive = 'TRUE', negative = 'FALSE') %>%
mutate(neg_num = negative) %>%
mutate(pos_x = 0.8, neg_x = -0.9) %>%
mutate(positive = str_glue('{positive}%'),
negative = str_glue('{negative}%'))
# sort the fg in the negative perc desc order
fg_order <- percs %>% arrange(neg_num) %>% pull(shortname)
# Install scales R package
library("scales")
# Amount of default colors
hex_codes1 <- hue_pal()(2)                             # Identify hex codes
hex_codes1
div_post_ridge <- post_coeff %>%
left_join(percs) %>%
mutate(shortname = factor(shortname, levels = fg_order)) %>%
ggplot(aes(x = coeff, y = shortname, fill = after_stat(x > 0))) +
stat_pointinterval(.width = c(.66, .95)) +stat_halfeye() +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
geom_text(data = percs, aes(x = pos_x, y = shortname, label = positive, color = after_stat(x > 0))) +
geom_text(data = percs, aes(x = neg_x, y = shortname, label = negative, color =after_stat(x > 0))) +
#scale_fill_manual(values = c("gray80", "skyblue")) +
labs(x = 'ln(diversity) change per 100g of food',
y = '',
title = 'Diversity') +
theme_classic() +
theme(legend.position = 'none') +
#scale_color_manual(values = c("#F8766D", "#00BFC4")) +
theme(axis.text=element_text(size=axis_text_size, color  = 'black'),
axis.title=element_text(size=axis_text_size),
aspect.ratio=1)
div_post_ridge
div_post_ridge %>%
write_rds('../data/068_div_post_ridge.rds')
div_post_ridge
div_post_ridge
fg_order
percs %>% arrange(neg_num) %>% select(shortname)
percs %>% arrange(neg_num) %>% select(shortname) %>% write_csv('../data/068_fg_sorting_order.csv')
knitr::opts_chunk$set(echo = TRUE)
fg_order <- read_csv('../data/068_fg_sorting_order.csv')
fg_order
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
post <- bind_rows(entero, extra5) %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
# import the model post results
entero <- read_csv('../data/087_Enterococcus_model_fg_post.csv') %>%
mutate(genus = 'Enterococcus') %>%
relocate(genus, .before = b_fg_fruit)
extra5 <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv')
post <- bind_rows(entero, extra5) %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
post_res_genera <- post %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = str_replace(item, 'B_','')) %>%
left_join(key %>% select(item = fg1_name, shortname))
# calculate the percentage of interval that is >|< 0 for each genus/food combo
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
perc_side <- post %>%
group_by(genus,item ) %>%
count(coeff >= 0) %>%
mutate(perc = round(n/4000, 2)) %>%
mutate(side = if_else(`coeff >= 0` == 'TRUE', 'positive', 'negative')) %>%
ungroup() %>%
select(genus, item, perc, side) %>%
spread('side', 'perc') %>%
mutate(item = str_replace(item, 'b_','')) %>%
left_join(key %>% select(item = fg1_name, shortname), by = "item") %>%
mutate(color = if_else(positive >= 0.75, 'maroon', if_else(negative >= 0.75, 'steelblue', 'white'))) %>%
mutate(mark = if_else(negative >= 0.99 | positive >= 0.99, '***', if_else(negative >= 0.975 | positive >= 0.975, '**', if_else(negative >= 0.95 | positive >= 0.95, '*', '')))) %>%
mutate(genus = factor(genus, levels = c('Enterococcus','Klebsiella','Cronobacter','Enterobacter','Citrobacter','Cedecea','Escherichia'))) %>%
mutate(shortname = factor(shortname, levels = fg_order))
col_key <- perc_side %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
genus_fg_extra <- ggplot(perc_side, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = color,  x = genus, y =  shortname), alpha = 0.5, color='gray0', width=1, height=1) +
geom_text(aes(label = mark, x = genus,y =  shortname),
nudge_y = -0.05, nudge_x = 0,size = 3) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, size=axis_text_size),
axis.text.y=element_text(size=axis_text_size, hjust=0.95,vjust=0.2),
axis.title=element_text(size=axis_title_size),
legend.position = 'none',legend.text=element_text(size=8),
legend.key = element_rect( colour = "gray50"))
genus_fg_extra %>% write_rds('../data/120_F2E_extra_genera.rds')
ggsave('../data/120_F2E_extra_genera.pdf', width =  60,plot = genus_fg_extra,
height = 70,
units = c("mm"),
dpi = 400)
f2c <- read_rds('../data/068_div_post_ridge.rds')
ggsave('../data/086_f2c.pdf', width = 3,height = 3, plot = f2c)
