) +
theme(
plot.margin = margin(0, 0, 0, 5)
)
f3 <- plot_grid(correbar, entero_panel,f3_days, f3_AUC, label_size = 12, ncol = 1,labels = c('A','B','C', NA),
align = 'vh', axis = 'lrtb', rel_heights = c(1,1.55,1, 0.55))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(scales)
library(tidybayes)
library(cowplot)
theme_set(theme_pubr(base_size = 8))
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
set.seed(1)
meta <- read_csv('../data/153_combined_META.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$changed_relab, method = c( "spearman"), exact = T)
return(list(genus = .y, rho = spearman_cor$estimate, pval = spearman_cor$p.value))
} )
# the smallest nonzero p value
pvals <- spearman_res %>%
filter(pval > 0)
tinypseudo <- min(pvals$pval)/10
# show the % of the samples that have the relab of the genus > 10^-4
perc_thre <- g_relab %>%
count(genus, relab > 10^-4) %>%
filter(`relab > 10^-4` == 'TRUE') %>%
mutate(passthre_perc = round(n/1009*100, 0))
spearman_all <- spearman_res %>%
left_join(perc_thre) %>%
mutate(n = ifelse(is.na(n), 0, n),
passthre_perc = ifelse(is.na(passthre_perc), 0, passthre_perc)) %>%
filter(passthre_perc > 10) %>%
mutate(changed_pval = if_else(pval == 0, pval + tinypseudo, pval)) %>%
mutate(padj = p.adjust(changed_pval, method = 'BH'),
neglogp = -log10(padj)) %>%
mutate(sig05 = if_else(padj < 0.05, 'FDR < 0.05', 'FDR >= 0.05')) %>%
mutate(Correlation = if_else(rho >= 0, 'higher diversity', 'lower diversity')) %>%
arrange(rho, desc(genus))
spearman_all %>% write_csv('../data/172_spearman_all.csv')
res <- read_csv('../data/172_spearman_all.csv') %>%
mutate(Correlation = factor(Correlation, levels = c('lower diversity','higher diversity')))
# make a panel with only top 5 significant ones in either direction for the main figure 3
main <- res %>%
filter(sig05 == 'FDR < 0.05') %>%
split(.$Correlation) %>%
map(function(df){
df %>% mutate(absrho = abs(rho)) %>% slice_max(order_by =absrho, n = 5 )
}) %>% bind_rows()
correbar <- main %>%
ggbarplot(x = 'genus', y = 'rho', orientation = c( "horizontal"),
sort.val = "desc",   fill = "Correlation",  color = "white",    palette = "jco",     sort.by.groups = F,     ylab = "Spearman correlation",    xlab = '') +
theme(legend.position = c(.8,.8),axis.text=element_text(size=10),axis.title=element_text(size=10),legend.text  = element_text(size=8), legend.title = element_text(size = 8),
aspect.ratio=1/1.3) +
guides(fill = guide_legend(title = "Correlated with"))
# make a panel with all the sig ones for the supplementary
correbar_all <- res %>%
filter(sig05 == 'FDR < 0.05') %>%
ggbarplot(x = 'genus', y = 'rho', orientation = c( "horizontal"),
sort.val = "desc",   fill = "Correlation",  color = "white",    palette = "jco",     sort.by.groups = F,     ylab = "Spearman correlation",    xlab = '') +
theme(legend.position = c(.8,.8),axis.text=element_text(size=10),axis.title=element_text(size=10),legend.text  = element_text(size=8), legend.title = element_text(size = 8),
aspect.ratio=1.8) +
guides(fill = guide_legend(title = "Correlated with"))
title <- ggdraw() +
draw_label(
"Fig. S7",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, correbar_all,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
)+theme(plot.margin = unit(c(1,1,1,1), "cm"))
ggsave('../data/S7_genus_diversity_correlation_178.pdf',
width = 210, height = 290, units = "mm", device = 'pdf', plot = combined, dpi = 300)
entero <- read_csv('../data/171_entero_model_fg_post_interaction.csv')  %>%
select(starts_with('b_')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_',''),
item = str_replace(item, 'b_',''),
item = str_replace(item, 'intensity','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key %>% select(fgrp1, color, shortname)) %>%
mutate(shortname = case_when(
item ==  'milk_e' ~ 'abx * Milk',
item == 'meat_e' ~ 'abx * Meats',
item ==  'egg_e' ~ 'abx * Eggs',
item ==  'legume_e' ~ 'abx * Legumes',
item == 'grain_e' ~ 'abx * Grains',
item == 'fruit_e' ~ 'abx * Fruits',
item == 'veggie_e' ~ 'abx * Vegetables',
item ==  'oils_e' ~ 'abx * Oils',
item ==  'sweets_e' ~ 'abx * Sweets',
item ==  'nonablative' ~ 'Nonablative',
item ==  'reduced' ~ 'Reduced',
item ==  'ablative' ~ 'Ablative',
item ==  'TPN' ~ 'TPN',
item ==  'EN' ~ 'EN',
item ==  'abx' ~ 'abx',
TRUE ~ `shortname`
)) %>%
filter(! shortname %in% c('Nonablative','Reduced','Ablative'))
entero %>%
distinct(shortname) %>% pull(shortname)
entero %>%
distinct(item) %>% pull(item)
# deciding on how to order these terms
# find the q25 of the coeffs
fg_order <- entero %>% filter(str_detect(item, '_e$')) %>%
group_by(shortname) %>%
tidybayes::median_qi(coeff , .width = c( .66)) %>%
arrange(.lower) %>% pull(shortname)
total_order <- c('Vegetables','abx * Vegetables',
'Oils','abx * Oils',
'Fruits','abx * Fruits',
'Meats','abx * Meats',
'Legumes','abx * Legumes',
'Eggs','abx * Eggs',
'Milk','abx * Milk',
'Grains','abx * Grains',
'Sweets','abx * Sweets',
"TPN" ,"EN" , 'abx')
#tibble(ord = total_order) %>% write_csv('../data/178_coeff_order.csv')
arrange_label <- tibble(ord = total_order) %>%
mutate(shortname = str_replace(ord, 'abx \\+ ','')) %>%
left_join(key %>% select(shortname, color)) %>%
mutate(color = if_else(is.na(color), 'black', color))
# color the most positive one with red: the abx + sweets
mostpos <- entero %>%
group_by(shortname) %>%
count(coeff > 0) %>%
ungroup %>%
filter(`coeff > 0` == 'TRUE') %>%
arrange(desc(n)) %>%
top_n(1) %>%
pull(shortname)
mostpos
# I need to create a data frame that has the coordinates of the rectangles that I wanna create
interaction_terms <- tibble(
shortname = total_order
) %>%
mutate(ymin = seq(1, nrow(.)) - 0.5,
ymax = seq(1, nrow(.)) + 0.5) %>%
filter(str_detect(shortname, '\\*')) %>%
mutate(xmin = -Inf, xmax = Inf,
interaction_fill = 'interaction_fill')
# this leaves me no choice but I need to fill the other blue area with the blue rectangles
blue_terms <- tibble(
shortname = total_order
) %>%
mutate(ymin = seq(1, nrow(.)) - 0.5,
ymax = seq(1, nrow(.)) + 0.5) %>%
filter(!str_detect(shortname, '\\*')) %>%
mutate(xmin = -Inf, xmax = Inf,
blue_fill = 'blue_fill')
entero_df <- entero %>%
mutate(mark = if_else(shortname %in% mostpos, 'mostpos','others')) %>%
mutate(shortname = factor(shortname, levels = total_order))
entero_panel <- entero_df %>%
ggplot() +
stat_pointinterval(aes(x = coeff, y = shortname, col = mark),.width = c(.66, .95), fatten_point = 1.2) +
geom_rect(data = interaction_terms, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = interaction_fill), alpha = .1) +
geom_rect(data = blue_terms, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, fill = blue_fill) , alpha = .1) +
scale_fill_manual(values=c("interaction_fill" = "lightblue", "blue_fill" = "royalblue")) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
labs(x = 'CLR(Enterococcus) change', y = '') +
#annotate("text", x = 2, y = 18, label = "97.3% > 0", col = 'coral1') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = c("coral1", "black")) +
theme(axis.text.y = element_text( size = 10), plot.background = element_rect(fill='transparent', color=NA),
axis.title=element_text(size=10), aspect.ratio=1.3 )
entero_panel
# assemble
title <- ggdraw() +
draw_label(
"Fig. 3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 5)
)
f3 <- plot_grid(correbar, entero_panel,f3_days, f3_AUC, label_size = 12, ncol = 1,labels = c('A','B','C', NA),
align = 'vh', axis = 'lrtb', rel_heights = c(1,1.55,1, 0.55))
combined <- plot_grid(
title, f3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.05, 1)
)+theme(plot.margin = unit(c(1,9,2,1), "cm"))
ggsave('../data/F3_current_178_changing.pdf',
width = 210, height = 297, units = "mm", device = 'pdf', plot = combined, dpi = 300)
f3_AUC <- ggboxplot(dat_entero_wide,
x="groups",add = 'jitter',
y="trap", color  = 'groups', add.params = list(alpha = 0.5)) +
ylab("Trapezoidal\nAUC")+xlab('') +
scale_color_manual(values = c('gray76','#ffbcdc','gray32','deeppink2')) +
scale_y_log10(breaks = c(1 %o% 10^(-1:8)),  labels = trans_format("log10", math_format(10^.x))) +
stat_compare_means(comparisons = my_comparisons,label= "p.signif", method= 'wilcox.test',tip.length = 0.04,exact=T,correct=T) +
theme(axis.text.x = element_blank(),axis.title=element_text(size=10), axis.text =  element_text(size = 10),legend.position = 'none',aspect.ratio=1/3.1, axis.ticks.x = element_blank())
f3_AUC <- ggboxplot(dat_entero_wide,
x="groups",add = 'jitter',
y="trap", color  = 'groups', add.params = list(alpha = 0.5)) +
ylab("Trapezoidal\nAUC")+xlab('') +
scale_color_manual(values = c('gray76','#ffbcdc','gray32','deeppink2')) +
scale_y_log10(breaks = c(1 %o% 10^(-1:8)),  labels = trans_format("log10", math_format(10^.x))) +
stat_compare_means(comparisons = my_comparisons,label= "p.signif", method= 'wilcox.test',tip.length = 0.04,exact=T,correct=T) +
theme(axis.text.x = element_blank(),axis.title=element_text(size=10), axis.text =  element_text(size = 10),legend.position = 'none',aspect.ratio=1/3.1, axis.ticks.x = element_blank())
f3_AUC
f3_AUC <- ggboxplot(dat_entero_wide,
x="groups",add = 'jitter',
y="trap", color  = 'groups', add.params = list(alpha = 0.5, shape = 16)) +
ylab("Trapezoidal\nAUC")+xlab('') +
scale_color_manual(values = c('gray76','#ffbcdc','gray32','deeppink2')) +
scale_y_log10(breaks = c(1 %o% 10^(-1:8)),  labels = trans_format("log10", math_format(10^.x))) +
stat_compare_means(comparisons = my_comparisons,label= "p.signif", method= 'wilcox.test',tip.length = 0.04,exact=T,correct=T) +
theme(axis.text.x = element_blank(),axis.title=element_text(size=10), axis.text =  element_text(size = 10),legend.position = 'none',aspect.ratio=1/3.1, axis.ticks.x = element_blank())
f3_AUC
f3_days <- plotdf %>%
ggboxplot(x = 'xvar', y = 'CFUs_per_GramStool',add = 'jitter',
xlab = '', ylab = 'Enterococcal\n CFU/gram',, add.params = list(alpha = 0.5, shape = 16),
width = 0.6,color  = 'grp')+
scale_color_manual(values = c('gray76','#ffbcdc','gray32','deeppink2')) +
stat_compare_means(comparisons = list(c('biapenem__vehicle__3','biapenem__sucrose__3'), c('biapenem__vehicle__6','biapenem__sucrose__6')),label= "p.signif", method= 'wilcox.test',tip.length = 0.04,exact=T,correct=T) +
scale_y_log10(breaks = c(1 %o% 10^(-1:12)),  labels = trans_format("log10", math_format(10^.x))) +
scale_x_discrete(labels=rep(c(0,3,6),4)) +
theme(axis.text =  element_text(size = 10),axis.title=element_text(size=10),legend.position = 'none',aspect.ratio=1/1.3)
f3_days
# assemble
title <- ggdraw() +
draw_label(
"Fig. 3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 5)
)
f3 <- plot_grid(correbar, entero_panel,f3_days, f3_AUC, label_size = 12, ncol = 1,labels = c('A','B','C', NA),
align = 'vh', axis = 'lrtb', rel_heights = c(1,1.55,1, 0.55))
combined <- plot_grid(
title, f3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.05, 1)
)+theme(plot.margin = unit(c(1,9,2,1), "cm"))
ggsave('../data/F3_current_178_changing.pdf',
width = 210, height = 297, units = "mm", device = 'pdf', plot = combined, dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
library(officer)
library(tidyverse)
library(readxl)
author.filename <- "../data/Author_list_diversity_manuscript_2019-06-10.xlsx"
df <- read_excel(author.filename)
View(df)
df <- read_excel(author.filename)
df <- df[,colSums(is.na(df))<nrow(df)] # remove na columns
df <- df[rowSums(is.na(df))<ncol(df),]  # remove na rows
# add placeholder dummies so that each author has at least one primary affiliation
df$Affiliation1[is.na(df$Affiliation1)] <- "placeholder.institution"
# melt so that a unique ID can be assigned to each affiliation
df.m <- df %>%
arrange(Order.listed) %>%
select(-Equal.contribution, -Order.listed, -Degree.with.periods., -email) %>%  #  remove extra columns
reshape2::melt(id.vars = c("Name_with_middle_initial"),
variable.name = "affiliation.ordinal",
value.name = "affiliation")
View(df.m)
# pull in author order
df.m <-df.m %>%
left_join(
select(df, one_of(c("Name_with_middle_initial", "Order.listed"))),
by = "Name_with_middle_initial")
View(df)
knitr::opts_chunk$set(echo = TRUE)
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
set.seed(1)
meta <- read_csv('../data/153_combined_META.csv')
library(tidyverse)
library(ggpubr)
library(scales)
library(tidybayes)
library(cowplot)
theme_set(theme_pubr(base_size = 8))
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
set.seed(1)
meta <- read_csv('../data/153_combined_META.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$changed_relab, method = c( "spearman"), exact = T)
return(list(genus = .y, rho = spearman_cor$estimate, pval = spearman_cor$p.value))
} )
# the smallest nonzero p value
pvals <- spearman_res %>%
filter(pval > 0)
tinypseudo <- min(pvals$pval)/10
# show the % of the samples that have the relab of the genus > 10^-4
perc_thre <- g_relab %>%
count(genus, relab > 10^-4) %>%
filter(`relab > 10^-4` == 'TRUE') %>%
mutate(passthre_perc = round(n/1009*100, 0))
spearman_all <- spearman_res %>%
left_join(perc_thre) %>%
mutate(n = ifelse(is.na(n), 0, n),
passthre_perc = ifelse(is.na(passthre_perc), 0, passthre_perc)) %>%
filter(passthre_perc > 10) %>%
mutate(changed_pval = if_else(pval == 0, pval + tinypseudo, pval)) %>%
mutate(padj = p.adjust(changed_pval, method = 'BH'),
neglogp = -log10(padj)) %>%
mutate(sig05 = if_else(padj < 0.05, 'FDR < 0.05', 'FDR >= 0.05')) %>%
mutate(Correlation = if_else(rho >= 0, 'higher diversity', 'lower diversity')) %>%
arrange(rho, desc(genus))
spearman_all %>% write_csv('../data/172_spearman_all.csv')
res <- read_csv('../data/172_spearman_all.csv') %>%
mutate(Correlation = factor(Correlation, levels = c('lower diversity','higher diversity')))
# make a panel with only top 5 significant ones in either direction for the main figure 3
main <- res %>%
filter(sig05 == 'FDR < 0.05') %>%
split(.$Correlation) %>%
map(function(df){
df %>% mutate(absrho = abs(rho)) %>% slice_max(order_by =absrho, n = 5 )
}) %>% bind_rows()
correbar <- main %>%
ggbarplot(x = 'genus', y = 'rho', orientation = c( "horizontal"),
sort.val = "desc",   fill = "Correlation",  color = "white",    palette = "jco",     sort.by.groups = F,     ylab = "Spearman correlation",    xlab = '') +
theme(legend.position = c(.8,.8),axis.text=element_text(size=10),axis.title=element_text(size=10),legend.text  = element_text(size=8), legend.title = element_text(size = 8),
aspect.ratio=1/1.3) +
guides(fill = guide_legend(title = "Correlated with"))
correbar
View(spearman_res)
View(spearman_all)
library(vdbR)
connect_database()
list_table_from_database('blast')
get_table_from_database('asv_annotation_blast_detailed_ag')
View(asv_annotation_blast_detailed_ag)
get_table_from_database('asv_blast_ag')
get_table_from_database('asv_annotation_blast_ag')
View(asv_annotation_blast_ag)
View(g_relab)
get_counts_subset(c('FMT.0161O'))
tt <- get_counts_subset(c('FMT.0161O'))
View(tt)
tt <- get_counts_subset(c('FMT.0161O')) %>%
inner_join(asv_annotation_blast_ag %>% select(asv_key, genus))
S1583C <- get_counts_subset(c('1583C'))
S1583C <- get_counts_subset(c('1583C'))%>%
inner_join(asv_annotation_blast_ag %>% select(asv_key, genus))
View(S1583C)
g_relab
highs <- g_relab %>%
filter(relab > 10^-4 & genus == 'Loriellopsis')
View(highs)
highs
them <- get_counts_subset(highs %>% pull(sampleid))
View(them)
them <- get_counts_subset(highs %>% pull(sampleid))%>%
inner_join(asv_annotation_blast_ag %>% select(asv_key, genus)) %>%
filter(genus == 'Loriellopsis')
View(them)
why <- asv_annotation_blast_detailed_ag %>%
filter(asv_key %in% them$asv_key)
View(why)
# ok so the annotation is wrong they didn't even pass the alignment
# so need to find correct ones
list_table_from_database('asv')
get_table_from_database('asv_sequences_ag')
View(asv_annotation_blast_ag)
View(why)
# get the asv sequences
seqs <- asv_sequences_ag %>%
filter(asv_key %in% why$asv_key)
View(seqs)
seqs
library(seqinr)
seqs
seqs
write.fasta(sequences = as.list(seqs$asv_sequence),
names = seqs$asv_key,
file.out = str_glue('../data/178_Loriellopsis_asv.fasta'))
View(asv_annotation_blast_detailed_ag)
asv_annotation_blast_detailed_ag
false <- asv_annotation_blast_detailed_ag %>%
filter(passed == FALSE)
View(false)
false
false <- asv_annotation_blast_detailed_ag %>%
filter(passed == FALSE) %>%
distinct(pident_97,passed )
why <- asv_annotation_blast_detailed_ag %>%
filter(asv_key %in% them$asv_key)
View(why)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
View(g_relab)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
mutate(genus = if_else(genus == 'Loriellopsis', NA,genus ))
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
mutate(genus = if_else(genus == 'Loriellopsis', NA,genus )) %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
set.seed(1)
meta <- read_csv('../data/153_combined_META.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
mutate(genus = if_else(genus == 'Loriellopsis', NA,genus )) %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$changed_relab, method = c( "spearman"), exact = T)
return(list(genus = .y, rho = spearman_cor$estimate, pval = spearman_cor$p.value))
} )
# the smallest nonzero p value
pvals <- spearman_res %>%
filter(pval > 0)
tinypseudo <- min(pvals$pval)/10
# show the % of the samples that have the relab of the genus > 10^-4
perc_thre <- g_relab %>%
count(genus, relab > 10^-4) %>%
filter(`relab > 10^-4` == 'TRUE') %>%
mutate(passthre_perc = round(n/1009*100, 0))
View(g_relab)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
mutate(genus = if_else(genus == 'Loriellopsis', NA,genus )) %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
mutate(genus = if_else(genus == 'Loriellopsis', NA,genus )) %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
mutate(pseudotiny = runif(nrow(.), min = 0, max = 10^-10) ) %>%
mutate(changed_relab = relab + pseudotiny)
View(g_relab)
# show the % of the samples that have the relab of the genus > 10^-4
perc_thre <- g_relab %>%
count(genus, relab > 10^-4) %>%
filter(`relab > 10^-4` == 'TRUE') %>%
mutate(passthre_perc = round(n/1009*100, 0))
perc_thre <- g_relab %>%
count(genus, relab > 10^-4)
g_relab
g_relab
perc_thre <- g_relab %>%
count(genus, relab > 10^-4)
