exposed_empirical <- empirical_med_oral1 %>%
mutate(drug_int =  interval(start_date, stop_date)) %>%
inner_join(p2d_df, by = "mrn") %>%
mutate(had_drug = int_overlaps(p2d_int, drug_int)) %>%
filter(had_drug == 'TRUE')
exposed_empirical %>% distinct(sampleid) %>% nrow
exposed_empirical %>% distinct(MRN) %>% nrow
# for batch 2, the same method is used
stb2 <- read_rds('../data/137_stb.rds')
stb2_exposed <- stb2 %>%
filter(empirical == 'TRUE')
stb2_exposed %>% distinct(sampleid) %>% nrow
stb2_exposed %>% distinct(mrn) %>% nrow
# prepare the tables for taxUMAP
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb2 <- read_rds('../data/136_updated_dtb2.rds') %>% mutate(Food_code = as.numeric(Food_code))
all.equal(colnames(dtb1), colnames(dtb2))
# the weight need to be relative so needs to normalize them
fc_table <- bind_rows(dtb1, dtb2) %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
group_by(mrn, fdrt, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
ungroup() %>%
mutate(index_column = str_glue('P{mrn}_{fdrt}')) %>%
select(index_column, Food_code, total)
fc_total <- fc_table %>%
group_by(index_column) %>%
summarise(daily_total = sum(total))
fc_df <- fc_table %>%
left_join(fc_total) %>%
mutate(daily_relative = total/daily_total) %>%
select(index_column,Food_code, daily_relative ) %>%
spread('Food_code', 'daily_relative', fill = 0)
fc_df %>% write_csv('../data/143_food_code_relative.csv')
actual_foodids <- as.character(fc_table$Food_code)
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(ASV = FoodID, Kingdom = L1, Phylum = L2, Class = L3, Order = L4)
food_taxa %>% write_csv('../data/143_food_taxa.csv')
# ~/pipeline/scripts/food_tree/softwares/taxumap/run_taxumap.py -t 143_food_taxa.csv -m 143_food_code_relative.csv --agg_levels Kingdom/Phylum -n 173 --weights 1/0.5 --outdir batch_all_taxumap_kingdom_and_phylum
# the resulted coords from taxUMAP
pt1 <- unique(dtb1$mrn)
pt2 <- unique(dtb2$mrn)
out <- read_csv('../data/batch_all_taxumap_kingdom_and_phylum/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt)) %>%
mutate(batch = if_else(mrn %in% pt1, 'batch1', if_else(mrn %in% pt2, 'batch2', 'NA')))
# to see the distribution of the two batches
out %>%
arrange(fdrt ) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'batch', palette = 'nejm', alpha = 0.1, facet.by = 'batch') +
theme(aspect.ratio = 1, legend.position = 'right')
knitr::opts_chunk$set(echo = TRUE)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')%>% mutate(Food_code = as.character(Food_code))
knitr::opts_chunk$set(echo = TRUE)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
dtb1_check <- dtb1 %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, Calories_kcal/Energy_kcal*100)) %>%
mutate(dehydrated_weight = if_else(total_weight == 99999, 0.0001, total_weight*(1 - Water_g/100))) %>%
mutate(check = if_else(dehydrated_weight > 30 & Water_g > 75, T, F))
dtb1_unchanged <- dtb1_check %>%
filter(check == 'FALSE')%>%
select(colnames(dtb1))
dtb1_change <- dtb1_check %>%
filter(check == 'TRUE')
# EN ones have the food code we created and the dehydrated weight are converted from the wet weight
dtb1_EN <- dtb1 %>%
filter(Unit == 'EN unit')
dtb1_change
checktotal <- dtb1_change %>%
distinct(Food_NSC, Unit, .keep_all = T )
# the unique items with the checked values
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check2 <- read_csv('../data/136_check_2_batch_cal_peter.csv')
# the ones that are checked in batch 2
check1_already <- read_csv('../data/136_check_1_batch_cal.csv')  %>%
left_join(check2 %>% distinct(Food_NSC, Unit) %>% mutate(grp = 'checked')) %>%
filter(grp == 'checked')  %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check1_all <- bind_rows(check1, check1_already)
# need to expand the 295 to 1934
all_portions <- dtb1_change %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(check1_all, by = c("Food_NSC",  "Por_eaten", "Unit"))
split_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
select(-Calories_kcal, -ratio) %>%
rename(Calories_kcal = scaled_cal) %>%
distinct()
# expand to have other columns
total_dtb1_change <- dtb1_change %>%
select(-Calories_kcal) %>%
inner_join(split_all_portions, by = c("Food_NSC",  "Por_eaten", "Unit")) %>%
select(mrn:fdrt, Calories_kcal) %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, Calories_kcal/Energy_kcal*100)) %>%
mutate(dehydrated_weight = if_else(total_weight == 99999, 0.0001, total_weight*(1 - Water_g/100))) %>%
select(colnames(dtb1))
#total_dtb1_change %>% write_csv('../data/140_changed_calories_in_batch1.csv')
# combine them together ...
dtb1_final <- bind_rows(dtb1_unchanged, total_dtb1_change, dtb1_EN)
View(split_all_portions)
213.5/14*4
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
225/14*4
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(total_dtb1_change)
View(all_portions)
split_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
View(dtb1_change)
dtb1_change
dtb1_change
dtb1_change
total_dtb1_change
total_dtb1_change
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb1)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check2 <- read_csv('../data/136_check_2_batch_cal_peter.csv')
View(check1)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
check1 <- read_csv('../data/136_check_1_batch_cal_new_peter.csv') %>%
select(Food_NSC, Por_eaten:Calories_kcal)
# now I know why the same Food_NSC doesn't have corrected values for a smaller portion
# it's cuz it doesn't meet the dehydrated_weight > 30 & Water_g > 75 threshold
# below is to make a correction using one item as example for the showing purpose to Jonas
# 2014, Juice,  Apple
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
View(vetted_by_peter)
all_portions <- dtb1 %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter, by = c("Food_NSC",  "Por_eaten", "Unit"))
View(all_portions)
all_portions <- dtb1 %>%
select(Food_NSC,  Por_eaten, Unit) %>%
inner_join(vetted_by_peter, by = c("Food_NSC",  "Por_eaten", "Unit"))
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple')
View(all_portions)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
inner_join(vetted_by_peter)
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter)
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,  Por_eaten, Unit) %>%
left_join(vetted_by_peter)
all_portions
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
View(scale_all_portions)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
View(engy)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)','')))
engy
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
dtb1
vetted_by_peter <- check1 %>% filter(Food_NSC == '2014, Juice,  Apple')
all_portions <- dtb1 %>%
filter(Food_NSC == '2014, Juice,  Apple') %>%
select(Food_NSC,Food_code,   Por_eaten, Unit) %>%
left_join(vetted_by_peter)
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
scale_all_portions
engy
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows()
engy
all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')
scale_all_portions <- all_portions %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')  %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, scaled_cal/Energy_kcal*100))
knitr::opts_chunk$set(echo = TRUE)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
library(tidyverse)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized_OLD.csv')
View(dtb1)
df <- dtb1 %>% distinct(Unit)
View(df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
View(engy)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# the below data has the vetted calories and the total weight in grams
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx')
View(vet)
# the current dtb1
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb1)
# the final expanded table should be the same number 22840
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_NSC, Por_eaten, Unit)
View(allcombo)
vet
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_NSC, Por_eaten, Unit) %>%
left_join(vet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g = weight_grams))
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_NSC, Por_eaten, Unit) %>%
left_join(vet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g = weight_grams), by = c("Food_NSC", "Unit", "Por_eaten"))
View(allcombo)
allcombo <- dtb1 %>%
distinct(Food_NSC, Por_eaten, Unit)
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_NSC, Por_eaten, Unit) %>%
left_join(vet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g = weight_grams), by = c("Food_NSC", "Unit", "Por_eaten"))
View(allcombo)
View(allcombo)
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0)
View(scale_all_combos)
View(scale_all_combos)
View(scale_all_combos[["2017 Tea, Chamomile 6 oz.bag"]])
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio)
})
View(scale_all_combos)
View(scale_all_combos[["Grapes,American Type(Slip Skin),Raw, grape.each"]])
View(scale_all_combos[["2017 Bottled Water 16.9 oz.each"]])
allcombo
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})
View(scale_all_combos)
View(scale_all_combos[["2017 Eggs, Hard Boiled, Whole Egg - 2 Eggs (0) BR.egg"]])
View(scale_all_combos[["2017 Eggs, Hard Boiled, Whole Egg - 2 Eggs (0) BR.egg"]])
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Energy_kcal, Water_g) %>%
mutate(Energy_kcal = as.numeric(Energy_kcal),
Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
View(engy)
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
dtb1
allcombo <- dtb1 %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
left_join(vet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g = weight_grams), by = c("Food_NSC", "Unit", "Por_eaten"))
View(allcombo)
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')
View(scale_all_combos)
View(engy)
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Water_g) %>%
mutate(Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code))
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows() %>%
left_join(engy, by  = 'Food_code')
View(scale_all_combos)
View(scale_all_combos)
View(dtb1)
scale_all_combos
scaled <- scale_all_combos %>%
select(Food_NSC:Food_code, Calories_kcal = scaled_cal, total_g = scaled_total_g, description = Main_food_description, Water_g)
View(scaled)
View(dtb1)
# the below data has the vetted calories and the total weight in grams
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx')
# the current dtb1
# the final expanded table should be the same number 22840
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
dtb1
scaled <- scale_all_combos %>%
select(Food_NSC:Food_code, Calories_kcal = scaled_cal, total_g = scaled_total_g, description = Main_food_description, Water_g) %>%
mutate(dehydrated_weight = total_g*(1-Water_g/100))
View(scaled)
allcombo <- dtb1 %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit)
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
left_join(vet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g = weight_grams), by = c("Food_NSC", "Unit", "Por_eaten"))
View(scaled)
View(dtb1)
dtb1
# now expand all of the unique combos to the whole dtb1
dtb_ <- dtb1 %>%
select(mrn:Por_eaten, Food_code:fdrt)
View(dtb_)
# now expand all of the unique combos to the whole dtb1
dtb_ <- dtb1 %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(scaled)
# now expand all of the unique combos to the whole dtb1
dtb_ <- dtb1 %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(scaled, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code", "description"))
View(dtb_)
View(vet)
View(vet)
View(scaled)
View(scale_all_combos)
View(vet)
View(vet)
View(vet)
View(vet)
View(scale_all_combos)
View(vet)
View(vet)
View(dtb_)
