strip.background = element_blank(),
strip.text = element_blank())
View(key)
key
all_pred %>%
left_join(key %>% rename(term = fg1_name) %>% select(term, shortname)) %>%
inner_join(fg_val_summary_all)
all_pred %>%
left_join(key %>% rename(term = fg1_name) %>% select(term, shortname)) %>%
inner_join(fg_val_summary_all) %>%
filter(type != 'ave') %>%
mutate(xtext = str_glue('{shortname} {type}: {ori_value}g')) %>%
ggboxplot( data = ., x = 'xtext', y = 'pred_div', fill = 'term',
xlab = '') +
facet_grid(term ~ ., scales = 'free') +
scale_fill_manual(values = c('#7D3C98','#db2589','#229954')) +
coord_flip() +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank())
all_pred %>%
left_join(key %>% rename(term = fg1_name) %>% select(term, shortname)) %>%
inner_join(fg_val_summary_all) %>%
filter(type != 'ave') %>%
mutate(xtext = str_glue('{shortname} {type}: {ori_value}g')) %>%
ggboxplot( data = ., x = 'xtext', y = 'pred_div', fill = 'term',
xlab = '', ylab = 'Predicted alpha diversity') +
facet_grid(term ~ ., scales = 'free') +
scale_fill_manual(values = c('#7D3C98','#db2589','#229954')) +
coord_flip() +
theme_classic() +
theme(legend.position = 'none',
strip.background = element_blank(),
strip.text = element_blank())
View(dtb)
knitr::opts_chunk$set(echo = TRUE)
entero <- read_csv('../data/cleaned_diet_data/TPN_EN patients.csv')
View(entero)
en <- read_csv('../data/cleaned_diet_data/NutritionSupport_DietPatients.csv')
View(en)
en
en %>%
filter(`Nutrition Support` == 'TPN')
en %>%
filter(`Nutrition Support` == 'TPN') %>%
distinct(MRN)
knitr::opts_chunk$set(echo = TRUE)
library(phytools)
library(tidyverse)
library(vdbR)
library(vdbR)
knitr::opts_chunk$set(echo = TRUE)
library(phytools)
library(tidyverse)
library(vdbR)
connect_database('~/dbConfig.txt')
tre <- read.newick('../data/cleaned_tree/output_food_tree_datatree.newick')
leaves <- tibble(
fcode = tre$tip.label
)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
n_meal <- dtb %>%
count(mrn, fdrt, Meal) %>%
nrow()
matching <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccc')
food_code_sum <- dtb %>%
group_by(Food_code) %>%
summarise(fc_sum = sum(dehydrated_weight)) %>%
mutate(Food_code = as.character(Food_code))  %>%
filter(Food_code %in% leaves$fcode)
food_code_sum_ <- food_code_sum[order(leaves$fcode),]
all.equal(food_code_sum_$Food_code , leaves$fcode)  #I'm fine with 3 mismatches. they are very close anyway
# make the circular bar plot
bars <- food_code_sum_ %>%
mutate(per_meal_ave = round(fc_sum/n_meal, 3)) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
left_join(matching, by = "fgrp1") %>%
mutate(fg1_name = factor(fg1_name, levels = c('fg_egg', 'fg_oils', 'fg_legume', 'fg_fruit', 'fg_sweets', 'fg_milk','fg_meat', 'fg_veggie', 'fg_grain' ))) %>%
arrange(fg1_name)
food_code_level <- bars %>% pull(Food_code)
bars_ <- bars %>%
mutate(Food_code = factor(Food_code, levels = food_code_level))
View(bars)
View(dtb)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(tidybayes)
library(brms)
library(rstan)
#devtools::install_github("zeehio/facetscales")
library(facetscales)
options(mc.cores = parallel::detectCores())
ncores = parallel::detectCores()
rstan_options(auto_write = TRUE)
axis_text_size <- 10
axis_title_size <- 10
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
full <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
byday <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(daycal = sum(Calories_kcal),
d_protein = sum(Protein_g),
d_fat = sum(Fat_g),
d_carb = sum(Carbohydrates_g),
d_fiber = sum(Fibers_g),
d_sugar = sum(Sugars_g)) %>%
rename(drt = fdrt) %>%
inner_join(full %>%
rename(drt = sdrt) %>%
select(mrn,drt, simpson_reciprocal, intensity, empirical, TPN, EN, Actinomyces: Veillonella), by = c("mrn", "drt")) %>%
mutate(timebin = cut_width(drt, 7, boundary=0, closed = 'left')) %>%
mutate(mrn = factor(mrn)) %>%
mutate(d_fiber = d_fiber/100,
d_fat = d_fat/100,
d_protein = d_protein/100,
d_sugar = d_sugar/100,
d_carb = d_carb/100,
daycal = daycal/1000
) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0)) %>%
ungroup()
byday_original <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(daycal = sum(Calories_kcal),
d_protein = sum(Protein_g),
d_fat = sum(Fat_g),
d_carb = sum(Carbohydrates_g),
d_fiber = sum(Fibers_g),
d_sugar = sum(Sugars_g)) %>%
rename(drt = fdrt) %>%
inner_join(full %>%
rename(drt = sdrt) %>%
select(mrn,drt, simpson_reciprocal, intensity, empirical, TPN, EN, Actinomyces: Veillonella), by = c("mrn", "drt")) %>%
ungroup()
byday %>% write_csv('../data/089_sameday_diet_and_microbiome.csv')
macro_panel <- byday_original %>%
mutate(simpson_reciprocal_nlog  = log(simpson_reciprocal)) %>%
rename(`log10(Blautia)` = Blautia,
`log10(Enterococcus)` = Enterococcus,
`log(Simpson reciprocal)` = simpson_reciprocal_nlog) %>%
dplyr::select(`log(Simpson reciprocal)`, `log10(Blautia)`, `log10(Enterococcus)`,  daycal:d_sugar ) %>%
mutate(daycal = daycal/1000) %>%  # now divide the value by 1000 to save some space in x axis text!!!
gather('yaxis', 'value', `log(Simpson reciprocal)`:`log10(Enterococcus)`) %>%
mutate(yaxis = factor(yaxis, levels = c('log(Simpson reciprocal)','log10(Blautia)','log10(Enterococcus)'))) %>%
gather('xaxis', 'number', daycal:d_sugar) %>%
mutate(xaxis = factor(xaxis, levels = c('daycal','d_carb','d_sugar','d_fiber','d_protein','d_fat'))) %>%
mutate(xaxis = if_else(str_detect(xaxis, '^d_'), str_replace(xaxis, 'd_',''), str_replace(xaxis, '^day','')),
xaxis = if_else(str_detect(xaxis, 'cal'), str_replace(xaxis, 'cal','caloric'), xaxis),
xaxis = str_to_title(xaxis),
xaxis = str_glue('Daily {xaxis} Intake')) %>%
mutate(xaxis = factor(xaxis, levels = c('Daily Caloric Intake','Daily Carb Intake','Daily Sugar Intake','Daily Fiber Intake','Daily Protein Intake','Daily Fat Intake')))
library(facetscales)
scales_y <- list(
`log(Simpson reciprocal)` = scale_y_continuous(limits = c(0, 4), breaks = seq(0, 4, 1)),
`log10(Blautia)` = scale_y_continuous(limits = c(-6, 0), breaks = seq(-6, 0, 2)),
`log10(Enterococcus)` = scale_y_continuous(limits = c(-6, 0), breaks = seq(-6, 0, 2))
)
scales_x <- list(
`Daily Caloric Intake` = scale_x_continuous(limits = c(0, 3.3), breaks = seq(0, 3.3, 1)),
`Daily Protein Intake` = scale_x_continuous(limits = c(0, 170), breaks = seq(0, 170, 50)),
`Daily Fat Intake` = scale_x_continuous(limits = c(0, 165), breaks = seq(0, 165, 50)),
`Daily Carb Intake` = scale_x_continuous(limits = c(0, 410), breaks = seq(0, 410, 100)),
`Daily Fiber Intake` = scale_x_continuous(limits = c(0, 80), breaks = seq(0, 80, 20)),
`Daily Sugar Intake` = scale_x_continuous(limits = c(0, 325), breaks = seq(0, 325, 100) )
)
macro_facets <- macro_panel %>%
ggscatter(x = 'number', y = 'value', alpha = 0.05, xlab = '', ylab = '',size = 1.2,
add = "reg.line",  # Add regressin line
add.params = list(color = "darkblue", fill = "gray59"), # Customize line
conf.int = TRUE, # Add confidence interval
) +
facet_grid_sc(rows = vars(yaxis), cols = vars(xaxis), scales = list(y = scales_y, x = scales_x)) +
theme_classic(base_size = 11) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = "gray97"),
panel.grid.major = element_blank(),
strip.background = element_blank(),
strip.text = element_blank(),
panel.grid.minor = element_blank()
)
ggsave('../figs/paper/S2_sameday_macronutrients_microbiome_089.pdf',
width = 180,
units = c("mm"),
plot = macro_facets)
# since I need to annotate the p value of the slope I can't do it in facet wrap
# need to manually arrange them
# calculate the p value of the slopes
pvals <- macro_panel %>%
split(., list(.$xaxis, .$yaxis)) %>%
map(function(df) {
res = summary(lm(value ~ number, data = df ))
return(pval = round(res$coefficients[2, 'Pr(>|t|)'], 3))
})
#
# dfs <- macro_panel %>%
#   split(., list(.$xaxis, .$yaxis))
#
# panels <- list()
#
#
# for (i in 1: length(dfs)){
#   panels[[i]] <- dfs[[i]] %>%
#   ggscatter(x = 'number', y = 'value', alpha = 0.05, xlab = '', ylab = '',size = 1.2,
#              add = "reg.line",  # Add regressin line
#            add.params = list(color = "darkblue", fill = "lightgray"), # Customize line
#            conf.int = TRUE # Add confidence interval
#            ) +
#   theme_classic(base_size = 11) +
#   theme(aspect.ratio = 1,
#         panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank()
#        )  +
#   annotate("text", x = 100, y = 0, label = str_glue("paste(italic(p), \" = {pvals[[i]]}\")"), parse = TRUE)
# }
# names(panels) <- names(dfs)
library(gridExtra)
n <- length(dfs)
citation("vegan")
library(vegan)
citation("vegan")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(tidybayes)
library(brms)
library(rstan)
options(mc.cores = parallel::detectCores())
ncores = parallel::detectCores()
rstan_options(auto_write = TRUE)
axis_text_size <- 10
axis_title_size <- 10
full <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
target_genera <- read_csv('../data/target_genera.csv') %>%
pull(genus)
# the high correlation between fat and protein
fat_pro_cor <- full %>%
ggscatter(x = 'ave_fat', y = 'ave_Protein', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average protein intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_pro_cor %>% write_rds('../data/090_fat_pro_cor.rds')
alpha_macro_fat <- log(simpson_reciprocal) ~ 1 +
ave_fiber +
ave_fat +
ave_Sugars +
inten_non + inten_ab + inten_re +
EN +
TPN +
empirical +
(1 | mrn) +
(1 | timebin)
priors_alpha_macro_fat <- c(
# for the macro nutrients
prior(normal(0, 0.4), class = 'b', coef = "ave_fiber"),
prior(normal(0, 0.4), class = 'b', coef = "ave_fat"),
prior(normal(0, 0.4), class = 'b', coef = "ave_Sugars"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
# for the intercept
prior(normal(2, 0.5), class = 'Intercept'))
# vet the prior
model_alpha_macro_fat  <- brm( alpha_macro_fat,
data = full,
warmup = 1000, iter = 3000,
prior = priors_alpha_macro_fat,
control = list(adapt_delta = 0.99),
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
mean_macro <-  full %>%
select(starts_with('ave_')) %>%
summarise_all(funs(mean))
mean_ave_macro_fat_prior <- prior_draws(model_alpha_macro_fat) %>%
mutate(mean_div = Intercept +
b_ave_fiber * mean_macro$ave_fiber+
b_ave_fat * mean_macro$ave_fat+
b_ave_Sugars * mean_macro$ave_Sugars+
b_inten_re ) %>%
select(mean_div) %>%
mutate(grp = 'mean_macro_fat') %>%
rename(prior_res = mean_div) %>%
select(grp, prior_res)
# plot the above model post coeff
post_coeff <- posterior_samples(model_alpha_macro_fat, '^b_') %>%
select(starts_with('b_ave')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = case_when(
item ==  'fiber' ~ 'Fibers',
item == 'fat' ~ 'Fat',
TRUE ~ item
))  %>%
mutate(item = fct_reorder(item, coeff, .fun=median, .desc = F))
macronutrients_alpha_main <- post_coeff %>%
ggplot(aes(x = coeff, y = item)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
labs(x = 'Coefficients',
y = 'Macronutrients',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
macronutrients_alpha_main %>%
write_rds('../data/090_macronutrients_alpha_main.rds')
# the binary vars
coeff_bi <- posterior_samples(model_alpha_macro_fat, '^b_')  %>%
select(!starts_with('b_ave')) %>%
select(-b_Intercept) %>%
gather('item', 'coeff') %>%
mutate(item_name = case_when(
item ==  'b_inten_non' ~ 'Intensity: nonablative',
item == 'b_inten_ab' ~ 'Intensity: ablative',
item ==  'b_inten_re' ~ 'Intensity: reduced',
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
)) %>%
mutate(item_name = factor(item_name, levels = c('Intensity: nonablative', 'Intensity: reduced',
'Intensity: ablative', 'TPN exposure','EN exposure',
'Empirical abx exposure')))
macronutrients_alpha_factor <- coeff_bi %>%
ggplot(aes(x = coeff, y = item_name)) +
stat_pointinterval(.width = c(.66, .95)) +
#scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed') +
labs(x = 'Coefficients',
y = 'Factor variables',
title = expression(Microbiome~alpha~diversity)) +
theme_classic() +
theme(legend.position = 'none',
axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
macronutrients_alpha_factor %>%
write_rds('../data/090_macronutrients_alpha_factor.rds')
View(post_coeff)
?median_qi
post_coeff
# get the value of the actual 66% and 95% CI
post_coeff %>%
group_by(item) %>%
median_qi(predicted, .width = c(.66, .95))
post_coeff
# get the value of the actual 66% and 95% CI
post_coeff %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95))
# get the value of the actual 66% and 95% CI
post_coeff %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95)) %>%
distinct()
full
# the correlation between fat and caloric intake
full %>%
ggscatter(x = 'ave_fat', y = 'ave_cal', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average protein intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
# the correlation between fat and caloric intake
full %>%
ggscatter(x = 'ave_fat', y = 'ave_cal', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average caloric intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
# the correlation between fat and caloric intake
fat_cal_cor <- full %>%
ggscatter(x = 'ave_fat', y = 'ave_cal', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average caloric intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
fat_cal_cor %>% write_rds('../data/090_fat_cal_cor.rds')
knitr::opts_chunk$set(echo = TRUE)
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
fat_cal_cor
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
corr <- read_rds('../data/090_fat_pro_cor.rds')
alpha_main <- read_rds('../data/090_macronutrients_alpha_main.rds')
alpha_factor <- read_rds('../data/090_macronutrients_alpha_factor.rds')
alpha <-  plot_grid(corr, fat_cal_cor,  alpha_main,alpha_factor,
nrow = 2, labels = c('A','B', 'C', "D"),  align = 'hv', axis = 'tblr')
library(tidyverse)
library(cowplot)
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
corr <- read_rds('../data/090_fat_pro_cor.rds')
alpha_main <- read_rds('../data/090_macronutrients_alpha_main.rds')
alpha_factor <- read_rds('../data/090_macronutrients_alpha_factor.rds')
alpha <-  plot_grid(corr, fat_cal_cor,  alpha_main,alpha_factor,
nrow = 2, labels = c('A','B', 'C', "D"),  align = 'hv', axis = 'tblr')
alpha
genus_main <- read_rds('../data/090_genus_macro_fat_main.rds')
genus_factor <- read_rds('../data/090_genus_macro_fat_factor.rds')
genus <-  plot_grid(  genus_main,genus_factor,
nrow = 2, labels = c('E','F'),
rel_heights  = c(1, 1),
align = 'v', axis = 'lb')
genus
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 2),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S4_macronutrients_alpha_and_genus_093.pdf',
width = 240,
height = 250,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 2),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S4_macronutrients_alpha_and_genus_093.pdf',
width = 240,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S4_macronutrients_alpha_and_genus_093.jpg',
width = 240,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
full
full %>%
ggscatter(x = 'ave_fat', y = 'ave_Sugars', alpha = 0.2, point = 16,
xlab = 'Average fat intake', ylab = 'Average sugar intake',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))+
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
View(coeff_bi)
coeff_bi
coeff_bi %>%
group_by(item) %>%
median_qi(coeff, .width = c(.66, .95))
post_df <- read_csv('../data/078_genus_macro_fat_model_post.csv')
post_df <- read_csv('../data/078_genus_macro_fat_model_post.csv')
post_res_genera <- post_df %>%
select(genus, starts_with('b_ave')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = if_else(item == 'Fiber', 'Fibers', item))
View(post_res_genera)
