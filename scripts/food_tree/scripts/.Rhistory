#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F)) %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
post_diff_df
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
ggsave('../figs/paper/fg9_post_diff.png',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-4.1, 14)
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-4.1, 12)
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
ggsave('../figs/paper/fig2_fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
knitr::opts_chunk$set(echo = TRUE)
fns <- list.files('../data/growth/irep/bhatirep/', full.names = T, pattern = '.tsv')
irep <- fns %>%
set_names(fns) %>%
purrr::map(~  read_tsv(file = ., n_max = 1 , col_types = 'cc',  skip = 2, col_names = c('bin','iRep')) %>%  select(iRep) ) %>%
bind_rows(.id = 'fn') %>%
mutate(fn = str_replace(fn, '_irep.tsv$',''),
fn = str_replace(fn, '../data/growth/irep/bhatirep//','')) %>%
separate(fn, into = c('sampleid','samplebin'), sep = '__concat__', remove = T) %>%
mutate(iRep = as.numeric(iRep)) %>%
mutate(samplebin = str_replace(samplebin, '_irep_dastool.tsv','')) %>%
mutate(sbid = str_glue('{sampleid}__{samplebin}'))
View(irep)
# after the dastool, do the drep to de-replicate
drep <- read_delim('../data/growth/bhatpipeline/all_derepliated_genomes.txt', col_names = F, delim = ' ') %>%
select(X9) %>%
separate(X9, into = c('Sample','bin'), remove = F, sep = '__concat__')
View(drep)
all <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
View(all)
all <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
View(all)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .))
View(tb)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))
tb
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75)
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
# combined %>%
#   mutate(gt15 = if_else(iRep > 1.5, T, F)) %>%
#   count(gt15) %>%
#   mutate(perc = n/sum(n)*100)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
# combined %>%
#   mutate(gt15 = if_else(iRep > 1.5, T, F)) %>%
#   count(gt15) %>%
#   mutate(perc = n/sum(n)*100)
# meta data of the samples
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
View(tb)
View(tb)
# ignore the NA irep values for now
dat <- tb %>%
filter(!is.na(iRep))
combined <- dat %>%
inner_join(meta , by = "sampleid") %>%
select(sampleid, iRep, sbid, mrn, best_level, best_species, starts_with('fg'), simpson_reciprocal, empirical)
combined %>%
select(-mrn) %>%
write_csv('../data/growth/irep_with_diet_for_jonas.csv')
combined <- dat %>%
inner_join(meta , by = "sampleid") %>%
select(sampleid, iRep, sbid, mrn, best_level, best_species, starts_with('fg'), simpson_reciprocal, empirical)
View(combined)
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
# save this table , very important
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
View(combined)
5/845
# check the coverage of these bins
fns <- list.files('../data/growth/irep/coverage_from_sam/', pattern = 'txt')
covs <- read_tsv(fns[1])
# check the coverage of these bins
fns <- list.files('../data/growth/irep/coverage_from_sam/', pattern = 'txt')
covs <- read_tsv(fns[1])
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(vdbR)
library(ggpubr)
connect_database('~/dbConfig.txt')
get_table_from_database("asv_annotation_blast_color_ag");
library(tidyverse)
library(ggpubr)
# to see the relative abundance of those taxa
# to get the top and bottom three taxa of the lefse results
res <- list.files('data/amplicon/lefse/', pattern = 'asv_tcts.tsv.res$', full.names = T)
# gather the species level taxa in the lefse significant results
res_all <- res %>%
set_names(res) %>%
purrr::map(~ read_tsv(., col_names = c('feature','xx','direction','score','pval')) %>%
filter(!is.na(score))) %>%
keep(~ nrow(.) > 0) %>%
bind_rows(.id = 'res') %>%
mutate(res = str_replace(res, '^.+//',''),
res = str_replace(res, '_asv.+$',''))  %>%
rename(grp = res) %>%
filter(grp %in% c('pull_cr_d100','pull_toxicity')) %>%
mutate(feature = str_replace_all(feature, '\\.','\\|')) %>%
#split(., list(.$grp, .$direction)) %>%
#map_dfr(~ top_n(x = ., n = 4, wt = score) %>% arrange(-score)) %>%
# filter(str_detect(feature, 's__.+$')) %>%
# filter(!str_detect(feature, 'a__.+$')) %>%
filter(str_detect(feature, 'g__.+$')) %>%
filter(!str_detect(feature, 's__.+$')) %>%
mutate(feature = str_replace(feature, '^.+g__','')) %>%
mutate(feature = str_replace(feature, '_Clostridium_', '[Clostridium]')) %>%
ungroup()
# plot the relab of those taxa (at species level) in boxplot
# get the species counts of the sampels
cts_spp <- cts_ %>%
full_join(annot %>%  select(asv_key, species), by  = 'asv_key') %>%
select(-asv_key)  %>%
gather('sampleid', 'relab', names(.)[1]:names(.)[ncol(.)-1]) %>%
group_by(sampleid, species) %>%
summarise(Relab = sum(relab)) %>%
select(sampleid, species, Relab) %>%
left_join(meta %>% select(sampleid, cr_d100, toxicity), by = 'sampleid') %>%
ungroup()
# sort out the asv counts table and also do filtering (need to have all taxa levels)
meta <- read_csv('data/amplicon/stool/combined_2_meta.csv')
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('asv_annotation_blast_ag')
cts <- get_counts_subset(meta$sampleid)
cts_ <- cts %>%
select(asv_key, sampleid, count_relative) %>%
spread(key = 'sampleid', value = 'count_relative', fill = 0)
annot <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts_$asv_key) %>%
mutate(ordr =  if_else(is.na(ordr), str_glue('unknown_of_class_{class}'), ordr),
family =  if_else(is.na(family), str_glue('unknown_of_order_{ordr}'), family),
genus =  if_else(is.na(genus) , str_glue('unknown_of_family_{family}'), genus),
species =  if_else(is.na(species) , str_glue('unknown_of_genus_{genus}'), species)) %>%
mutate(taxa_asv = str_glue('k__{kingdom}|p__{phylum}|c__{class}|o__{ordr}|f__{family}|g__{genus}|s__{species}|a__{asv_key}'))
cts_all <- cts_ %>%
full_join(annot %>%  select(asv_key, taxa_asv), by  = 'asv_key') %>%
select(-asv_key)  %>%
gather('sampleid', 'relab', names(.)[1]:names(.)[ncol(.)-1]) %>%
left_join(meta %>% select(sampleid, cr_d100, toxicity), by = 'sampleid')
# the asv to keep
# keep the asvs that show up in at least 25% of the samples
keepg <- cts_all %>%
filter(relab > 0.0001) %>%
ungroup() %>%
count(taxa_asv) %>%
filter(n > floor(nrow(meta) * 0.25)) %>%
pull(taxa_asv)
cts_fil <- cts_all %>%
filter(taxa_asv %in% keepg) %>%
spread('sampleid', 'relab', fill = 0)
# to see the relative abundance of those taxa
# to get the top and bottom three taxa of the lefse results
res <- list.files('data/amplicon/lefse/', pattern = 'asv_tcts.tsv.res$', full.names = T)
# gather the species level taxa in the lefse significant results
res_all <- res %>%
set_names(res) %>%
purrr::map(~ read_tsv(., col_names = c('feature','xx','direction','score','pval')) %>%
filter(!is.na(score))) %>%
keep(~ nrow(.) > 0) %>%
bind_rows(.id = 'res') %>%
mutate(res = str_replace(res, '^.+//',''),
res = str_replace(res, '_asv.+$',''))  %>%
rename(grp = res) %>%
filter(grp %in% c('pull_cr_d100','pull_toxicity')) %>%
mutate(feature = str_replace_all(feature, '\\.','\\|')) %>%
#split(., list(.$grp, .$direction)) %>%
#map_dfr(~ top_n(x = ., n = 4, wt = score) %>% arrange(-score)) %>%
# filter(str_detect(feature, 's__.+$')) %>%
# filter(!str_detect(feature, 'a__.+$')) %>%
filter(str_detect(feature, 'g__.+$')) %>%
filter(!str_detect(feature, 's__.+$')) %>%
mutate(feature = str_replace(feature, '^.+g__','')) %>%
mutate(feature = str_replace(feature, '_Clostridium_', '[Clostridium]')) %>%
ungroup()
# plot the relab of those taxa (at species level) in boxplot
# get the species counts of the sampels
cts_spp <- cts_ %>%
full_join(annot %>%  select(asv_key, species), by  = 'asv_key') %>%
select(-asv_key)  %>%
gather('sampleid', 'relab', names(.)[1]:names(.)[ncol(.)-1]) %>%
group_by(sampleid, species) %>%
summarise(Relab = sum(relab)) %>%
select(sampleid, species, Relab) %>%
left_join(meta %>% select(sampleid, cr_d100, toxicity), by = 'sampleid') %>%
ungroup()
cts_genus <- cts_ %>%
full_join(annot %>%  select(asv_key, genus), by  = 'asv_key') %>%
select(-asv_key)  %>%
gather('sampleid', 'relab', names(.)[1]:names(.)[ncol(.)-1]) %>%
group_by(sampleid, genus) %>%
summarise(Relab = sum(relab)) %>%
select(sampleid, genus, Relab) %>%
left_join(meta %>% select(sampleid, cr_d100, toxicity), by = 'sampleid') %>%
ungroup()
joined <- cts_genus %>%
inner_join(res_all, by = c('genus' = 'feature'))
# finally I can do the plotting
pull_cr_d100 <- joined  %>%
filter(grp == 'pull_cr_d100') %>%
ggboxplot(x = 'cr_d100', y = 'Relab', add = 'jitter', title = 'Outcome: cr_d100') +
facet_wrap(direction ~ genus, scales="free_y")
pull_cr_d100
ggsave('figs/amplicon/lefse_taxa_crd100.pdf', width = 15, height = 13, plot = pull_cr_d100)
View(joined)
# check the box plot in detail again
joined %>%
filter()
joined
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus')
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus') %>%
filter(grp == 'pull_cr_d100')
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus') %>%
filter(grp == 'pull_cr_d100') %>%
split(.$cr_d100)
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus') %>%
filter(grp == 'pull_cr_d100') %>%
split(.$cr_d100) %>%
map(~ meidan(.$Relab))
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus') %>%
filter(grp == 'pull_cr_d100') %>%
split(.$cr_d100) %>%
map(~ median(.$Relab))
# check the box plot in detail again
joined %>%
filter(genus == 'Ruminococcus') %>%
filter(grp == 'pull_cr_d100') %>%
split(.$cr_d100) %>%
map(~ median(.$Relab)*100)
