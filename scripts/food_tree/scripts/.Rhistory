# so basically run every model and extract the priors later
## all family model run
ret <- target_family %>%
set_names(target_family) %>%
purrr::map(function(fam) {
mod =  brm( as.formula(str_glue('{fam}  ~
1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = All,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
source("~/Downloads/MSK/MSS_pipeline-/scripts/database_related/create_new_postgres_user_vbdlab.R", echo=TRUE)
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"docampom",
"slingerj",
"nguyenc1",
"daia1",
"markeyk",
"armijog",
"miltiado",
"andrlovh",
"lindners",
"breretod",
"giardinp",
"khann2",
"zuanellc",
"hatfielp",
"clurmana",
"smithm4",
#"test_user"
"adintorp",
"ngb",
"chens8",
"elkriefa",
"mab4025",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
# save the data
prior_df <- ret %>%
imap(~ prior_draws(.x) ) %>%
bind_rows(.id = .y)
# save the data
prior_df <- ret %>%
imap(~ prior_draws(.x) )
View(prior_df)
# save the data
prior_df <- ret %>%
imap(~ prior_draws(.x) ) %>%
bind_rows(.id = 'family')
View(prior_df)
prior_df %>%
write_csv('../data/054_family_model_prior.csv')
post_df <- ret %>%
imap(~ (suppressWarnings(posterior_samples(.x)) %>%
select(starts_with('b_fg')) %>%
gather('item','coeff') %>%
mutate(family = .y)))  %>%
bind_rows()
View(post_df)
post_df <- ret %>%
imap(~ (suppressWarnings(posterior_samples(.x))))  %>%
bind_rows(.id = 'family')
View(post_df)
post_df <- ret %>%
imap(~ (suppressWarnings(posterior_samples(.x)) %>%
select(-starts_with('r_mrn'))))  %>%
bind_rows(.id = 'family')
post_df <- ret %>%
imap(~ (suppressWarnings(posterior_samples(.x)) %>%
select(-starts_with('r_'))))  %>%
bind_rows(.id = 'family')
post_df <- ret %>%
imap(~ (suppressWarnings(posterior_samples(.x)) %>%
select(-starts_with('r_'))))  %>%
bind_rows(.id = 'family')
post_df %>%
write_csv('../data/054_family_model_post.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
# grab the quantiles for the 95% and 75% confidence interval from the posterior samples
post_df <- read_csv('../data/054_family_model_post.csv')
# grab the quantiles for the 95% and 75% confidence interval from the posterior samples
post_df <- read_csv('../data/054_family_model_post.csv')
# grab the quantiles for the 95% and 75% confidence interval from the posterior samples
post_df <- read_csv('../data/054_family_model_post.csv')
post_df %>%
select(starts_with('b_fg'))
post_res <- post_df %>%
select(starts_with('b_fg'))
View(post_res)
post_res <- post_df %>%
select(starts_with('b_fg')) %>%
gather('item','coeff') %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875)) %>%
ungroup() %>%
mutate(sig = if_else(q97.5 < 0 | q2.5 > 0, T, F)) %>%
mutate(mark = if_else(sig == T, '*','')) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
View(post_df)
post_res <- post_df %>%
select(family, starts_with('b_fg'))
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875)) %>%
ungroup() %>%
mutate(sig = if_else(q97.5 < 0 | q2.5 > 0, T, F)) %>%
mutate(mark = if_else(sig == T, '*','')) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
100-97.5
2.5/2
100-1.25
1.25/100
0.5/100
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
#mutate(sig = if_else(q97.5 < 0 | q2.5 > 0, T, F)) %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', ''))))
post_df <- read_csv('../data/054_family_model_post.csv')
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
)
# grab the quantiles for the 95% (star) and 75% (color) confidence interval from the posterior samples
# two stars for 97.5% and three stars for 99%
post_df <- read_csv('../data/054_family_model_post.csv')
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
# grab the quantiles for the 95% (star) and 75% (color) confidence interval from the posterior samples
# two stars for 97.5% and three stars for 99%
post_df <- read_csv('../data/054_family_model_post.csv')
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
# grab the quantiles for the 95% (star) and 75% (color) confidence interval from the posterior samples
# two stars for 97.5% and three stars for 99%
post_df <- read_csv('../data/054_family_model_post.csv')
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
# grab the quantiles for the 95% (star) and 75% (color) confidence interval from the posterior samples
# two stars for 97.5% and three stars for 99%
post_df <- read_csv('../data/054_family_model_post.csv')
post_res <- post_df %>%
select(family, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(family, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(family = str_replace(family, '._Incertae_Sedis','')) %>%
mutate(item = str_replace(item, 'b_fg_',''))
col_key <- post_res %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
ggplot(post_res, aes(x = item, y = family)) +
geom_tile(aes(fill = color,  x = item,y =  family), alpha = 0.5, color='white', width=0.95, height=0.95) +
# geom_text(aes(label = round(meanperitem, 3))) +
geom_text(aes(label = mark, x = item,y =  family),
nudge_y = -0.3, nudge_x = 0,size = 8) +
scale_fill_manual(values = col_key, labels = c('Effects too small','75% CI < 0 negative','75% CI > 0 positive')) +
theme_light() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'bottom',
legend.key = element_rect( colour = "gray50"),
panel.background = element_blank())
ggsave('../figs/paper/heatmap_family_24_ggplot.pdf', width = 7, height = 5)
knitr::opts_chunk$set(echo = TRUE)
library(phytools)
library(tidyverse)
library(vdbR)
connect_database('~/dbConfig.txt')
tre <- read.newick('../data/cleaned_tree/output_food_tree_datatree.newick')
leaves <- tibble(
fcode = tre$tip.label
)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
matching <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccc')
food_code_sum <- dtb %>%
group_by(Food_code) %>%
summarise(fc_sum = sum(dehydrated_weight)) %>%
mutate(Food_code = as.character(Food_code))  %>%
filter(Food_code %in% leaves$fcode)
food_code_sum_ <- food_code_sum[order(leaves$fcode),]
all.equal(food_code_sum_$Food_code , leaves$fcode)  #I'm fine with 3 mismatches. they are very close anyway
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, Main.food.description)
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character()))
View(tree_df)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, Main.food.description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
# make the circular bar plot
bars <- food_code_sum_ %>%
mutate(log10gram = log10(fc_sum + 1)) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
left_join(matching, by = "fgrp1") %>%
mutate(fg1_name = factor(fg1_name, levels = c('fg_egg', 'fg_oils', 'fg_legume', 'fg_fruit', 'fg_sweets', 'fg_milk','fg_meat', 'fg_veggie', 'fg_grain' ))) %>%
arrange(fg1_name)
food_code_level <- bars %>% pull(Food_code)
bars_ <- bars %>%
mutate(Food_code = factor(Food_code, levels = food_code_level))
fill_val <- bars %>%
distinct(fg1_name, color) %>%
deframe()
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, Main.food.description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, description)
# the newick string for the nodes
tree_df <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv', col_types = cols(.default = col_character())) %>%
select(FoodID, description)
# make the circular bar plot
bars <- food_code_sum_ %>%
mutate(log10gram = log10(fc_sum + 1)) %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
left_join(matching, by = "fgrp1") %>%
mutate(fg1_name = factor(fg1_name, levels = c('fg_egg', 'fg_oils', 'fg_legume', 'fg_fruit', 'fg_sweets', 'fg_milk','fg_meat', 'fg_veggie', 'fg_grain' ))) %>%
arrange(fg1_name)
food_code_level <- bars %>% pull(Food_code)
bars_ <- bars %>%
mutate(Food_code = factor(Food_code, levels = food_code_level))
fill_val <- bars %>%
distinct(fg1_name, color) %>%
deframe()
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(Main.food.description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(Main.food.description, key, ring_level, value)
ring <- bars_ %>%
select(Food_code, ring_height = log10gram, ring_color = color) %>%
mutate(#ring_height = round(ring_height, 1)/10,
Food_code = as.character(Food_code)) %>%
full_join(tree_df %>% select(Food_code = FoodID, description)) %>%
select(description, ring_height:ring_color) %>%
mutate(ring_width = 0.5) %>%
gather('key','value', ring_height:ring_width) %>%
mutate(ring_level = 1) %>%
select(description, key, ring_level, value)
ring %>%
write_tsv('../data/source/ring_annot.txt', col_names = F)
# add the annotation marker for the example daily meal for that patient
dm5 <-  read_csv('../data/cleaned_diet_data/example_pt_dm5_diet.csv') %>%
inner_join(tree_df %>% mutate(Food_code = as.numeric(FoodID))) %>%
mutate(log10wt = log10(dehydrated_weight))
clade_markder <- dm5 %>%
select(Main.food.description, clade_marker_color = color) %>%
mutate(clade_marker_shape = '.',
clade_marker_size = 100,
clade_marker_edge_color = 'white') %>%
gather('key','value', clade_marker_color:clade_marker_edge_color)
# add the annotation marker for the example daily meal for that patient
dm5 <-  read_csv('../data/cleaned_diet_data/example_pt_dm5_diet.csv') %>%
inner_join(tree_df %>% mutate(Food_code = as.numeric(FoodID))) %>%
mutate(log10wt = log10(dehydrated_weight))
clade_markder <- dm5 %>%
select(description, clade_marker_color = color) %>%
mutate(clade_marker_shape = '.',
clade_marker_size = 100,
clade_marker_edge_color = 'white') %>%
gather('key','value', clade_marker_color:clade_marker_edge_color)
clade_markder %>%
write_tsv('../data/source/clade_annot_marker.txt', col_names = F)
ring_itself <- tibble(
ring_level = c(1, 2),
ring_internal_separator_thickness = 0.1,
ring_external_separator_thickness = 0.1,
ring_label_font_size = 5,
ring_separator_color = 'black'
) %>%
gather('key', 'value', ring_internal_separator_thickness:ring_separator_color) %>%
select(key, ring_level, value) %>%
write_tsv('../data/source/ring_annot_marker.txt', col_names = F)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(Main.food.description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(Main.food.description, key, ring_level, value)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(Main.food.description, key, ring_level, value)
# add the day meal log2 wt for the food code to the second ring
ring2 <- dm5 %>%
mutate(ring_height = log10wt) %>%
select(description, ring_color = color, ring_height) %>%
mutate(ring_alpha = 0.5,
ring_width = 1) %>%
gather('key','value', ring_color:ring_width) %>%
mutate(ring_level = 2) %>%
select(description, key, ring_level, value)
ring2 %>% write_tsv('../data/source/ring2.txt', col_names = F)
