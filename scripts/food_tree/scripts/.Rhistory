legend.position = 'none',legend.text=element_text(size=8),
legend.key = element_rect( colour = "gray50"))
genus_fg_extra
entero <- read_csv('../data/087_Enterococcus_model_fg_post.csv') %>%
mutate(genus = 'Enterococcus') %>%
relocate(genus, .before = b_fg_fruit)
extra5 <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv')
post <- bind_rows(entero, extra5) %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
# calculate the percentage of interval that is >|< 0 for each genus/food combo
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
perc_side <- post %>%
group_by(genus,item ) %>%
count(coeff >= 0) %>%
mutate(perc = round(n/4000, 2)) %>%
mutate(side = if_else(`coeff >= 0` == 'TRUE', 'positive', 'negative')) %>%
ungroup() %>%
select(genus, item, perc, side) %>%
spread('side', 'perc') %>%
mutate(item = str_replace(item, 'b_','')) %>%
left_join(key %>% select(item = fg1_name, shortname), by = "item") %>%
mutate(color = if_else(positive >= 0.75, 'maroon', if_else(negative >= 0.75, 'steelblue', 'white'))) %>%
mutate(mark = if_else(negative >= 0.99 | positive >= 0.99, '***', if_else(negative >= 0.975 | positive >= 0.975, '**', if_else(negative >= 0.95 | positive >= 0.95, '*', '')))) %>%
# order the columns by the number of stars in the columns
mutate(genus = factor(genus,
levels =c('Enterococcus','Klebsiella','Escherichia','Enterobacter','Citrobacter','Cronobacter'))) %>%
mutate(shortname = factor(shortname, levels = fg_order))
col_key <- perc_side %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
genus_fg_extra <- ggplot(perc_side, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = color,  x = genus, y =  shortname), alpha = 0.5, color='gray0', width=1, height=1) +
geom_text(aes(label = mark, x = genus,y =  shortname),
nudge_y = -0.05, nudge_x = 0,size = 3) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, size=axis_text_size),
axis.text.y=element_text(size=axis_text_size, hjust=0.95,vjust=0.2),
axis.title=element_text(size=axis_title_size),
legend.position = 'none',legend.text=element_text(size=8),
legend.key = element_rect( colour = "gray50"))
genus_fg_extra
entero <- read_csv('../data/087_Enterococcus_model_fg_post.csv') %>%
mutate(genus = 'Enterococcus') %>%
relocate(genus, .before = b_fg_fruit)
extra5 <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv')
post <- bind_rows(entero, extra5) %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
entero <- read_csv('../data/087_Enterococcus_model_fg_post.csv') %>%
mutate(genus = 'Enterococcus') %>%
relocate(genus, .before = b_fg_fruit)
extra5 <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv')
post <- bind_rows(entero, extra5) %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)])
# calculate the percentage of interval that is >|< 0 for each genus/food combo
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
perc_side <- post %>%
group_by(genus,item ) %>%
count(coeff >= 0) %>%
mutate(perc = round(n/4000, 2)) %>%
mutate(side = if_else(`coeff >= 0` == 'TRUE', 'positive', 'negative')) %>%
ungroup() %>%
select(genus, item, perc, side) %>%
spread('side', 'perc') %>%
mutate(item = str_replace(item, 'b_','')) %>%
left_join(key %>% select(item = fg1_name, shortname), by = "item") %>%
mutate(color = if_else(positive >= 0.75, 'maroon', if_else(negative >= 0.75, 'steelblue', 'white'))) %>%
mutate(mark = if_else(negative >= 0.99 | positive >= 0.99, '***', if_else(negative >= 0.975 | positive >= 0.975, '**', if_else(negative >= 0.95 | positive >= 0.95, '*', '')))) %>%
# order the columns by the number of stars in the columns
mutate(genus = factor(genus,
levels =c('Enterococcus','Klebsiella','Escherichia','Enterobacter','Citrobacter','Cronobacter'))) %>%
mutate(shortname = factor(shortname, levels = fg_order))
col_key <- perc_side %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
genus_fg_extra <- ggplot(perc_side, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = color,  x = genus, y =  shortname), alpha = 0.5, color='gray0', width=1, height=1) +
geom_text(aes(label = mark, x = genus,y =  shortname),
nudge_y = -0.05, nudge_x = 0,size = 3) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_void() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=90, hjust=1, size=axis_text_size),
axis.text.y=element_text(size=axis_text_size, hjust=0.95,vjust=0.2),
axis.title=element_text(size=axis_title_size),
legend.position = 'none',legend.text=element_text(size=8),
legend.key = element_rect( colour = "gray50"))
ggsave('../data/120_log10_extra_genera6.pdf', width =  60,plot = genus_fg_extra,
height = 70,
units = c("mm"),
dpi = 400)
genus_fg_extra
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
dtb <- read_csv('../data/152_combined_DTB.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
# the top 10 most consumed in fruits , sweets and veggie item
# total number of meals
n_meal <- dtb %>%
count(mrn, fdrt, Meal) %>%
nrow()
top_milk <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('1'))
View(top_milk)
top_milk <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('1')) %>%
group_by(Food_code, description, fgrp1) %>%
summarise(total_per_code = sum(dehydrated_weight)) %>%
group_by(fgrp1) %>%
arrange(desc(total_per_code), .by_group = T)  %>%
top_n(10) %>%
left_join(key) %>%
ungroup() %>%
mutate(gram_per_meal = total_per_code/n_meal)
log(30)
knitr::opts_chunk$set(echo = TRUE)
# the broad spectrum abx data
b2med <- read_csv('../data/137_batch2_empircal_oral.csv')
View(b2med)
knitr::opts_chunk$set(echo = TRUE)
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
#abx <- read_rds('/Volumes/vandenbrinklab/Nutrition and microbiota/medication_exposures/meds_nutrition_batch1_2022-11-29.rds')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
ptb %>% write_rds('../data/cleaned_patients/diet_patients_97.rds')
meta %>% distinct(mrn)
#abx <- read_rds('/Volumes/vandenbrinklab/Nutrition and microbiota/medication_exposures/meds_nutrition_batch1_2022-11-29.rds')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
ptb %>% write_rds('../data/cleaned_patients/diet_patients_97.rds')
meta %>% distinct(mrn)
#abx <- read_rds('/Volumes/vandenbrinklab/Nutrition and microbiota/medication_exposures/meds_nutrition_batch1_2022-11-29.rds')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
ptb <- read_csv('../data/cleaned_patients/diet_patients_97.csv') %>%
mutate(patient_in_model = if_else(mrn %in% meta$mrn, T, F))
ptb %>% write_rds('../data/cleaned_patients/diet_patients_97.rds')
meta %>% distinct(mrn)
picked <-  c('vancomycin', 'imipenem_cilastatin','meropenem','ertapenem', 'cefepime', 'linezolid','metronidazole','piperacillin_tazobactam')
med1 <- read_rds('../data/tasks_nutrition_batch1_2022-11-29.rds') %>%
select(MRN, start_date, stop_date, drug_name, route) %>%
mutate(drug_name_clean = str_replace_all(drug_name, '-', '_')) %>%
mutate(drug_name_clean = str_to_lower(drug_name_clean),
mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn)
med1 <- read_rds('../data/tasks_nutrition_batch1_2022-11-29.rds') %>%
select(MRN, start_date, stop_date, drug_name, route) %>%
mutate(drug_name_clean = str_replace_all(drug_name, '-', '_')) %>%
mutate(drug_name_clean = str_to_lower(drug_name_clean),
mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn)
empirical_med1 <- med1 %>%
filter(drug_name_clean %in% picked) %>%
select(-drug_name) %>%
mutate(together = str_glue('{drug_name_clean}__{route}')) %>%
filter(! together %in% c('vancomycin__IV','vancomycin__IVPB'))
empirical_med1 %>% write_csv('../data/134_batch1_empirical_abx.csv')
b1med <- read_csv('../data/134_batch1_empirical_abx.csv')
b1med <- read_csv('../data/134_batch1_empirical_abx.csv')
View(b2med)
View(b1med)
both <- bind_rows(b1med, b2med)
View(both)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(compositions)
library(brms)
library(ggpubr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
meta <- read_csv('../data/153_combined_META.csv')
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('asv_annotation_blast_ag')
cts <- get_counts_subset(meta$sampleid)
cts_ <- cts %>%
select(asv_key, sampleid, count)
annot <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts_$asv_key)
cts_all <- cts_ %>%
left_join(annot %>%  select(asv_key, genus), by  = 'asv_key') %>%
group_by(sampleid, genus) %>%
summarise(cnt = sum(count)) %>%
spread('sampleid', 'cnt', fill = 0) %>%
filter(!is.na(genus)) %>%
column_to_rownames('genus')
clr_res <- clr(cts_all + 0.5) %>%
as.data.frame()  %>%
rownames_to_column('genus') %>%
gather('sampleid','clr', names(.)[2]:names(.)[ncol(.)])
# I need to see the distribution of the actual genus transformed counts
few <- read_csv('../data/087_extra_6_genus_name.csv')
meta <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
clr_few <- clr_res %>% filter(genus %in% few$genus) %>%
spread('genus','clr')
extra_full <- meta %>%
inner_join(clr_few)
priors <- c(# for the food group variables
prior(normal(0, 1.2), class = 'b', coef = "fg_egg"),
prior(normal(0, 1.2), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1.2), class = 'b', coef = "fg_grain"),
prior(normal(0, 1.2), class = 'b', coef = "fg_legume"),
prior(normal(0, 1.2), class = 'b', coef = "fg_meat"),
prior(normal(0, 1.2), class = 'b', coef = "fg_milk"),
prior(normal(0, 1.2), class = 'b', coef = "fg_oils"),
prior(normal(0, 1.2), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1.2), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE")
# for the intensity
#prior(normal(-3, 1), class = 'b', coef = "intensityreduced"),
#prior(normal(-3, 1), class = 'b', coef = "intensityablative"),
#prior(normal(-3, 1), class = 'b', coef = "intensitynonablative")
)
genus6 <- few %>% pull(genus)
genus6 <- few %>% pull(genus)
ret_genus6_interaction <- genus6 %>%
set_names(genus6) %>%
purrr::map(function(genus) {
mod =  brm( as.formula(str_glue('{genus}  ~
0 +
fg_fruit*empirical+
fg_meat*empirical+
fg_milk*empirical+
fg_oils*empirical+
fg_egg*empirical+
fg_grain*empirical+
fg_sweets*empirical+
fg_legume*empirical+
fg_veggie*empirical+
intensity +
TPN+
EN+
(1 | mrn) +
(1 | timebin)')),
data = extra_full,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 456, sample_prior = T)
})
post_df <- ret_genus6_interaction %>%
imap(~ (suppressWarnings(posterior_samples(.x)) ))  %>%
bind_rows(.id = 'genus')
post_df %>%
write_csv('../data/171_genus6_foodgroup_model_post_extra_few_interaction.csv')
post <- read_csv('../data/171_genus6_foodgroup_model_post_extra_few_interaction.csv')
View(post)
post <- read_csv('../data/171_genus6_foodgroup_model_post_extra_few_interaction.csv')
post <- read_csv('../data/171_genus6_foodgroup_model_post_extra_few_interaction.csv')
colnames(post)
ret_genus6_interaction$Enterococcus
plot(ret_genus6_interaction$Enterococcus)
meta <- read_csv('../data/153_combined_META.csv')
View(meta)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(compositions)
library(brms)
library(ggpubr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
library(tidyverse)
library(compositions)
library(brms)
library(ggpubr)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
ncores <- parallel::detectCores()
post <- read_csv('../data/171_genus6_foodgroup_model_post_extra_few_interaction.csv')
View(post)
colnames(post)
View(post)
View(post)
View(post)
colnames(post)
colnames(post)
# the coefficients for the b_fg
b_fg_coeff <- post %>% select(starts_with('b_fg'))
View(b_fg_coeff)
colnames(post)
# the coefficients for the b_fg
b_fg_coeff <- post %>% select(starts_with('b_fg')) %>% select(-`b_fg_fruit:empiricalTRUE`)
View(b_fg_coeff)
# the coefficients for the b_fg
b_fg_coeff <- post %>% select(starts_with('b_fg')) %>% select(-`b_fg_fruit:empiricalTRUE`)
b_fg_coeff <- post %>% select(starts_with('b_fg')) %>% select(-`b_fg_fruit:empiricalTRUE`)
View(b_fg_coeff)
View(b_fg_coeff)
View(b_fg_coeff)
View(b_fg_coeff)
# the coefficients for the b_fg
b_fg_coeff <- post %>% select(starts_with('b_fg')) %>% select(-`b_fg_fruit:empiricalTRUE`) %>%
gather('item','coeff')
b_fg_coeff
b_fg_coeff
b_fg_coeff
# to look at the distribution of those coefficients
b_fg_coeff %>% gghistogram(x = 'coeff', facet.by = 'item')
# to look at the distribution of those coefficients
b_fg_coeff %>% gghistogram(x = 'coeff', facet.by = 'item') +
geom_vline(xintercept = 0, col = 'black', linetype = 'dashed')
# to look at the distribution of those coefficients
b_fg_coeff %>% gghistogram(x = 'coeff', facet.by = 'item') +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed')
colnames(post)
# to look at the distribution of the coeff for the interaction terms
b_intera <- post %>% select(str_detect('empiricalTRUE'))
# to look at the distribution of the coeff for the interaction terms
b_intera <- post %>% select(contains('empiricalTRUE'))
View(b_intera)
colnames(b_intera)
# to look at the distribution of the coeff for the interaction terms
b_intera <- post %>% select(contains('empiricalTRUE')) %>% select(-`b_empiricalTRUE`,-`rior_b_empiricalTRUE`)
# to look at the distribution of the coeff for the interaction terms
b_intera <- post %>% select(contains('empiricalTRUE')) %>% select(-`b_empiricalTRUE`,-`prior_b_empiricalTRUE`)
colnames(b_intera)
# to look at the distribution of the coeff for the interaction terms
b_intera <- post %>% select(contains('empiricalTRUE')) %>% select(-`b_empiricalTRUE`,-`prior_b_empiricalTRUE`) %>% gather('item','coeff')
b_intera %>% gghistogram(x = 'coeff', facet.by = 'item') +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed')
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(tidyverse)
library(ggpubr)
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv')
View(g_relab)
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
meta <- read_csv('../data/153_combined_META.csv')
meta
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
View(g_relab)
g_relab %>% summary
g_relab %>%
ggscatter( x = 'simpson_reciprocal', y = 'relab',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n"))
g_relab
g_relab %>%
ggscatter( x = 'simpson_reciprocal', y = 'relab', facet.by = 'genus',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n"))
g_relab
# just calculate the spearman correlation and p value
g_relab %>%
split(.$genus) %>%
imap(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
} )
View(g_relab)
g_relab
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
select(-simpson_reciprocal) %>%
spread('genus','relab')
View(g_relab)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
select(-simpson_reciprocal) %>%
spread('genus','relab')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal)) %>%
select(-simpson_reciprocal) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)])
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)])
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
# just calculate the spearman correlation and p value
g_relab %>%
split(.$genus) %>%
imap(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
} )
# just calculate the spearman correlation and p value
g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
} )
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv')
View(g_relab)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
spearman_rho = round(spearman_cor$estimate, 2)
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
# just calculate the spearman correlation and p value
g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
} )
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
} )
View(spearman_res)
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
return(list(rho = spearman_rho, pval = spearman_pval))
} )
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
return(list(rho = spearman_rho, pval = spearman_pval))
} )
View(spearman_res)
return(list(genus = .y, rho = spearman_rho, pval = spearman_pval))
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
return(list(genus = .y, rho = spearman_rho, pval = spearman_pval))
} )
View(spearman_res)
