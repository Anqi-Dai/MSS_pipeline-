post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv', col_select = c(1:10))
post_extra <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv', col_select = c(1:10))
View(post_df)
View(post_extra)
length(intersect(post_df$genus, post_extra$genus))
intersect(post_df$genus, post_extra$genus)
unique(post_extra$genus)
post_res_genera <- post_df %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0)
View(post_res_genera)
# post_extra <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv', col_select = c(1:10))
# length(intersect(post_df$genus, post_extra$genus))
# unique(post_extra$genus)
# post_all <- bind_rows(post_df, post_extra)
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
# post_extra <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv', col_select = c(1:10))
# length(intersect(post_df$genus, post_extra$genus))
# unique(post_extra$genus)
# post_all <- bind_rows(post_df, post_extra)
fg_order <- read_csv('../data/068_fg_sorting_order.csv') %>% pull(shortname)
post_res_genera <- post_df %>%
select(genus, starts_with('b_fg')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE') %>%
mutate(item = str_replace(item, 'b_','')) %>%
left_join(key %>% select(item = fg1_name, shortname), by = "item") %>%
mutate(shortname = factor(shortname, levels = fg_order))
genus_fg_main <- ggplot(post_res_genera, aes(x = genus, y = shortname)) +
geom_tile(aes(fill = perc,  x = genus, y =  shortname), alpha = 0.5, color='white', width=0.95, height=0.95) +
theme_pubr() +
scale_fill_gradient(low = "white", high = "#F8766D") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=10),
axis.text.y=element_text(size=10),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
panel.background=element_rect(colour="black"),
legend.key = element_rect( colour = "gray50"))
genus_fg_main
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE')
View(post_bi_res)
# the factors for the genus-fg
post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv', col_select = c(1, 14:16))
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE')
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE')
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE') %>%
mutate(item_name = case_when(
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
))
# the factors for the genus-fg
post_df <- read_csv('../data/087_genus_foodgroup_model_post.csv', col_select = c(1, 14:16))
# post_extra <- read_csv('../data/087_genus_foodgroup_model_post_extra_few.csv', col_select = c(1, 14:16))
#
# post_all <- bind_rows(post_df, post_extra)
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
count(coeff > 0) %>%
mutate(perc = round(n/4000*100, 2)) %>%
filter(`coeff > 0` == 'TRUE') %>%
mutate(item_name = case_when(
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
))
genus_fg_factor <- ggplot(post_bi_res, aes(x = genus, y = item_name)) +
geom_tile(aes(fill = perc,  x = genus, y =  item_name), alpha = 0.5, color='white', width=0.95, height=0.95) +
scale_fill_gradient(low = "white", high = "#F8766D") +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background = element_rect(colour="black"))
genus_fg_factor
# stack the two heatmap together
library(cowplot)
heatmap <-  plot_grid(  genus_fg_main,genus_fg_factor,
nrow = 2, labels = c('A','B'), rel_heights  = c(1, 0.6), align = 'hv', axis = 'tblr')
ggsave( '../data/S8_heatmap_fg_genus_087.pdf',
width = 270,
height = 220,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf', plot = heatmap)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(brms)
library(ggpubr)
library(tidybayes)
ncores <- parallel::detectCores()
# clean the data for the second batch
df2 <- read_rds('/Volumes/vandenBrinkLab/Angel_Dai/batch2_medication_exposures.rds')
View(df2)
ptb <- read_csv('../data/129_ptb2.csv')
narcotic <- df2 %>%
filter(is_narcotic == "Y") %>%
filter(grepl("PCA", med_name)) %>%
mutate(mrn = as.numeric(MRN)) %>%
filter(mrn %in% ptb$mrn) %>%
select(mrn, start_date, stop_date)
View(df2)
colnames(df2)
knitr::opts_chunk$set(echo = TRUE)
dtb <- read_csv('../data/152_combined_DTB.csv')
library(tidyverse)
library(ggpubr)
library(cowplot)
dtb <- read_csv('../data/152_combined_DTB.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
library(tidyverse)
library(ggpubr)
library(cowplot)
dtb <- read_csv('../data/152_combined_DTB.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
dtb <- read_csv('../data/152_combined_DTB.csv')
# the top 10 most consumed in fruits , sweets and veggie item
# total number of meals
n_meal <- dtb %>%
count(mrn, fdrt, Meal) %>%
nrow()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
dtb <- read_csv('../data/152_combined_DTB.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
# the top 10 most consumed in fruits , sweets and veggie item
# total number of meals
n_meal <- dtb %>%
count(mrn, fdrt, Meal) %>%
nrow()
top3grp <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('9','6')) %>%
group_by(Food_code, description, fgrp1) %>%
summarise(total_per_code = sum(dehydrated_weight)) %>%
group_by(fgrp1) %>%
arrange(desc(total_per_code), .by_group = T)  %>%
top_n(10) %>%
left_join(key) %>%
ungroup() %>%
mutate(gram_per_meal = total_per_code/n_meal) %>%
mutate(fg1_full_name = case_when(
fgrp1 == '6' ~ 'Fruits',
fgrp1 == '9' ~ 'Sugars, Sweets & Beverages'
)) %>%
mutate(fg1_full_name = factor(fg1_full_name, levels = c('Sugars, Sweets & Beverages', 'Fruits'))) %>%
group_by(fg1_full_name) %>%
arrange(gram_per_meal, .by_group = T)
# manually add the x text color
x_txt_col <- c(rep('#7D3C98', 10), rep('#db2589', 10))
# or I just calculate the sugar in percent in those food code
top3grp_sugar <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('9','6')) %>%
group_by(Food_code, description, fgrp1) %>%
summarise(total_sugar_per_code = sum(Sugars_g)) %>%
ungroup() %>%
mutate(gram_sugar_per_meal = total_sugar_per_code/n_meal) %>%
inner_join(top3grp) %>%
mutate(sugar_perc_per_meal = gram_sugar_per_meal/gram_per_meal*100) %>%
mutate(description = factor(description, levels = top3grp$description))
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar fraction', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar fraction','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=11, colour = x_txt_col),
legend.title= element_blank())
# the top 10 most consumed in fruits , sweets and veggie item
# total number of meals
n_meal <- dtb %>%
count(mrn, fdrt, Meal) %>%
nrow()
top3grp <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('9','6')) %>%
group_by(Food_code, description, fgrp1) %>%
summarise(total_per_code = sum(dehydrated_weight)) %>%
group_by(fgrp1) %>%
arrange(desc(total_per_code), .by_group = T)  %>%
top_n(10) %>%
left_join(key) %>%
ungroup() %>%
mutate(gram_per_meal = total_per_code/n_meal) %>%
mutate(fg1_full_name = case_when(
fgrp1 == '6' ~ 'Fruits',
fgrp1 == '9' ~ 'Sugars, Sweets & Beverages'
)) %>%
mutate(fg1_full_name = factor(fg1_full_name, levels = c( 'Fruits', 'Sugars, Sweets & Beverages'))) %>%
group_by(fg1_full_name) %>%
arrange(gram_per_meal, .by_group = T)
# manually add the x text color
x_txt_col <- c(rep('#7D3C98', 10), rep('#db2589', 10))
# or I just calculate the sugar in percent in those food code
top3grp_sugar <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1,1)) %>%
filter(fgrp1 %in% c('9','6')) %>%
group_by(Food_code, description, fgrp1) %>%
summarise(total_sugar_per_code = sum(Sugars_g)) %>%
ungroup() %>%
mutate(gram_sugar_per_meal = total_sugar_per_code/n_meal) %>%
inner_join(top3grp) %>%
mutate(sugar_perc_per_meal = gram_sugar_per_meal/gram_per_meal*100) %>%
mutate(description = factor(description, levels = top3grp$description))
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar fraction', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar fraction','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=11, colour = x_txt_col),
legend.title= element_blank())
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar fraction', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar fraction','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=11, colour = x_txt_col),
legend.title= element_blank())
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar fraction', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar fraction','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=11, colour = x_txt_col),
legend.title= element_blank())
ggsave('../data/S9_top10_eaten_foods_of_2__and_sugar_099.pdf', width = 8.3, height = 7)
# how about I plot it in bar plot and so I can have the sugar in gram per meal in the same bar to show the perc
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar fraction', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar fraction','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=10, colour = x_txt_col),
legend.title= element_blank())
ggsave('../data/S9_top10_eaten_foods_of_2__and_sugar_099.pdf', width = 8.3, height = 7)
ggsave('../data/S9_top10_eaten_foods_of_2__and_sugar_099.pdf',    width = 180,
height = 170,
#height = 60,
units = c("mm"),
dpi = 400)
# how about I plot it in bar plot and so I can have the sugar in gram per meal in the same bar to show the perc
bars <- top3grp_sugar %>%
select(description, fg1_full_name,gram_sugar_per_meal, gram_per_meal ) %>%
gather('grp','gram',gram_sugar_per_meal: gram_per_meal) %>%
mutate(grp = if_else(grp == 'gram_sugar_per_meal', 'Sugar content', 'Total') ) %>%
mutate(grp = factor(grp, levels = c('Sugar content','Total')))
ggbarplot(bars, "description", "gram",xlab = '',ylab = 'Per meal average consumption (gram)',
fill = "grp", color = "grp", palette = c("#FB9A99" ,"gray"),
width = 0.7,
position = position_dodge(0.8)) +
coord_flip() +
theme(legend.position = 'bottom',
axis.text.y = element_text(size=10, colour = x_txt_col),
legend.title= element_blank())
ggsave('../data/S9_top10_eaten_foods_of_2__and_sugar_099.pdf',    width = 180,
height = 170,
#height = 60,
units = c("mm"),
dpi = 400)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggbeeswarm)
should <- read_csv('../data/135_selected_samples_for_irep_analysis.csv')
combined <- read_csv('../data/114_combined_irep_915.csv')
meta <- read_csv('../data/153_combined_META.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc') %>%
select(fg = fg1_name,shortname )
scatter_alpha <- 0.35
cor_text_size <- 3
axis_text_size <- 11
axis_title_size <- 11
combined
should <- read_csv('../data/135_selected_samples_for_irep_analysis.csv')
combined <- read_csv('../data/114_combined_irep_915.csv')
meta <- read_csv('../data/153_combined_META.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc') %>%
select(fg = fg1_name,shortname )
scatter_alpha <- 0.35
cor_text_size <- 3
axis_text_size <- 11
axis_title_size <- 11
should <- read_csv('../data/135_selected_samples_for_irep_analysis.csv')
combined <- read_csv('../data/114_combined_irep_915.csv')
meta <- read_csv('../data/153_combined_META.csv')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc') %>%
select(fg = fg1_name,shortname )
scatter_alpha <- 0.35
cor_text_size <- 3
axis_text_size <- 11
axis_title_size <- 11
combined
View(combined)
View(combined)
combined
combined
combined
combined
combined
combined
combined %>%
filter(Sample %in% should$sampleid)
combined
combined
combined
combined %>%
filter(Sample %in% should$sampleid)
combined
combined %>%
filter(Sample %in% should$sampleid)
# summarizing ireps of all major genera
spp <- combined %>%
filter(Sample %in% should$sampleid) %>%
count(best_species, best_level) %>%
filter(!best_level %in% c('superkingdom', 'family')) %>%
mutate(cleaned_genus = str_replace(best_species, '^\\[',''),
cleaned_genus = str_replace(cleaned_genus, '\\]','')) %>%
mutate(cleaned_genus = str_replace(cleaned_genus, ' .+$',''))
c_genus <- spp %>%
count(cleaned_genus)
genus_combined <- combined %>%
inner_join(spp %>%
select(best_species, cleaned_genus)) %>%
add_count(cleaned_genus) %>%
# remove the genus as singletons
filter(n > 1) %>%
mutate(xlabel = str_glue('{cleaned_genus} ({n})')) %>%
mutate(xlabel = fct_reorder(xlabel, iRep, .fun=median, .desc = T))
genus_combined %>%
ungroup() %>%
ggboxplot(x = 'xlabel', y = 'iRep', orientation = "horizontal",add = 'jitter',xlab = 'Genus',
add.params = list(alpha = 0.4, size = 2, shape = 16))
# plot in a horizontal way
genus_combined %>%
ungroup() %>%
ggboxplot(x = 'xlabel', y = 'iRep', orientation = "horizontal",add = 'jitter',xlab = 'Genus',
add.params = list(alpha = 0.4, size = 2, shape = 16))
ggsave('../data/S10_genus_irep_boxplot_106.pdf', width = 150, height = 220, units = 'mm', dpi = 400)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
library(ggridges)
library(brmstools)
dtb <- read_csv('../data/152_combined_DTB.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
# dtb %>%
#   distinct(mrn) %>%
#   write_csv('../data/nutrition_patients_97_mrns.csv', col_names = T)
meta <- read_csv('../data/153_combined_META.csv') %>%
#filter(!sampleid %in% tb_rm$sampleid) %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
meta %>% summary()
# the mean food group intake from our data
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
meta %>% distinct(mrn)
# what priors I can set
model_formular <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
intensity +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "intensityreduced"),
prior(normal(2, 0.1), class = 'b', coef = "intensityablative"),
prior(normal(2, 0.1), class = 'b', coef = "intensitynonablative"))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
View(samples_prior)
View(samples_prior)
