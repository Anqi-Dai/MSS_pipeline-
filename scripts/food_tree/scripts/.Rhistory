count(relab > 0.002) %>%
rename(criteria = names(.)[2]) %>%
filter(criteria == 'TRUE') %>%
arrange(-n) %>%
filter(genus != 'NA') %>%
mutate(perc = round(n/nrow(meta)*100, 0)) %>%
filter(perc > 10) %>%
pull(genus)
gcts <- cts %>%
filter(genus %in% target_genera) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab) %>%
spread(key = 'genus', value = 'relablog', fill = 0)
View(gcts)
# the daily caloric intake :
all_daily_pt <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_daily = sum(Calories_kcal))
# the previous two days average for each stool sample
stb_pair <- meta %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2)
mean_p2d_cal <-  function(mrn_, p1d_, p2d_){
df = all_daily_pt %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_cal = sum(total_daily)/2)
return(df)
}
mean_p2d_df_cal <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_cal(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
View(mean_p2d_df_cal)
nutrients <- dtb %>%
select(mrn, fdrt, Protein_g:Sugars_g)
View(nutrients)
# the daily total of each nutrients
nutrients <- dtb %>%
select(mrn, fdrt, Protein_g:Sugars_g) %>%
gather('type','gram', Protein_g:Sugars_g) %>%
group_by(mrn, fdrt, type) %>%
summarise(total_daily = sum(gram)) %>%
split(.$type)
mean_p2d_fiber <-  function(mrn_, p1d_, p2d_){
df = nutrients$Fibers_g %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_fiber = sum(total_daily)/2)
return(df)
}
mean_p2d_carb <-  function(mrn_, p1d_, p2d_){
df = nutrients$Carbohydrates_g %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_carb = sum(total_daily)/2)
return(df)
}
mean_p2d_fat <-  function(mrn_, p1d_, p2d_){
df = nutrients$Fat_g %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_fat = sum(total_daily)/2)
return(df)
}
mean_p2d_Protein <-  function(mrn_, p1d_, p2d_){
df = nutrients$Protein_g %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_Protein = sum(total_daily)/2)
return(df)
}
mean_p2d_Sugars <-  function(mrn_, p1d_, p2d_){
df = nutrients$Sugars_g %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_  )) %>%
group_by(mrn) %>%
summarise(ave_Sugars = sum(total_daily)/2)
return(df)
}
mean_p2d_fiber <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_fiber(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
mean_p2d_fat <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_fat(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
mean_p2d_Protein <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_Protein(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
mean_p2d_Sugars <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_Sugars(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
mean_p2d_carb <- pmap(stb_pair, function(mrn, p1d, p2d){
mean_p2d_carb(mrn, p1d, p2d)
}) %>%
set_names(meta %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid')
p2d_diet <- mean_p2d_df_cal %>%
full_join(mean_p2d_fiber, by = c("sampleid", "mrn")) %>%
full_join(mean_p2d_fat, by = c("sampleid", "mrn")) %>%
full_join(mean_p2d_Protein, by = c("sampleid", "mrn")) %>%
full_join(mean_p2d_Sugars, by = c("sampleid", "mrn")) %>%
full_join(mean_p2d_carb, by = c("sampleid", "mrn"))
full <- meta %>%
full_join(p2d_diet, by = c("sampleid", "mrn")) %>%
full_join(gcts, by = "sampleid") %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(mrn = factor(mrn)) %>%
mutate(ave_fiber = ave_fiber/100,
ave_fat = ave_fat/100,
ave_Protein = ave_Protein/100,
ave_Sugars = ave_Sugars/100,
ave_carb = ave_carb/100,
) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
full %>%
write_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
View(full)
View(mean_p2d_carb)
alpha_cal <- log(simpson_reciprocal) ~ 1 +
ave_cal +
inten_non + inten_ab + inten_re +
EN +
TPN +
empirical +
(1 | mrn) +
(1 | timebin)
mean_ave_cal <- mean(full$ave_cal)
mean_ave_cal
alpha_cal <- log(simpson_reciprocal) ~ 1 +
ave_cal +
inten_non + inten_ab + inten_re +
EN +
TPN +
empirical +
(1 | mrn) +
(1 | timebin)
priors_alpha_cal <- c(# for the food group variables
prior(normal(0, 1.5), class = 'b', coef = "ave_cal"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "tpnF"),
prior(normal(0, 0.1), class = 'b', coef = "tpnT"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "enF"),
prior(normal(0, 0.1), class = 'b', coef = "enT"),
# for the empirical
prior(normal(0, 0.6), class = 'b', coef = "empiF"),
prior(normal(0, 0.6), class = 'b', coef = "empiT"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
# for the intercept
prior(normal(2, 0.1), class = 'Intercept'))
# vet the prior
model_alpha_cal  <- brm( alpha_cal,
data = full,
warmup = 1000, iter = 3000,
prior = priors_alpha_cal,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
alpha_cal <- log(simpson_reciprocal) ~ 1 +
ave_cal +
inten_non + inten_ab + inten_re +
EN +
TPN +
empirical +
(1 | mrn) +
(1 | timebin)
priors_alpha_cal <- c(# for the food group variables
prior(normal(0, 1.5), class = 'b', coef = "ave_cal"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.6), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
# for the intercept
prior(normal(2, 0.1), class = 'Intercept'))
# vet the prior
model_alpha_cal  <- brm( alpha_cal,
data = full,
warmup = 1000, iter = 3000,
prior = priors_alpha_cal,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
mean_ave_cal <- mean(full$ave_cal)
mean_ave_cal_prior <- prior_draws(model_alpha_cal) %>%
mutate(mean_ave_cal_div = Intercept +
b_ave_cal * mean_ave_cal+
b_inten_re +
b_empiF +
b_tpnF +
b_enF) %>%
select(mean_ave_cal_div) %>%
mutate(grp = 'mean_ave_cal') %>%
rename(prior_res = mean_ave_cal_div) %>%
select(grp, prior_res)
mean_ave_cal_prior <- prior_draws(model_alpha_cal)
View(mean_ave_cal_prior)
mean_ave_cal_prior <- prior_draws(model_alpha_cal) %>%
mutate(mean_ave_cal_div = Intercept +
b_ave_cal * mean_ave_cal+
b_inten_re ) %>%
select(mean_ave_cal_div) %>%
mutate(grp = 'mean_ave_cal') %>%
rename(prior_res = mean_ave_cal_div) %>%
select(grp, prior_res)
View(mean_ave_cal_prior)
knitr::opts_chunk$set(echo = TRUE)
full <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
library(tidyverse)
library(ggpubr)
library(vdbR)
connect_database('~/dbConfig.txt')
list_table_from_database('nutri')
get_table_from_database('samples_castori_ag')
library(brms)
library(rstan)
options(mc.cores = parallel::detectCores())
ncores = parallel::detectCores()
rstan_options(auto_write = TRUE)
full <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_dietall_genera36.csv')
View(full)
summary(full$ave_cal)
alpha_cal <- log(simpson_reciprocal) ~ 1 +
ave_cal +
inten_non + inten_ab + inten_re +
EN +
TPN +
empirical +
(1 | mrn) +
(1 | timebin)
priors_alpha_cal <- c(
prior(normal(0, 1.5), class = 'b', coef = "ave_cal"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.6), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
# for the intercept
prior(normal(2, 0.1), class = 'Intercept'))
# vet the prior
model_alpha_cal  <- brm( alpha_cal,
data = full,
warmup = 1000, iter = 3000,
prior = priors_alpha_cal,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
mean_ave_cal <- mean(full$ave_cal)
mean_ave_cal_prior <- prior_draws(model_alpha_cal) %>%
mutate(mean_ave_cal_div = Intercept +
b_ave_cal * mean_ave_cal+
b_inten_re ) %>%
select(mean_ave_cal_div) %>%
mutate(grp = 'mean_ave_cal') %>%
rename(prior_res = mean_ave_cal_div) %>%
select(grp, prior_res)
View(mean_ave_cal_prior)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(rethinking)
devtools::install_github("stan-dev/cmdstanr")
install.packages('devtools')
devtools::install_github("stan-dev/cmdstanr")
install.packages('devtools')
devtools::install_github("stan-dev/cmdstanr")
install.packages(c("coda","mvtnorm","devtools","loo","dagitty"))
devtools::install_github("rmcelreath/rethinking")
library(tidyverse)
library(rethinking)
library(brms)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(rethinking)
library(brms)
library(ggpubr)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
distinct(description)
rstan_options(auto_write = TRUE)
mc.cores = parallel::detectCores()
# food intake is scaled
dat <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0)) %>%
mutate(fg_egg = as.numeric(scale(fg_egg)),
fg_fruit = as.numeric(scale(fg_fruit)),
fg_grain = as.numeric(scale(fg_grain)),
fg_legume = as.numeric(scale(fg_legume)),
fg_meat = as.numeric(scale(fg_meat)),
fg_milk = as.numeric(scale(fg_milk)),
fg_oils = as.numeric(scale(fg_oils)),
fg_sweets = as.numeric(scale(fg_sweets)),
fg_veggie = as.numeric(scale(fg_veggie)))
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% dat$sampleid) %>%
dplyr::select(sampleid, genus, relab)
# Enterococcus genus relab > 10% to be considered dominant.
entercts <- cts %>%
filter(genus == 'Enterococcus') %>%
mutate(enterodom = if_else(relab > 0.1, 1, 0)) %>%
rename(enterorelab = relab) %>%
select(-genus)
All <- dat %>%
inner_join(entercts)
# the number and perc of dominant samples
All %>%
count(enterodom) %>%
mutate(perc = n/sum(n)*100)
model_formular <- enterodom ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN +
(1 | mrn) +
(1 | timebin)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(0, 1.5), class = 'Intercept'))
model_fg10 <- brm( model_formular,
data = All,
warmup = 1000, iter = 3000,
family = bernoulli(link = "logit"),
prior = priors,
cores = 4,
control = list(adapt_delta = 0.99),
chains = 2,
seed = 123,
sample_prior = T)
sessionInfo()
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
sessionInfo()
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
sessionInfo()
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(rethinking)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
distinct(description)
rstan_options(auto_write = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
distinct(description)
mc.cores = parallel::detectCores()
# food intake is scaled
dat <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0)) %>%
mutate(fg_egg = as.numeric(scale(fg_egg)),
fg_fruit = as.numeric(scale(fg_fruit)),
fg_grain = as.numeric(scale(fg_grain)),
fg_legume = as.numeric(scale(fg_legume)),
fg_meat = as.numeric(scale(fg_meat)),
fg_milk = as.numeric(scale(fg_milk)),
fg_oils = as.numeric(scale(fg_oils)),
fg_sweets = as.numeric(scale(fg_sweets)),
fg_veggie = as.numeric(scale(fg_veggie)))
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% dat$sampleid) %>%
dplyr::select(sampleid, genus, relab)
# Enterococcus genus relab > 10% to be considered dominant.
entercts <- cts %>%
filter(genus == 'Enterococcus') %>%
mutate(enterodom = if_else(relab > 0.1, 1, 0)) %>%
rename(enterorelab = relab) %>%
select(-genus)
All <- dat %>%
inner_join(entercts)
# the number and perc of dominant samples
All %>%
count(enterodom) %>%
mutate(perc = n/sum(n)*100)
model_formular <- enterodom ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN +
(1 | mrn) +
(1 | timebin)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(0, 1.5), class = 'Intercept'))
model_fg10 <- brm( model_formular,
data = All,
warmup = 1000, iter = 3000,
family = bernoulli(link = "logit"),
prior = priors,
cores = 4,
control = list(adapt_delta = 0.99),
chains = 2,
seed = 123,
sample_prior = T)
