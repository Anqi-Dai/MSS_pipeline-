mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) )
View(all_current_metaphlan)
View(all_current_metaphlan[["../data/NEW_naming//Sample_1042U_IGO_07976_97_metaphlan3_profile.txt"]])
all_current_metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddd') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) ) %>%
bind_rows(.id = 'full_id')
View(all_current_metaphlan)
all_current_metaphlan
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt',''))
View(cleaned_metaphlan)
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
metaphlan_shotgun_rel_abundance
colnames(fread)
colnames(metaphlan_shotgun_rel_abundance)
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901')
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
get_table_from_database('qpcr_16s_ag')
qpcr_16s_ag
View(qpcr_16s_ag)
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901') %>%
mutate(key = seq(1, nrow(.)))
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
View(test)
fns <- list.files('../data/NEW_naming/', full.names = T)
test <- read_tsv(fns[1], skip = 4, col_types = 'ccddi') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__'))
test
all_current_metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddi') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) ) %>%
bind_rows(.id = 'full_id')
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901')
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
View(qpcr_16s_ag)
View(cleaned_metaphlan)
library(vdbR)
connect_database()
query_create_temp_table = glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
library(tidyverse)
query_create_temp_table = glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
query_create_temp_table = str_glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
dbSendQuery(con,query_create_temp_table);
dbSendQuery(psql_con,query_create_temp_table)
dbGetQuery(psql_con,query_create_temp_table)
exsiting_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
exsiting_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
existing_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
new_data <- cleaned_metaphlan
dbWriteTable(con, "metaphlan_shotgun_rel_abundance", value = new_data, append = TRUE, row.names = FALSE);
dbWriteTable(psql_con, "metaphlan_shotgun_rel_abundance", value = new_data, append = TRUE, row.names = FALSE);
dbWriteTable(psql_con, "metaphlan_shotgun_rel_abundance",
value = new_data %>%
mutate(upload_date=Sys.Date()), append = TRUE, row.names = FALSE);
query_create_temp_table = str_glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
existing_data <- dbGetQuery(psql_con,query_create_temp_table)
if(nrow(existing_data) !=0){
new_data <-  anti_join(cleaned_metaphlan, existing_data)
} else{
new_data <- cleaned_metaphlan
}
nrow(existing_data)
anti_join(cleaned_metaphlan, existing_data)
if(nrow(existing_data) !=0){
new_data <-  anti_join(cleaned_metaphlan, existing_data)
} else{
new_data <- cleaned_metaphlan
}
existing_data
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, -upload_date))
colnames(existing_data %>% select(-key, -upload_date))
colnames(cleaned_metaphlan)
colnames(cleaned_metaphlan) == colnames(existing_data %>% select(-key, -upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, -upload_date))
str(existing_data)
str(cleaned_metaphlan)
cleaned_metaphlan_df <- as.data.frame(cleaned_metaphlan)
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date))
str(cleaned_metaphlan_df)
new_data
View(new_data)
str(new_data)
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date))
View(new_data)
View(existing_data)
new_data <-  anti_join(cleaned_metaphlan_df%>% select(-relative_abundance, coverage ), existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
new_data <-  anti_join(cleaned_metaphlan_df%>% select(-relative_abundance, -coverage ), existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
View(cleaned_metaphlan_df)
library(tidyverse)
library(vdbR)
connect_database()
get_table_from_database('metaphlan_shotgun_rel_abundance')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
ko <-  list.files('../data/NEW_naming/', full.names = T, pattern = 'humann3_KO_cpm')
test <- read_tsv(ko[1])
test <- read_tsv(ko[1],  col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(pathway, '\\|')) %>%
rename(ko_cpm = names(.)[2])
ko <-  list.files('../data/NEW_naming/', full.names = T, pattern = 'humann3_KO_cpm')
test <- read_tsv(ko[1])
test <- read_tsv(ko[1],  col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|')) %>%
rename(ko_cpm = names(.)[2])
all_unstratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id')
View(all_unstratified)
all_unstratified
all_unstratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id') %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_humann3_KO_cpm.tsv',''))
View(all_unstratified)
all_unstratified %>% write_csv('../data/all_unstratified_cleaned_KO.csv')
all_unstratified
get_table_from_database('humann_shotgun_KO_cpm_unstratified')
get_table_from_database('humann_shotgun_KO_cpm_unstratified')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
get_table_from_database('humann_shotgun_KO_cpm_unstratified')
list
list_table_from_database()
list_table_from_database()
get_table_from_database('humann_shotgun_ko_cpm_unstratified')
View(humann_shotgun_ko_cpm_unstratified)
colnames(humann_shotgun_ko_cpm_unstratified)
all_stratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(ko = `# Gene Family`) %>%
filter(str_detect(ko, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id') %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_humann3_KO_cpm.tsv',''))
ko <-  list.files('../data/NEW_naming/', full.names = T, pattern = 'humann3_KO_cpm')
all_stratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(ko = `# Gene Family`) %>%
filter(str_detect(ko, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id') %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_humann3_KO_cpm.tsv',''))
get_table_from_database('humann_shotgun_ko_cpm_unstratified')
View(humann_shotgun_ko_cpm_unstratified)
View(all_stratified)
ko
all_stratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(ko = `# Gene Family`) %>%
filter(str_detect(ko, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id') %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_humann3_KO_cpm.tsv',''))
View(all_stratified)
all_stratified %>% write_csv('../data/all_stratified_cleaned_KO.csv')
View(all_stratified)
View(humann_shotgun_ko_cpm_unstratified)
get_table_from_database('humann_shotgun_ko_cpm_stratified')
View(humann_shotgun_ko_cpm_stratified)
knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('samples_castori_ag')
df <- read_csv('~/Work/projects/CART_and_microbiome/data/amplicon/stool/combined_2_meta.csv')
View(df)
df
df <- read_csv('~/Work/projects/CART_and_microbiome/data/amplicon/stool/combined_2_meta.csv') %>%
filter(center == 'M')
df <- read_csv('~/Work/projects/CART_and_microbiome/data/amplicon/stool/combined_2_meta.csv') %>%
filter(center == 'M') %>%
inner_join(samples_castori_ag)
df <- read_csv('~/Work/projects/CART_and_microbiome/data/amplicon/stool/combined_2_meta.csv') %>%
filter(center == 'M')
df <- read_csv('~/Work/projects/CART_and_microbiome/data/amplicon/stool/combined_2_meta.csv') %>%
filter(center == 'M') %>%
inner_join(samples_castori_ag)
View(df)
df %>%
write_csv('../data/cart_samples_date_collection.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
chen <- read_csv('../data/chen.csv')
View(chen)
chen <- read_csv('../data/chen.csv')
View(chen)
library(vdbR)
connect_database()
get_table_from_database('asv_alpha_diversity_ag')
View(asv_alpha_diversity_ag)
View(chen)
asv_alpha_diversity_ag
chen
location <- chen %>%
inner_join(asv_alpha_diversity_ag %>%
distinct(sampleid, .keep_all = T) %>%
rename(SampleID = sampleid))
View(location)
View(location)
missing <- chen %>%
filter(! SampleID %in% asv_alpha_diversity_ag$sampleid)
View(missing)
missing
location
found <- location %>%
select(oligos_id, path_pool)
found
found <- location %>%
select(oligos_id, path_pool)
found
found <- location %>%
select(oligos_id, path_pool)
found
found <- location %>%
select(oligos_id, path_pool) %>%
mutate(R1 = str_glue('{oligos_id}_R1.fastq.gz'),
R2 = str_glue('{oligos_id}_R2.fastq.gz')) %>%
mutate(p1 = str_glue('{path_pool}/{R1}'),
p2 = str_glue('{path_pool}/{R2}'))
View(found)
found <- location %>%
select(oligos_id, path_pool) %>%
mutate(R1 = str_glue('{oligos_id}_R1.fastq.gz'),
R2 = str_glue('{oligos_id}_R2.fastq.gz')) %>%
mutate(p1 = str_glue('{path_pool}/{R1}'),
p2 = str_glue('{path_pool}/{R2}')) %>%
select(p1, p2) %>%
gather() %>%
mutate(cmd = str_glue('scp daia1@lilac.mskcc.org:{value} .')) %>%
select(cmd) %>%
write_csv('../data/dl_chen12729.sh', col_names = F)
found <- location %>%
select(oligos_id, path_pool) %>%
mutate(R1 = str_glue('{oligos_id}_R1.fastq.gz'),
R2 = str_glue('{oligos_id}_R2.fastq.gz')) %>%
mutate(p1 = str_glue('{path_pool}/{R1}'),
p2 = str_glue('{path_pool}/{R2}')) %>%
select(p1, p2)
View(found)
View(location)
View(asv_alpha_diversity_ag)
knitr::opts_chunk$set(echo = TRUE)
asv_alpha_diversity_ag
alpha <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1126|pool1127|pool1129|pool_1128'))
View(alpha)
alpha <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1126|pool1127|pool1129|pool_1128'))
View(alpha)
alpha
alpha <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1126|pool1127|pool1129|pool_1128')) %>%
select(sampleid:shannon)
alpha
dir.create('../data/hackensack')
alpha %>% write_csv('../data/hackensack/samples_alpha_diversity.csv')
View(alpha)
cts <- get_counts_subset(alpha$sampleid)
View(cts)
cts %>% distinct(sampleid)
cts
cts <- get_counts_subset(alpha$sampleid) %>%
select(asv_key:count_total, count_relative)
get_table_from_database('asv_annotation_blast_ag')
View(asv_annotation_blast_ag)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts$asv_key) %>%
select(asv_key:blast_pass)
alpha <- asv_alpha_diversity_ag %>%
filter(str_detect(oligos_id, 'pool1126|pool1127|pool1129|pool_1128')) %>%
select(sampleid:shannon)
dir.create('../data/hackensack')
alpha %>% write_csv('../data/hackensack/samples_alpha_diversity.csv')
cts <- get_counts_subset(alpha$sampleid) %>%
select(asv_key:count_total, count_relative)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts$asv_key) %>%
select(asv_key:blast_pass)
list(alpha = alpha,
counts = cts,
taxa = taxa) %>%
imap(function(.x, .y){
write_csv(.x, str_glue('../data/hackensack/hackensack_ASV_{.y}.csv'))
})
# check the meta table they sent us
meta <- readxl::read_excel('../data/3-1-22 Metadata MSK incl Abx.xlsx')
View(meta)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
chen <- read_csv('../data/chen.csv')
get_table_from_database('asv_alpha_diversity_ag')
location <- chen %>%
inner_join(asv_alpha_diversity_ag %>%
distinct(sampleid, .keep_all = T) %>%
rename(SampleID = sampleid))
missing <- chen %>%
filter(! SampleID %in% asv_alpha_diversity_ag$sampleid)
found <- location %>%
select(oligos_id, path_pool) %>%
mutate(R1 = str_glue('{oligos_id}_R1.fastq.gz'),
R2 = str_glue('{oligos_id}_R2.fastq.gz')) %>%
mutate(p1 = str_glue('{path_pool}/{R1}'),
p2 = str_glue('{path_pool}/{R2}')) %>%
select(p1, p2) %>%
gather() %>%
mutate(cmd = str_glue('rsync --progress --partial -avz daia1@lilac.mskcc.org:{value} .')) %>%
select(cmd) %>%
write_csv('/Volumes/castoricenter/Chen/raw_amplicon_found/dl_chen12729.sh', col_names = F)
found
found[1,]
found[1,1]
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
dtb %>%
distinct(mrn) %>%
write_csv('../data/nutrition_patients_97_mrns.csv', col_names = T)
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
colnames(meta)
glimpse(meta)
meta %>%
select(-mrn, -disease.simple, -admit_wt, -ci) %>%
mutate(inten_non = factor(inten_non),
inten_ab = factor(inten_ab),
inten_re = factor(inten_re)) %>%
summary
# how to get rid of the intercept
model_formular_no_intercept <- log(simpson_reciprocal) ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular_no_intercept,
data = meta)
# how to get rid of the intercept
model_formular_no_intercept <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular_no_intercept,
data = meta)
# how to get rid of the intercept
model_formular_no_intercept <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular_no_intercept,
data = meta)
# how to get rid of the intercept
model_formular_no_intercept <- log(simpson_reciprocal) ~ 0 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular_no_intercept,
data = meta)
# what priors I can set
model_formular <- log(simpson_reciprocal) ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
# how to get rid of the intercept
model_formular_no_intercept <- log(simpson_reciprocal) ~ -1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular_no_intercept,
data = meta)
