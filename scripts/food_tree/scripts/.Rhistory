) %>%
bold_labels() %>%
as_gt() %>%
modify_footnote(`MDS/MPN` ~ "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms", abbreviation = TRUE) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
modify_footnote(`MDS/MPN` ~ "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms", abbreviation = TRUE)
tbl_summary <-
trial %>%
select(trt, age, grade) %>%
tbl_summary(by = trt)
# Example 1 ----------------------------------
# update footnote
modify_footnote_ex1 <-
tbl_summary %>%
modify_footnote(
update = starts_with("stat_") ~
"median (IQR) for continuous variables; n (%) categorical variables"
)
# Example 2 ----------------------------------
# delete all footnotes - except abbreviations
# use `modify_footnote(everything() ~ NA, abbreviation = TRUE)` to delete abbrev. footnotes
modify_footnote_ex2 <-
tbl_summary %>%
modify_footnote(update = everything() ~ NA)
# Example 3 ----------------------------------
# updating the footnote abbreviation for CI
modify_footnote_ex3 <-
glm(response ~ age + grade, trial, family = binomial) %>%
tbl_regression(exponentiate = TRUE) %>%
modify_footnote(ci ~ "CI = Credible Interval", abbreviation = TRUE)
modify_footnote_ex3
trial
modify_footnote_ex3
glm(response ~ age + grade, trial, family = binomial) %>%
tbl_regression(exponentiate = TRUE)
modify_footnote_ex3
modify_footnote_ex2 <-
tbl_summary %>%
modify_footnote(update = everything() ~ NA)
modify_footnote_ex2
?tab_footnote
PTB <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
final <- PTB %>%
select(age, sex, Disease = disease.simple, source,  intensity) %>%
mutate(Disease = case_when(
Disease == 'NHL' ~ "Non-Hodgkin's lymphoma",
# Myelodysplastic/myeloproliferative neoplasms
Disease == 'MDS/MPN' ~ 'MDS/MPN',
Disease == 'AML' ~ 'Acute myeloid leukemia',
Disease == 'ALL' ~ 'Acute lymphoid leukemia',
Disease == 'CLL' ~ 'Chronic lymphocytic leukemia',
Disease == 'CML' ~ 'Other',
Disease == 'Hodgkins' ~ "Other",
Disease == 'Myeloma' ~ 'Myeloma',
Disease == 'AA' ~ 'Other'
)) %>%
mutate(source = case_when(
source == 'unmodified' ~ "Unmodified bone marrow or PBSC",
source == 'cord' ~ "Cord blood",
source == 'TCD' ~ "T-cell depleted PBSC"
)) %>%
mutate(intensity = case_when(
intensity == 'nonablative' ~ "Nonmyeloablative",
intensity == 'ablative' ~ "Ablative",
intensity == 'reduced' ~ "Reduced intensity"
)) %>%
mutate(intensity = fct_reorder(intensity, intensity, .fun=length, .desc = T),
source = fct_reorder(source, source, .fun=length, .desc = T),
Disease = fct_reorder(Disease, Disease, .fun=length, .desc = T),
sex = fct_reorder(sex, sex, .fun=length, .desc = T)) %>%
rename(`Graft type` = source,
#`HCT-CI` = ci,
`Intensity of conditioning regimen` = intensity )
View(final)
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = cells_body(columns = Disease, rows = Disease == 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
?tab_footnote
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
ft::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = cells_body(columns = Disease, rows = Disease == 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
gt::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = cells_body(columns = Disease, rows = Disease == 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
gt::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = gt::cells_body(columns = Disease, rows = Disease == 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt()
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
gt::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = gt::cells_body( rows = Disease == 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
gt::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms",
locations = gt::cells_body( rows  = 'MDS/MPN')
) %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt()
) %>%
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
gt::tab_footnote(
footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms") %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
library(gtsummary)
PTB <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
final <- PTB %>%
select(age, sex, Disease = disease.simple, source,  intensity) %>%
mutate(Disease = case_when(
Disease == 'NHL' ~ "Non-Hodgkin's lymphoma",
# Myelodysplastic/myeloproliferative neoplasms
Disease == 'MDS/MPN' ~ 'MDS/MPN',
Disease == 'AML' ~ 'Acute myeloid leukemia',
Disease == 'ALL' ~ 'Acute lymphoid leukemia',
Disease == 'CLL' ~ 'Chronic lymphocytic leukemia',
Disease == 'CML' ~ 'Other',
Disease == 'Hodgkins' ~ "Other",
Disease == 'Myeloma' ~ 'Myeloma',
Disease == 'AA' ~ 'Other'
)) %>%
mutate(source = case_when(
source == 'unmodified' ~ "Unmodified bone marrow or PBSC",
source == 'cord' ~ "Cord blood",
source == 'TCD' ~ "T-cell depleted PBSC"
)) %>%
mutate(intensity = case_when(
intensity == 'nonablative' ~ "Nonmyeloablative",
intensity == 'ablative' ~ "Ablative",
intensity == 'reduced' ~ "Reduced intensity"
)) %>%
mutate(intensity = fct_reorder(intensity, intensity, .fun=length, .desc = T),
source = fct_reorder(source, source, .fun=length, .desc = T),
Disease = fct_reorder(Disease, Disease, .fun=length, .desc = T),
sex = fct_reorder(sex, sex, .fun=length, .desc = T)) %>%
rename(`Graft type` = source,
#`HCT-CI` = ci,
`Intensity of conditioning regimen` = intensity )
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
#gt::tab_footnote(footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms") %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
?gtsave
library(gtsummary)
PTB <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
final <- PTB %>%
select(age, sex, Disease = disease.simple, source,  intensity) %>%
mutate(Disease = case_when(
Disease == 'NHL' ~ "Non-Hodgkin's lymphoma",
# Myelodysplastic/myeloproliferative neoplasms
Disease == 'MDS/MPN' ~ 'MDS/MPN',
Disease == 'AML' ~ 'Acute myeloid leukemia',
Disease == 'ALL' ~ 'Acute lymphoid leukemia',
Disease == 'CLL' ~ 'Chronic lymphocytic leukemia',
Disease == 'CML' ~ 'Other',
Disease == 'Hodgkins' ~ "Other",
Disease == 'Myeloma' ~ 'Myeloma',
Disease == 'AA' ~ 'Other'
)) %>%
mutate(source = case_when(
source == 'unmodified' ~ "Unmodified bone marrow or PBSC",
source == 'cord' ~ "Cord blood",
source == 'TCD' ~ "T-cell depleted PBSC"
)) %>%
mutate(intensity = case_when(
intensity == 'nonablative' ~ "Nonmyeloablative",
intensity == 'ablative' ~ "Ablative",
intensity == 'reduced' ~ "Reduced intensity"
)) %>%
mutate(intensity = fct_reorder(intensity, intensity, .fun=length, .desc = T),
source = fct_reorder(source, source, .fun=length, .desc = T),
Disease = fct_reorder(Disease, Disease, .fun=length, .desc = T),
sex = fct_reorder(sex, sex, .fun=length, .desc = T)) %>%
rename(`Graft type` = source,
#`HCT-CI` = ci,
`Intensity of conditioning regimen` = intensity )
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
#gt::tab_footnote(footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms") %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.eps")
library(gtsummary)
PTB <- read_csv('../data/cleaned_patients/diet_patients_97.csv')
final <- PTB %>%
select(age, sex, Disease = disease.simple, source,  intensity) %>%
mutate(Disease = case_when(
Disease == 'NHL' ~ "Non-Hodgkin's lymphoma",
# Myelodysplastic/myeloproliferative neoplasms
Disease == 'MDS/MPN' ~ 'MDS/MPN',
Disease == 'AML' ~ 'Acute myeloid leukemia',
Disease == 'ALL' ~ 'Acute lymphoid leukemia',
Disease == 'CLL' ~ 'Chronic lymphocytic leukemia',
Disease == 'CML' ~ 'Other',
Disease == 'Hodgkins' ~ "Other",
Disease == 'Myeloma' ~ 'Myeloma',
Disease == 'AA' ~ 'Other'
)) %>%
mutate(source = case_when(
source == 'unmodified' ~ "Unmodified bone marrow or PBSC",
source == 'cord' ~ "Cord blood",
source == 'TCD' ~ "T-cell depleted PBSC"
)) %>%
mutate(intensity = case_when(
intensity == 'nonablative' ~ "Nonmyeloablative",
intensity == 'ablative' ~ "Ablative",
intensity == 'reduced' ~ "Reduced intensity"
)) %>%
mutate(intensity = fct_reorder(intensity, intensity, .fun=length, .desc = T),
source = fct_reorder(source, source, .fun=length, .desc = T),
Disease = fct_reorder(Disease, Disease, .fun=length, .desc = T),
sex = fct_reorder(sex, sex, .fun=length, .desc = T)) %>%
rename(`Graft type` = source,
#`HCT-CI` = ci,
`Intensity of conditioning regimen` = intensity )
final %>%
tbl_summary(
type = list(all_integer() ~ "continuous"),
statistic = list(all_continuous() ~ "{mean} ({sd})")
) %>%
bold_labels() %>%
as_gt() %>%
#gt::tab_footnote(footnote = "MDS/MPN = Myelodysplastic/myeloproliferative neoplasms") %>%
gt::gtsave(filename = "../figs/paper/003_table_1_patient_summary.pdf")
knitr::opts_chunk$set(echo = TRUE)
cts <- read_tsv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix_UPDATED.tsv')
View(cts)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(viridis)
# formatting the counts table to have samples in the rows
cts <- read_tsv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix_UPDATED.tsv')
View(cts)
# formatting the counts table to have samples in the rows
cts <- read_tsv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix_UPDATED.tsv')
View(cts)
# make the food code counts matrix
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# make the food code counts matrix
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
dtb
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight)
View(matri)
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}'))
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}'))
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight)
View(cts)
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
spread('fid', 'dehydrated_weight')
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight)
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
group_by(fid, Food_code) %>%
summarise(total = sum(dehydrated_weight))
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight)
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
group_by(fid, Food_code) %>%
summarise(total = sum(dehydrated_weight))
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
group_by(fid, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
spread('fid', 'dehydrated_weight', fill = 0)
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
group_by(fid, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
spread('fid', 'total', fill = 0)
cts <- read_tsv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix_UPDATED.tsv')
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
matri <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
mutate(fid = str_glue('{mrn}d{fdrt}')) %>%
select(fid, Food_code, dehydrated_weight) %>%
group_by(fid, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
spread('fid', 'total', fill = 0)
View(cts)
View(matri)
# formatting the counts table to have samples in the rows
cts <- matri %>%
gather('fid', 'gram', names(.)[2]:names(.)[ncol(.)])
fid_sum <- cts %>%
group_by(fid) %>%
summarise(Sum = sum(gram))
cts_all <- cts %>%
left_join(fid_sum)  %>%
mutate(frelab = gram/Sum) %>%
select(Food_code, fid, frelab) %>%
spread(key = 'Food_code', value = 'frelab') %>%
rename(index_column = fid) %>%
mutate(index_column = str_glue('P{index_column}'))
# create pt number for the mrn
link <- cts_all %>%
select(index_column) %>%
transmute(mrn = str_extract(index_column, 'P.+d')) %>%
mutate(mrn = str_replace(mrn, 'P',''),
mrn = str_replace(mrn, 'd$','') ) %>%
distinct() %>%
mutate(pt = seq(1, nrow(.))) %>%
mutate(pt = str_pad(pt, 2, side = 'left', '0')) %>%
mutate(pt = str_glue('P{pt}'))
link_all <- cts_all %>%
select(index_column) %>%
mutate(fid = index_column) %>%
separate(index_column, into = c('mrn','fdrt'), sep = 'd') %>%
mutate(mrn = str_replace(mrn, 'P','')) %>%
left_join(link) %>%
mutate(index_column = str_glue('{pt}d{fdrt}'))
link_all %>%
write_csv('../data/cleaned_diet_data/deidentify_dsample_map.csv')
cts_all %>%
rename(fid = index_column) %>%
full_join(link_all %>% select(fid, index_column)) %>%
select(index_column, names(.)[2]:names(.)[ncol(.)-1]) %>%
write_csv('../softwares/phylo-umap/taxumap/data/taxUMAP_food_cts.csv')
cts_all %>%
rename(fid = index_column) %>%
full_join(link_all %>% select(fid, index_column)) %>%
select(index_column, names(.)[2]:names(.)[ncol(.)-1])
cts_all %>%
write_csv('../data/cleaned_diet_data/taxUMAP_food_cts.csv')
View(cts_all)
cts_all %>%
write_csv('../data/cleaned_diet_data/taxUMAP_food_cts.csv')
View(cts_all)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(data.tree)
install.packages('data.tree')
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(data.tree)
library(viridisLite)
library(readxl)
### The food database with all the unique food from the diet project
# need to get rid of the all the special characters, so that you will only see underscores
# all!!!! including the semicolon damn the semi colon
# uniq_food is a table with the food_nsc and food code and description
uniq_food <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
select(Food_code, description) %>%
distinct()
codes <- read_tsv('../data/finalized/paired/pNday/prophylactic_p5d_diet_foodID_dehydrated_weight_per_pt.tsv') %>%
pull(Food_code)
current_all <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
distinct(Food_code) %>%
pull(Food_code)
length(intersect(uniq_food$Food.Code, current_all))
food_database <- uniq_food %>%
filter(Food_code %in% current_all) %>%
distinct(Food_code, .keep_all = T)  %>%
rename(FoodID = Food_code) %>%
mutate(description = str_replace_all(description,',| |-|\\(|\\)|%|/|"|;','_')) %>%
mutate(description = str_replace_all(description,"'",""))
nodes_fn <- '../data/source/NodeLabelsMCT.txt'
num.levels <- 7
fdata <- food_database
nodes <- read.table(nodes_fn, header = TRUE, sep="\t", fill = TRUE , colClasses="character")
main <- fdata[,c("FoodID", "description")]
# if there happen to be duplicate FoodIDs in main, remove them
main <- main[!duplicated(main$FoodID),]
flevels <- NULL
for(i in 1:num.levels)
flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))
colnames(flevels) <- paste0("L",1:num.levels)
main <- data.frame(main, flevels, stringsAsFactors=F)
# melt the data, merge to get the node names, then cast back
main.melt <- reshape2::melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")
main.merge <- merge(main.melt, nodes, by = "Level.code")
main.cast <- data.table::dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")
# prepend level to all level descriptions
main.cast[is.na(main.cast)] <- ""
main.cast[,colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1], function(colname) paste(colname, main.cast[,colname], sep="_"))
# merge back with original table to grab Food Description
main.join <- merge(main.cast, main[,c("FoodID","description")], by="FoodID")
# create a proper newick string for the tree
newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")
# create a proper taxonomy string for QIIME
taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))
final.table <- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F) %>%
# THE BELOW IS ESSENTIAL, THAT WE WANNA USE FOOD ID INSTEAD OF DESCRIPTION TO REPRESENT THE FOOD
mutate(newickstring = str_glue('foodtreeroot/{L1}/{L2}/{L3}/{L4}/{L5}/{L6}/{FoodID}'))
matri %>%
write_csv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix.tsv')
actual_foodids <- read_tsv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix.tsv') %>%
pull(Food_code)
matri %>%
write_csv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix.csv')
actual_foodids <- read_csv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix.csv') %>%
pull(Food_code)
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(L1, L2, L3, L4, FoodID)
food_taxa %>%
write_csv('../data/cleaned_diet_data/taxUMAP_foodID_taxa.csv')
actual_foodids <- read_csv('../data/cleaned_diet_data/FINAL_97_food_code_counts_matrix.csv') %>%
pull(Food_code)
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(L1, L2, L3, L4, FoodID)
food_taxa %>%
write_csv('../data/cleaned_diet_data/taxUMAP_foodID_taxa.csv')
remotes::install_git("https://github.mskcc.org/gomesa/vdbR.git",quiet=T)
