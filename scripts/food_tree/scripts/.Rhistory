select(genus, starts_with('b_day')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item))
col_key <- post_res_genera %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
ggplot(post_res_genera, aes(x = genus, y = item)) +
geom_tile(aes(fill = color,  x = genus, y =  item), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  item),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0','75% CI < 0 negative', '75% CI > 0 positive')) +
theme_light() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background = element_blank())
ggsave('../figs/paper/078_sameday_heatmap_genus_36_cal_ggplot.pdf', width = 11, height = 3)
knitr::opts_chunk$set(echo = TRUE)
library(vegan)
library(tidyverse)
library(ggpubr)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
stb <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
pt_fdrt <- dtb %>%
distinct(mrn, fdrt)
stb_loop <- stb %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
check_p5d_diet <-  function(mrn_, p1d_, p2d_, p3d_, p4d_, p5d_){
num = pt_fdrt %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_ ,p3d_, p4d_, p5d_ )) %>%
nrow()
return(num)
}
check_p5d_diet_df <- pmap(stb_loop, function(mrn, p1d, p2d, p3d, p4d, p5d){
check_p5d_diet(mrn, p1d, p2d, p3d, p4d, p5d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows() %>%
gather('sampleid', 'pNd_num')
p5d_samples <- check_p5d_diet_df %>%
filter(pNd_num == 5) %>%
pull(sampleid)
stb_loop_sum <- stb %>%
filter(sampleid %in% p5d_samples) %>%
mutate(p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
View(stb_loop_sum)
pt_fdrt <- dtb %>%
distinct(mrn, fdrt)
stb_loop <- stb %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
check_p5d_diet <-  function(mrn_, p1d_, p2d_, p3d_, p4d_, p5d_){
num = pt_fdrt %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_ ,p3d_, p4d_, p5d_ )) %>%
nrow()
return(num)
}
check_p5d_diet_df <- pmap(stb_loop, function(mrn, p1d, p2d, p3d, p4d, p5d){
check_p5d_diet(mrn, p1d, p2d, p3d, p4d, p5d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows() %>%
gather('sampleid', 'pNd_num')
p5d_samples <- check_p5d_diet_df %>%
filter(pNd_num == 5) %>%
pull(sampleid)
stb_loop_sum <- stb %>%
filter(sampleid %in% p5d_samples) %>%
mutate(p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
pt_fdrt <- dtb %>%
distinct(mrn, fdrt)
stb_loop <- stb %>%
select(mrn, sdrt) %>%
transmute(mrn = mrn,
p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
check_p5d_diet <-  function(mrn_, p1d_, p2d_, p3d_, p4d_, p5d_){
num = pt_fdrt %>%
filter(mrn == mrn_) %>%
filter(fdrt %in% c(p1d_, p2d_ ,p3d_, p4d_, p5d_ )) %>%
nrow()
return(num)
}
check_p5d_diet_df <- pmap(stb_loop, function(mrn, p1d, p2d, p3d, p4d, p5d){
check_p5d_diet(mrn, p1d, p2d, p3d, p4d, p5d)
}) %>%
set_names(stb %>% pull(sampleid)) %>%
bind_rows() %>%
gather('sampleid', 'pNd_num')
p5d_samples <- check_p5d_diet_df %>%
filter(pNd_num == 5) %>%
pull(sampleid)
stb_loop_sum <- stb %>%
filter(sampleid %in% p5d_samples) %>%
mutate(p1d = sdrt-1,
p2d = sdrt-2,
p3d = sdrt-3,
p4d = sdrt-4,
p5d = sdrt-5)
View(dtb)
dtb
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
select(mrn, fdrt, ends_with('_g'))
dtb
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
select(mrn, fdrt, ends_with('_g')) %>%
select(-Sodium_g)
dtb
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv') %>%
select(mrn, fdrt, ends_with('_g')) %>%
select(-Sodium_g) %>%
gather('nutrient','gram', Protein_g:Sugars_g)
dtb
p1d <- apply(stb_loop_sum, 1, function(Row){
df = dtb %>%
filter(mrn == Row[['mrn']]) %>%
filter(fdrt %in% c(Row[['p1d']])) %>%
group_by(nutrient) %>%
summarise(ave_gram = sum(gram))
}) %>%
set_names(stb_loop_sum %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'sampleid', value = 'ave_gram', fill = 0)
p1d <- p1d[, colSums(p1d != 0) > 0]
p2d <- apply(stb_loop_sum, 1, function(Row){
df = dtb %>%
filter(mrn == Row[['mrn']]) %>%
filter(fdrt %in% c(Row[['p1d']], Row[['p2d']])) %>%
group_by(nutrient) %>%
summarise(ave_gram = sum(gram)/2)
}) %>%
set_names(stb_loop_sum %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'sampleid', value = 'ave_gram', fill = 0)
p2d <- p2d[, colSums(p2d != 0) > 0]
p3d <- apply(stb_loop_sum, 1, function(Row){
df = dtb %>%
filter(mrn == Row[['mrn']]) %>%
filter(fdrt %in% c(Row[['p1d']], Row[['p2d']], Row[['p3d']])) %>%
group_by(nutrient) %>%
summarise(ave_gram = sum(gram)/3)
}) %>%
set_names(stb_loop_sum %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'sampleid', value = 'ave_gram', fill = 0)
p3d <- p3d[, colSums(p3d != 0) > 0]
p4d <- apply(stb_loop_sum, 1, function(Row){
df = dtb %>%
filter(mrn == Row[['mrn']]) %>%
filter(fdrt %in% c(Row[['p1d']], Row[['p2d']], Row[['p3d']], Row[['p4d']])) %>%
group_by(nutrient) %>%
summarise(ave_gram = sum(gram)/4)
}) %>%
set_names(stb_loop_sum %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'sampleid', value = 'ave_gram', fill = 0)
p4d <- p4d[, colSums(p4d != 0) > 0]
p5d <- apply(stb_loop_sum, 1, function(Row){
df = dtb %>%
filter(mrn == Row[['mrn']]) %>%
filter(fdrt %in% c(Row[['p1d']], Row[['p2d']], Row[['p3d']], Row[['p4d']], Row[['p5d']])) %>%
group_by(nutrient) %>%
summarise(ave_gram = sum(gram)/5)
}) %>%
set_names(stb_loop_sum %>% pull(sampleid)) %>%
bind_rows(.id = 'sampleid') %>%
spread(key = 'sampleid', value = 'ave_gram', fill = 0)
p5d <- p5d[, colSums(p5d != 0) > 0]
knitr::opts_chunk$set(echo = TRUE)
tb <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv')
View(tb)
cts_long <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% p5d_samples)
View(cts_long)
cts_long %>% distinct(sampleid)
View(cts_long)
View(p1d)
View(p5d)
# output the macronutrients cts table (need to be in a similar format to fit my previously written snakemake rules)
dcts <- list(p1d = p1d,
p2d = p2d,
p3d = p3d,
p4d = p4d,
p5d = p5d)
for (i in 1:length(dcts)){
dcts[[i]] %>%
write_tsv(str_glue('../data/finalized/paired/pNday/allstool_{names(dcts)[i]}_diet_macro_dehydrated_weight_per_pt.tsv'))
}
fns_both <- tibble(
sfolder = list.files('../data/finalized/paired/pNday/', pattern = 'allstool_p.d_scts_stool_relab_species_braycurtis_pcoa$', full.names = T),
dfolder = list.files('../data/finalized/paired/pNday/', pattern = 'allstool_p.d_diet_macro_dehydrated_weight_per_pt_bc_pcoa$', full.names = T)
) %>%
mutate(ID = str_replace(sfolder, '_scts_stool_relab_species_braycurtis_pcoa', ''),
ID = str_replace(ID, '../data/finalized/paired/pNday//allstool_','')) %>%
mutate(sfn = str_glue('{sfolder}/ordination.txt'),
dfn = str_glue('{dfolder}/ordination.txt'))
View(fns_both)
fns_both <- tibble(
sfolder = list.files('../data/finalized/paired/pNday/', pattern = 'allstool_p.d_scts_stool_relab_species_braycurtis_pcoa$', full.names = T),
dfolder = list.files('../data/finalized/paired/pNday/', pattern = 'allstool_p.d_diet_macro_dehydrated_weight_per_pt_bc_pcoa$', full.names = T)
) %>%
mutate(ID = str_replace(sfolder, '_scts_stool_relab_species_braycurtis_pcoa', ''),
ID = str_replace(ID, '../data/finalized/paired/pNday//allstool_','')) %>%
mutate(sfn = str_glue('{sfolder}/ordination.txt'),
dfn = str_glue('{dfolder}/ordination.txt'))
procrustes_Nday <- map2_dfc(fns_both$dfn, fns_both$sfn, function(dfn, sfn){
dpcoa = read_tsv(dfn, skip = 9, col_names = F)  %>%
filter(! X1 %in% c('Biplot','Site constraints')) %>%
column_to_rownames('X1') %>%
as.matrix()
spcoa = read_tsv(sfn, skip = 9, col_names = F)  %>%
filter(! X1 %in% c('Biplot','Site constraints')) %>%
column_to_rownames('X1') %>%
as.matrix()
procrustes_res = procrustes(X = dpcoa, Y = spcoa)
return( procrustes_res$ss)
}) %>%
gather(key = 'pNd', value = 'ss') %>%
mutate(pNd = fns_both$ID)
# convert it to a score so that the p2d is the highest
procrustes_Nday_score <- procrustes_Nday %>%
mutate(score = min(.$ss) - ss)
procrustes_Nday <- map2_dfc(fns_both$dfn, fns_both$sfn, function(dfn, sfn){
dpcoa = read_tsv(dfn, skip = 9, col_names = F)  %>%
filter(! X1 %in% c('Biplot','Site constraints')) %>%
column_to_rownames('X1') %>%
as.matrix()
spcoa = read_tsv(sfn, skip = 9, col_names = F)  %>%
filter(! X1 %in% c('Biplot','Site constraints')) %>%
column_to_rownames('X1') %>%
as.matrix()
procrustes_res = procrustes(X = dpcoa, Y = spcoa)
return( procrustes_res$ss)
}) %>%
gather(key = 'pNd', value = 'ss') %>%
mutate(pNd = fns_both$ID)
# convert it to a score so that the p2d is the highest
procrustes_Nday_score <- procrustes_Nday %>%
mutate(score = min(.$ss) - ss)
View(procrustes_Nday)
View(procrustes_Nday_score)
procrustes_Nday_score
# make the figure
axis_text_size <- 10
axis_title_size <- 10
procrustes_Nday_score %>%
mutate(pNd = str_extract(pNd, '\\d')) %>%
ggdotchart(x = 'pNd', y = 'score', sorting = 'none', ylab = 'Sum of squares',
xlab = 'Number of previous days\nof dietary intake', size = 1.3) +
geom_line(aes(x = pNd, y = score), group = 1, linetype = 'dashed', size = 0.3) +
theme(aspect.ratio=1,
axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
axis.text.x = element_text(angle=0, hjust=0.5))
ggsave('../figs/paper/091_macro_procrustes.pdf',
width = 100,
height = 50,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
procrustes_Nday_score %>%
write_csv('../data/091_macro_procrustes_Nday_score.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
auc <- read_csv('/Volumes/vandenbrinklab/oriana/Study ideas/bile_acids/final_datasets/all_BAs_auc.csv')
View(auc)
auc
auc <- read_csv('/Volumes/vandenbrinklab/oriana/Study ideas/bile_acids/final_datasets/all_BAs_auc.csv') %>%
select(-MRN) %>%
rename_all(~ gsub(" ", "_", .))
auc
auc <- read_csv('/Volumes/vandenbrinklab/oriana/Study ideas/bile_acids/final_datasets/all_BAs_auc.csv') %>%
select(-MRN) %>%
rename_all(~ gsub("-", "_", .)) %>%
rename_all(~ gsub(" ", "__", .))
auc
BiocManager::install("sva")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("sva")
BiocManager::install("sva")
library(sva)
?combat
?ComBat_seq
?ComBat
library(bladderbatch)
BiocManager::install("bladderbatch")
library(bladderbatch)
data(bladderdata)
dat <- bladderEset[1:50,]
pheno = pData(dat)
edata = exprs(dat)
batch = pheno$batch
mod = model.matrix(~as.factor(cancer), data=pheno)
View(dat)
library(bladderbatch)
edata = exprs(dat)
pheno = pData(dat)
View(edata)
View(pheno)
cts <- auc %>%
select(-BatchID, - Group, -sampleid)
View(cts)
cts <- auc %>%
select(-BatchID, - Group)
cts
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)])
cts
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc')
cts
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc') %>%
column_to_rownames('BA') %>%
as.matrix()
pseudo <- min(cts)
hist(cts)
boxplot(cts)
library(ggpubr)
cys
cts
tibble(value = cts) %>%
ggboxplot(y = 'value')
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc') %>%
column_to_rownames('BA') %>%
as.matrix() %>%
as.vector
cts
tibble(value = cts) %>%
ggboxplot(y = 'value')
pseudo <- min(cts)
tibble(value = cts) %>%
ggboxplot(y = 'value')
cts[cts<0] <- 0
pseudo <- min(cts)
pseudo <- min(cts[cts>0])
ctslog2 <- log2(cts + 1)
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc') %>%
column_to_rownames('BA') %>%
as.matrix()
cts[cts<0] <- 0
pseudo <- min(cts[cts>0])
ctslog2 <- log2(cts + 1)
View(ctslog2)
View(edata)
View(auc)
auc
# the pheno data
pheno <- auc %>%
select(sampleid,BatchID,  Group)
View(pheno)
pheno
# the pheno data
pheno <- auc %>%
select(sampleid,BatchID,  Group) %>%
arrange(sampleid)
all.equal(pheno$sampleid, colnames(ctslog2))
combat_ctslog2 = ComBat(dat=ctslog2, batch=pheno$BatchID, mod=NULL, par.prior=FALSE, mean.only=TRUE,prior.plots=T )
combat_ctslog2
install.packages('ggfortify')
df <- iris[1:4]
View(df)
View(combat_ctslog2)
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
# to see if the batch effects has been adjusted
# pca
library(ggfortify)
library(ggfortify)
df <- iris[1:4]
pca_res <- prcomp(df, scale. = TRUE)
autoplot(pca_res)
corrected_ctslog2 <- combat_ctslog2 %>%
as.data.frame()
View(corrected_ctslog2)
corrected_ctslog2 <- combat_ctslog2 %>%
as.data.frame() %>%
rownames_to_column('BA')
corrected_ctslog2 <- combat_ctslog2 %>%
t()
corrected_ctslog2 <- combat_ctslog2
corrected_ctslog2 <- combat_ctslog2 %>%
t()
pca_res <- prcomp(corrected_ctslog2, scale. = TRUE)
autoplot(pca_res)
data("iris")
data(iris)
iris
pca_res
autoplot(pca_res)
autoplot(pca_res)
?prcomp
?log
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc')
View(cts)
cts <- auc %>%
select(-BatchID, - Group) %>%
gather('BA', 'auc', names(.)[2]:names(.)[ncol(.)]) %>%
spread('sampleid', 'auc') %>%
column_to_rownames('BA') %>%
as.matrix()
View(cts)
pseudo <- min(cts[cts>0])
ctslog2 <- log2(cts + 1)
View(ctslog2)
pca_res <- prcomp(corrected_ctslog2, scale. = TRUE, center = T)
pca_res <- prcomp(corrected_ctslog2, scale. = TRUE, center = T)
autoplot(pca_res)
corrected_ctslog2 <- combat_ctslog2 %>%
t()
pca_res <- prcomp(corrected_ctslog2, scale. = TRUE, center = T)
autoplot(pca_res)
pca_res
autoplot(pca_res)
pca_res$rotation
pca_res <- prcomp(combat_ctslog2, scale. = TRUE, center = T)
pca_res$rotation
pca_res$center
pca_res$x
pca_res$rotation
pca_res$x
pca_res$x
pca_res <- prcomp(combat_ctslog2 %>% t(), scale. = TRUE, center = T)
pca_res$x
pca_res$x %>%
as.data.frame()
pca_res$x %>%
as.data.frame() %>%
rownames_to_column('sampleid')
pca_res$x %>%
as.data.frame() %>%
rownames_to_column('sampleid') %>%
full_join(pheno)
pca_res$x %>%
as.data.frame() %>%
rownames_to_column('sampleid') %>%
select(PC1, PC2, sampleid) %>%
full_join(pheno)
pca_res$x %>%
as.data.frame() %>%
rownames_to_column('sampleid') %>%
select(PC1, PC2, sampleid) %>%
full_join(pheno)  %>%
ggscatter(x = 'PC1', y = 'PC2', color = 'BatchID')
pca_res
combat_ctslog2 %>%
write_csv('../data/log2_transformed_auc_batch_corrected.csv')
combat_ctslog2 %>%
as.data.frame() %>%
write_csv('../data/log2_transformed_auc_batch_corrected.csv')
