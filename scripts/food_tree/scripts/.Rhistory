dpi = 400, device = 'tiff', plot = bot)
stool_alpha <- meta %>%
ggscatter(x = 'sdrt', y = 'simpson_reciprocal', alpha = alpha_val, size = point_size,
xlab = 'Day relative to HCT', shape = 'triangle',
ylab = 'Microbiome \u03b1 diversity',
title = 'Microbiome \u03b1 diversity',
add = "loess", conf.int = TRUE,
add.params = list(color = 'khaki2', fill = "darkblue", size = 1)) +
geom_point(data = pick_stool, aes(x = sdrt, y = simpson_reciprocal), col = 'khaki2', size = example_pt_line_size, shape = 'triangle') +
geom_line(data = pick_stool, aes(x = sdrt, y = simpson_reciprocal), linetype = 'solid', size = example_pt_line_size, col = 'khaki2') +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1)
bot <- plot_grid(day_cal, diet_alpha, stool_alpha,
nrow = 1,
align = 'hv',
#rel_widths =  c(1,1),
#rel_heights = c(1,1),
labels = c('C','D','E'),
axis = 'tblr')
bot
ggsave('../figs/paper/072_bot_fig1.tiff',
width = 180,
height = 60,
#height = 60,
units = c("mm"),
dpi = 400, device = 'tiff', plot = bot)
knitr::opts_chunk$set(echo = TRUE, message = F)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
colnames(meta)
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(2, 0.1), class = 'Intercept'))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_wo_EN <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_wo_EN)
# the mean food group intake from our data
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
# create a df with max and min and ave in 9 groups
# create a df with the corresponding value that the samples prior coeff can multiply
max_ <- ave_fg %>%
rename(mean_ = value) %>%
mutate(max_fg_egg = if_else(key == 'fg_egg', max_fg$fg_egg, mean_),
max_fg_fruit = if_else(key == 'fg_fruit', max_fg$fg_fruit, mean_),
max_fg_grain = if_else(key == 'fg_grain', max_fg$fg_grain, mean_),
max_fg_legume = if_else(key == 'fg_legume', max_fg$fg_legume, mean_),
max_fg_meat = if_else(key == 'fg_meat', max_fg$fg_meat, mean_),
max_fg_milk = if_else(key == 'fg_milk', max_fg$fg_milk, mean_),
max_fg_oils = if_else(key == 'fg_oils', max_fg$fg_oils, mean_),
max_fg_sweets = if_else(key == 'fg_sweets', max_fg$fg_sweets, mean_),
max_fg_veggie = if_else(key == 'fg_veggie', max_fg$fg_veggie, mean_)) %>%
select(-mean_) %>%
mutate(key = if_else(str_detect(key, '^fg'), str_glue('b_{key}'), key))  %>%
arrange(key)
values <- max_ %>%
select(-key) %>%
as.list()
values <- values %>%
map(~ set_names(x = ., max_$key))
# calculate the resulted prior log div
vals <- names(values)
#
# max_each_fg <- vals  %>%
#   set_names(vals) %>%
#   map(function(val) {
#     res = prior_coeffs$b_empiF$prior_coeff  +
#    prior_coeffs$b_enF$prior_coeff  +
#    prior_coeffs$b_fg_egg$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_egg') +
#    prior_coeffs$b_fg_fruit$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_fruit') +
#    prior_coeffs$b_fg_grain$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_grain') +
#    prior_coeffs$b_fg_legume$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_legume') +
#    prior_coeffs$b_fg_meat$prior_coeff * values %>% pluck(val) %>% pluck('b_fg_meat') +
#    prior_coeffs$b_fg_milk$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_milk') +
#    prior_coeffs$b_fg_oils$prior_coeff * values %>% pluck(val) %>% pluck('b_fg_oils') +
#    prior_coeffs$b_fg_sweets$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_sweets') +
#    prior_coeffs$b_fg_veggie$prior_coeff  * values %>% pluck(val) %>% pluck('b_fg_veggie') +
#    prior_coeffs$b_inten_re$prior_coeff  +
#    prior_coeffs$b_tpnF$prior_coeff +
#    prior_coeffs$Intercept$prior_coeff
#   }) %>%
#   bind_rows(.id = 'grp') %>%
#   gather('grp', 'prior_res')
# extract posterior samples for the coeff
post_samples  <- posterior_samples(model_wo_EN, '^b_')
# save it out for the forest plot of the coeff
post_fg_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'value')
post_fg_coeff_mean <- post_fg_coeff  %>%
group_by(item) %>%
summarise(meanperitem = mean(value))
out <- post_fg_coeff %>%
left_join(post_fg_coeff_mean, by = "item")
out %>% write_csv('../data/brms_model_var_res_updated.csv')
# make the forest plot of the post coeff
# like the one on the ash abstract
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key %>% select(fgrp1, color, shortname))  %>%
mutate(shortname = fct_reorder(shortname, coeff, .fun=median, .desc = F))
# when the food intake is average mean
###THE RESULTS IS THE LOG TRANSFORMED DIVERSITY !!!!##
ave_each_fg_post <- post_samples %>%
mutate(mean_fg = b_Intercept +
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_inten_re ) %>%
select(mean_fg) %>%
mutate(grp = 'ave_each') %>%
rename(post_res = mean_fg) %>%
select(grp, post_res)
# when the intake is max
post_coeffs <- post_samples %>%
select(b_Intercept, b_inten_re,  starts_with('b_fg')) %>%
gather('term','post_coeff') %>%
split(.$term)
max_each_fg_post <- vals  %>%
set_names(vals) %>%
map(function(val) {
res =
post_coeffs$b_fg_egg$post_coeff * values %>% pluck(val) %>% pluck('b_fg_egg') +
post_coeffs$b_fg_fruit$post_coeff * values %>% pluck(val) %>% pluck('b_fg_fruit') +
post_coeffs$b_fg_grain$post_coeff * values %>% pluck(val) %>% pluck('b_fg_grain') +
post_coeffs$b_fg_legume$post_coeff * values %>% pluck(val) %>% pluck('b_fg_legume') +
post_coeffs$b_fg_meat$post_coeff * values %>% pluck(val) %>% pluck('b_fg_meat') +
post_coeffs$b_fg_milk$post_coeff * values %>% pluck(val) %>% pluck('b_fg_milk') +
post_coeffs$b_fg_oils$post_coeff * values %>% pluck(val) %>% pluck('b_fg_oils') +
post_coeffs$b_fg_sweets$post_coeff * values %>% pluck(val) %>% pluck('b_fg_sweets') +
post_coeffs$b_fg_veggie$post_coeff * values %>% pluck(val) %>% pluck('b_fg_veggie') +
post_coeffs$b_inten_re$post_coeff  +
post_coeffs$b_Intercept$post_coeff
}) %>%
bind_rows(.id = 'grp')
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color, shortname)) %>%
mutate(shortname = fct_reorder(shortname, post_diff_original_scale, .fun=median, .desc = F))
# only plot the post diff forest in fruits and sweets
only3 <- post_diff_df %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie'))
only3 %>%
ggplot(aes(y = shortname, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Expected change in\nSimpson's reciprocal diversity",
y = '',
title = '') +
theme_classic() +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-6, 4.5) +
theme(axis.text=element_text(size=axis_text_size),
legend.position = 'none',
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
ggsave('../figs/paper/068_fig2_fg3_post_diff.eps',  width = 80,
height = 80,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
# only plot the post diff forest in fruits and sweets
only3 <- post_diff_df %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie'))
only3 %>%
ggplot(aes(y = shortname, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Expected change in\nSimpson's reciprocal diversity",
y = '',
title = '') +
theme_classic() +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-6, 4.5) +
theme(axis.text=element_text(size=axis_text_size),
legend.position = 'none',
axis.title=element_text(size=axis_title_size),
aspect.ratio=1)
ggsave('../figs/paper/068_fig2_fg3_post_diff.eps',  width = 80,
height = 80,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
knitr::opts_chunk$set(echo = TRUE)
cts <- read_csv('../data/cleaned_stool/ALL_stool_samples_genus_counts.csv') %>%
filter(sampleid %in% meta$sampleid) %>%
dplyr::select(sampleid, genus, relab)
View(cts)
blautia_mod <- Blautia ~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
blautia_cts <-  cts %>%
filter(genus %in% c('Blautia'))
View(blautia_cts)
blautia_cts <-  cts %>%
filter(genus %in% c('Blautia')) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab)
blautia_cts <-  cts %>%
filter(genus %in% c('Blautia')) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab) %>%
spread(key = 'genus', value = 'relablog')
All <- blautia_cts %>%
inner_join(meta)
View(All)
All <- blautia_cts %>%
inner_join(meta)
ncores <- parallel::detectCores()
blautia_cts <-  cts %>%
filter(genus %in% c('Blautia')) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
dplyr::select(-relab) %>%
spread(key = 'genus', value = 'relablog')
All <- blautia_cts %>%
inner_join(meta)
model_blautia <- brm( blautia_mod,
data = All,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
summary(model_blautia)
summary(model_blautia)
post_samples  <- posterior_samples(model_blautia, '^b_')
post_samples  <- posterior_samples(model_blautia, '^b_')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccccc')
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key) %>%
mutate(fdesc = str_replace_all(fdesc, '_',' ')) %>%
mutate(fdesc = str_wrap(fdesc, width = 28, indent = 2, exdent = 0)) %>%
mutate(fdesc = str_replace(fdesc, 'and','&')) %>%
left_join(key %>% select(fgrp1, color, shortname))  %>%
mutate(shortname = fct_reorder(shortname, coeff, .fun=median, .desc = F))
fg_colors <- post_coeff %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
deframe()
# plotting the forest
post_coeff %>%
ggplot(aes(x = coeff, y = shortname, col = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed') +
labs(x = 'Regression coefficients',
y = '') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = fg_colors) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10),
aspect.ratio=1)
# plotting the forest
post_coeff %>%
ggplot(aes(x = coeff, y = shortname, col = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed') +
labs(x = 'Regression coefficients',
y = '') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = fg_colors) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10),
aspect.ratio=1)
fg_colors <- post_coeff %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
deframe()
# plotting the forest
post_coeff %>%
ggplot(aes(x = coeff, y = shortname, col = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed') +
labs(x = 'Regression coefficients',
y = '') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = fg_colors) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10),
aspect.ratio=1)
post_samples  <- posterior_samples(model_blautia, '^b_')
key <- read_csv('../data/cleaned_diet_data/food_group_color_key.csv', col_types = 'ccccc')
post_coeff <- post_samples %>%
select(starts_with('b_fg')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_','')) %>%
mutate(fgrp1 = case_when(
item ==  'milk' ~ '1',
item == 'meat' ~ '2',
item ==  'egg' ~ '3',
item ==  'legume' ~ '4',
item == 'grain' ~ '5',
item == 'fruit' ~ '6',
item == 'veggie' ~ '7',
item ==  'oils' ~ '8',
item ==  'sweets' ~ '9'
))  %>%
left_join(key) %>%
mutate(fdesc = str_replace_all(fdesc, '_',' ')) %>%
mutate(fdesc = str_wrap(fdesc, width = 28, indent = 2, exdent = 0)) %>%
mutate(fdesc = str_replace(fdesc, 'and','&')) %>%
left_join(key %>% select(fgrp1, color, shortname))  %>%
mutate(shortname = fct_reorder(shortname, coeff, .fun=median, .desc = F))
fg_colors <- post_coeff %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
deframe()
# plotting the forest
post_coeff %>%
ggplot(aes(x = coeff, y = shortname, col = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, col = 'red', linetype = 'dashed') +
labs(x = 'Regression coefficients',
y = '') +
theme_classic() +
theme(legend.position = 'none') +
scale_color_manual(values = fg_colors) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10),
aspect.ratio=1)
meta %>%
summary()
View(meta)
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative')))
meta %>%
summary()
meta %>%
summary()
knitr::opts_chunk$set(echo = TRUE)
file.path()
file.path('../data/054_Enterococcaceae_model_post.csv')
list.files('../data/growth/irep/bhatirep/','_R1.fastq.gz' )
list.files('../data/growth/irep/bhatirep/', pattern = '_R1.fastq.gz' , full.names = T)
list.files('../data/growth/irep/bhatirep/')
list.files('../data/growth/irep/bhatirep/', 'pdf')
Sys.glob(file.path('../data/growth/irep/bhatirep/', 'pdf'))
Sys.glob(file.path('../data/growth/irep/bhatirep/', '*pdf'))
Sys.glob(file.path('../data/growth/irep/bhatirep', '*pdf'))
list.files('../data/growth/irep/bhatirep/', 'pdf')
list.files('../data/growth/irep/bhatirep/', 'pdf', full.names = T)
list.files('../data/growth/irep/bhatirep', 'pdf', full.names = T)
Sys.glob(file.path('../data/growth/irep/bhatirep', '*pdf'))
?list.files
sort(list.files('../data/growth/irep/bhatirep', 'pdf', full.names = T))
knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('shotgun_lookup_ad')
View(shotgun_lookup_ad)
