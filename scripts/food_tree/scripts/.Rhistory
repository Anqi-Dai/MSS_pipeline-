fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(inten_non = if_else(intensity == 'nonablative', 1, 0),
inten_ab = if_else(intensity == 'ablative', 1, 0),
inten_re = if_else(intensity == 'reduced', 1, 0))
colnames(meta)
glimpse(meta)
meta %>%
select(-mrn, -disease.simple, -admit_wt, -ci) %>%
mutate(inten_non = factor(inten_non),
inten_ab = factor(inten_ab),
inten_re = factor(inten_re)) %>%
summary
# the mean food group intake from our data
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
# what priors I cann set
model_formular <- log(simpson_reciprocal)~
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "inten_re"),
prior(normal(2, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(2, 0.1), class = 'b', coef = "inten_non"))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div)) %>%
select(-starts_with('r_'))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
View(post_res)
model_div
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 0+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 1+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 1+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 0+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "inten_re"),
prior(normal(2, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(2, 0.1), class = 'b', coef = "inten_non"))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div)) %>%
select(-starts_with('r_'))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
model_div
model_div
model_div
# extract posterior samples for the coeff
post_samples  <- read_csv('../data/068_div_model_fg_post.csv')
# extract posterior samples for the coeff
post_samples  <- read_csv('../data/068_div_model_fg_post.csv')
View(post_samples)
coeff_bi <- post_samples %>%
select(!starts_with('b_fg'))
View(coeff_bi)
coeff_bi <- post_samples %>%
select(starts_with('b_')) %>%
select(!starts_with('b_fg'))
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 0+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ -1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
post_res <- suppressWarnings(posterior_samples(model_div))
# what priors I cann set
model_formular <- log(simpson_reciprocal)~ 1 +
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
inten_non + inten_ab + inten_re +
empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior( model_formular,
data = meta)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(2, 0.1), class = 'b', coef = "inten_re"),
prior(normal(2, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(2, 0.1), class = 'b', coef = "inten_non"))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal(0, 0.1), class = 'b', coef = "inten_re"),
prior(normal(0, 0.1), class = 'b', coef = "inten_ab"),
prior(normal(0, 0.1), class = 'b', coef = "inten_non"),
prior(normal(2, 0.1), class = 'Intercept'))
# samples are drawn solely from the priors ignoring the likelihood
# model_wo_EN  means the usual model that the EN is still a binary variable and not ann inndivicual group
model_div <- brm( model_formular,
data = meta,
warmup = 1000, iter = 3000,
prior = priors,
cores = ncores,
chains = 2,
seed = 123, sample_prior = T)
# actually draw samples from the priors
samples_prior <- prior_draws(model_div)
# save it for future use
post_res <- suppressWarnings(posterior_samples(model_div)) %>%
select(-starts_with('r_'))
post_res %>%  write_csv('../data/068_div_model_fg_post.csv')
post_res <- suppressWarnings(posterior_samples(model_div))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
list_table_from_database('metaphlan')
get_table_from_database('metaphlan_shotgun_rel_abundance')
test
fns <- list.files('../data/NEW_naming/', full.names = T)
test <- read_tsv(fns[1], skip = 4) %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__'))
test
test <- read_tsv(fns[1], skip = 4, col_types = 'ccddd') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__'))
all_current_metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddd') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) )
View(all_current_metaphlan)
View(all_current_metaphlan[["../data/NEW_naming//Sample_1042U_IGO_07976_97_metaphlan3_profile.txt"]])
all_current_metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddd') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) ) %>%
bind_rows(.id = 'full_id')
View(all_current_metaphlan)
all_current_metaphlan
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt',''))
View(cleaned_metaphlan)
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
metaphlan_shotgun_rel_abundance
colnames(fread)
colnames(metaphlan_shotgun_rel_abundance)
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901')
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
get_table_from_database('qpcr_16s_ag')
qpcr_16s_ag
View(qpcr_16s_ag)
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901') %>%
mutate(key = seq(1, nrow(.)))
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
View(test)
fns <- list.files('../data/NEW_naming/', full.names = T)
test <- read_tsv(fns[1], skip = 4, col_types = 'ccddi') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__'))
test
all_current_metaphlan <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddi') %>%
rename(clade_name = `#clade_name`) %>%
mutate(relative_abundance = relative_abundance/100) %>%
filter(str_detect(clade_name, 's__')) ) %>%
bind_rows(.id = 'full_id')
cleaned_metaphlan <- all_current_metaphlan %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_metaphlan3_profile.txt','')) %>%
mutate(CHOCOPhlAn_version  = 'mpa_v30_CHOCOPhlAn_201901')
cleaned_metaphlan %>% write_csv('../data/metaphlan_cleaned_220502.csv')
View(qpcr_16s_ag)
View(cleaned_metaphlan)
library(vdbR)
connect_database()
query_create_temp_table = glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
library(tidyverse)
query_create_temp_table = glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
query_create_temp_table = str_glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
dbSendQuery(con,query_create_temp_table);
dbSendQuery(psql_con,query_create_temp_table)
dbGetQuery(psql_con,query_create_temp_table)
exsiting_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
exsiting_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
existing_data <- dbGetQuery(psql_con,query_create_temp_table)
new_data <-  anti_join(cleaned_metaphlan, existing_data)
new_data <- cleaned_metaphlan
dbWriteTable(con, "metaphlan_shotgun_rel_abundance", value = new_data, append = TRUE, row.names = FALSE);
dbWriteTable(psql_con, "metaphlan_shotgun_rel_abundance", value = new_data, append = TRUE, row.names = FALSE);
dbWriteTable(psql_con, "metaphlan_shotgun_rel_abundance",
value = new_data %>%
mutate(upload_date=Sys.Date()), append = TRUE, row.names = FALSE);
query_create_temp_table = str_glue("SELECT * FROM metaphlan_shotgun_rel_abundance")
existing_data <- dbGetQuery(psql_con,query_create_temp_table)
if(nrow(existing_data) !=0){
new_data <-  anti_join(cleaned_metaphlan, existing_data)
} else{
new_data <- cleaned_metaphlan
}
nrow(existing_data)
anti_join(cleaned_metaphlan, existing_data)
if(nrow(existing_data) !=0){
new_data <-  anti_join(cleaned_metaphlan, existing_data)
} else{
new_data <- cleaned_metaphlan
}
existing_data
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, -upload_date))
colnames(existing_data %>% select(-key, -upload_date))
colnames(cleaned_metaphlan)
colnames(cleaned_metaphlan) == colnames(existing_data %>% select(-key, -upload_date))
new_data <-  anti_join(cleaned_metaphlan, existing_data %>% select(-key, -upload_date))
str(existing_data)
str(cleaned_metaphlan)
cleaned_metaphlan_df <- as.data.frame(cleaned_metaphlan)
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date))
str(cleaned_metaphlan_df)
new_data
View(new_data)
str(new_data)
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date))
View(new_data)
View(existing_data)
new_data <-  anti_join(cleaned_metaphlan_df%>% select(-relative_abundance, coverage ), existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
new_data <-  anti_join(cleaned_metaphlan_df%>% select(-relative_abundance, -coverage ), existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
new_data <-  anti_join(cleaned_metaphlan_df, existing_data %>% select(-key, -upload_date, -relative_abundance, -coverage ))
View(cleaned_metaphlan_df)
library(tidyverse)
library(vdbR)
connect_database()
get_table_from_database('metaphlan_shotgun_rel_abundance')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
ko <-  list.files('../data/NEW_naming/', full.names = T, pattern = 'humann3_KO_cpm')
test <- read_tsv(ko[1])
test <- read_tsv(ko[1],  col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(pathway, '\\|')) %>%
rename(ko_cpm = names(.)[2])
ko <-  list.files('../data/NEW_naming/', full.names = T, pattern = 'humann3_KO_cpm')
test <- read_tsv(ko[1])
test <- read_tsv(ko[1],  col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|')) %>%
rename(ko_cpm = names(.)[2])
all_unstratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id')
View(all_unstratified)
all_unstratified
all_unstratified <- ko %>%
set_names(ko) %>%
map(~ read_tsv(., col_types = 'cd') %>%
rename(KO = `# Gene Family`) %>%
filter(!str_detect(KO, '\\|'))  %>%
rename(ko_cpm = names(.)[2]) ) %>%
bind_rows(.id = 'full_id') %>%
mutate(full_id = str_replace(full_id, '../data/NEW_naming//',''),
full_id = str_replace(full_id, '_humann3_KO_cpm.tsv',''))
View(all_unstratified)
all_unstratified %>% write_csv('../data/all_unstratified_cleaned_KO.csv')
all_unstratified
get_table_from_database('humann_shotgun_KO_cpm_unstratified')
get_table_from_database('humann_shotgun_KO_cpm_unstratified')
