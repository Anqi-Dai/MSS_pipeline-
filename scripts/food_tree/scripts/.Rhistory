) +theme(plot.margin = unit(c(1,4,6,5), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
#fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <-  plot_grid( plotlist = list(prior_pred, fg_pt),
ncol = 1,  lables = c('A','B'))
class(prior_pred)
class(fg_pt)
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"),
ncol = 1, nrow = 2)
S3
#fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <-  plot_grid( plotlist = list(prior_pred, fg_pt),
ncol = 1,  lables = c('A','B'))
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,4,6,5), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
#fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <-  plot_grid( plotlist = list(prior_pred, fg_pt),
ncol = 1,  lables = c('A','B'))
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,1,1,1), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
#fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <-  plot_grid( plotlist = list(prior_pred, fg_pt),
ncol = 1,  lables = c('A','B'))
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,3,1,3), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
fg_pt <- read_rds('../data/176_fg_intensity.rds')
fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <-  plot_grid( plotlist = list(prior_pred, fg_pt),
ncol = 1,  lables = c('A','B'))
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,3,1,3), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
fg_pt <- read_rds('../data/176_fg_intensity.rds')
S3 <- ggarrange(prior_pred, fg_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S3",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S3,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,3,1,3), "cm"))
ggsave('../data/S3_pp_check_and_intensity_173.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
clr_res <- clr(cts_all + 0.5) %>%
as.data.frame()  %>%
rownames_to_column('genus') %>%
gather('sampleid','clr', names(.)[2]:names(.)[ncol(.)])
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
library(ggridges)
library(brmstools)
library(compositions)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
meta <- read_csv('../data/153_combined_META.csv')
library(vdbR)
connect_database('~/dbConfig.txt')
meta <- read_csv('../data/153_combined_META.csv')
library(vdbR)
connect_database('~/dbConfig.txt')
get_table_from_database('asv_annotation_blast_ag')
cts <- get_counts_subset(meta$sampleid)
cts_ <- cts %>%
select(asv_key, sampleid, count)
annot <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts_$asv_key)
cts_all <- cts_ %>%
left_join(annot %>%  select(asv_key, genus), by  = 'asv_key') %>%
group_by(sampleid, genus) %>%
summarise(cnt = sum(count)) %>%
spread('sampleid', 'cnt', fill = 0) %>%
filter(!is.na(genus)) %>%
column_to_rownames('genus')
clr_res <- clr(cts_all + 0.5) %>%
as.data.frame()  %>%
rownames_to_column('genus') %>%
gather('sampleid','clr', names(.)[2]:names(.)[ncol(.)])
View(clr_res)
clr_res %>% write_csv('../data/171_genus_CLR_res.csv')
meta <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100) %>%
mutate(abx = if_else(empirical == 'TRUE', 1, 0),
TPN = if_else(TPN == 'TRUE', 1, 0),
EN = if_else(EN == 'TRUE', 1, 0)) %>%
mutate(      fg_fruit_e= fg_fruit*abx,
fg_meat_e=fg_meat*abx,
fg_milk_e=fg_milk*abx,
fg_oils_e=fg_oils*abx,
fg_egg_e=fg_egg*abx,
fg_grain_e=fg_grain*abx,
fg_sweets_e=fg_sweets*abx,
fg_legume_e=fg_legume*abx,
fg_veggie_e = fg_veggie*abx)
clr_few <- clr_res %>%
#filter(genus %in% c('Enterococcus')) %>%
spread('genus','clr')
# still use the log10 cuz that's what I have always been using this time
gcts <- read_csv('../data/088_genus_relab_log10_wide.csv') %>%
select(sampleid, Enterococcus)
extra_full <- meta %>%
inner_join(clr_few)
clr_entero <- clr_res %>%
filter(genus %in% c('Enterococcus'))
extra_entero <- meta %>%
inner_join(clr_entero)
clr_entero <- clr_res %>%
filter(genus %in% c('Enterococcus'))
View(clr_entero)
View(clr_entero)
extra_entero <- meta %>%
inner_join(clr_entero)
View(extra_entero)
priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "fg_egg_e"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit_e"),
prior(normal(0, 1), class = 'b', coef = "fg_grain_e"),
prior(normal(0, 1), class = 'b', coef = "fg_legume_e"),
prior(normal(0, 1), class = 'b', coef = "fg_meat_e"),
prior(normal(0, 1), class = 'b', coef = "fg_milk_e"),
prior(normal(0, 1), class = 'b', coef = "fg_oils_e"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets_e"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie_e"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPN"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "EN"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "abx")
# for the intensity
# prior(normal(-3, 1), class = 'b', coef = "intensityablative"),
# prior(normal(-3, 1), class = 'b', coef = "intensityreduced"),
# prior(normal(-3, 1), class = 'b', coef = "intensitynonablative")
)
# prior predictive check
entero_model <- Enterococcus ~ 0 +
intensity+
fg_fruit_e+
fg_meat_e+
fg_milk_e+
fg_oils_e+
fg_egg_e+
fg_grain_e+
fg_sweets_e+
fg_legume_e+
fg_veggie_e+
abx+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
fitPrior_entero <- brm(entero_model, data=extra_entero,
family = 'gaussian',
prior=priors,
sample_prior = "only")
clr_entero
extra_entero <- meta %>%
inner_join(clr_entero) %>%
rename(Enterococcus = clr)
# prior predictive check
entero_model <- Enterococcus ~ 0 +
intensity+
fg_fruit_e+
fg_meat_e+
fg_milk_e+
fg_oils_e+
fg_egg_e+
fg_grain_e+
fg_sweets_e+
fg_legume_e+
fg_veggie_e+
abx+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
fitPrior_entero <- brm(entero_model, data=extra_entero,
family = 'gaussian',
prior=priors,
sample_prior = "only")
fitPrior_entero <- brm(entero_model, data=extra_entero,
family = 'gaussian',
prior=priors,  control = list(adapt_delta = 0.99),
sample_prior = "only")
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = '') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = 'Enterococcus relative abundance CLR transformed') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = 'Enterococcus relative abundance CLR transformed') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
set.seed(123)
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = 'Enterococcus relative abundance CLR transformed') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = 'Enterococcus relative abundance CLR transformed') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
prior_pred_entero <- pp_check(fitPrior_entero, type = "boxplot", nreps = 10, notch = FALSE, alpha = 0) +
labs(y = 'Enterococcus relative abundance CLR transformed') +
scale_color_discrete(labels=c('observed distribution', 'simulated from prior predictive distribution')) +
theme(legend.position = 'bottom', legend.title = element_blank())
prior_pred_entero
# the intercept from the enterococcus one with its CLR transformation
entero <- read_csv('../data/171_entero_model_fg_post_interaction.csv')  %>%
select(starts_with('b_')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_',''),
item = str_replace(item, 'b_',''),
item = str_replace(item, 'intensity','')) %>%
mutate(grp = if_else(item %in% c('nonablative','reduced','ablative'), 'patient', 'temporal'))%>%
mutate(shortname = item,
shortname = case_when(
item ==  'nonablative' ~ 'Nonablative',
item ==  'reduced' ~ 'Reduced',
item ==  'ablative' ~ 'Ablative',
TRUE ~ `shortname`
))
entero_pt <- entero %>%
filter(grp == 'patient') %>%
mutate(shortname = factor(shortname, levels = c('Nonablative','Reduced','Ablative'))) %>%
ggplot(aes(x = coeff, y = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
labs(x = 'CLR(Enterococcus) change', y = '') +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text = element_text( size = 10),
panel.background = element_rect(fill = "#d0cccc",colour = "#d0cccc",size = 0.5, linetype = "solid"),axis.title=element_text(size=10),
aspect.ratio=1/3.1)
S4 <- ggarrange(prior_pred_entero, entero_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
S4
title <- ggdraw() +
draw_label(
"Fig S4",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
# the intercept from the enterococcus one with its CLR transformation
entero <- read_csv('../data/171_entero_model_fg_post_interaction.csv')  %>%
select(starts_with('b_')) %>%
gather('item', 'coeff') %>%
mutate(item = str_replace(item, 'b_fg_',''),
item = str_replace(item, 'b_',''),
item = str_replace(item, 'intensity','')) %>%
mutate(grp = if_else(item %in% c('nonablative','reduced','ablative'), 'patient', 'temporal'))%>%
mutate(shortname = item,
shortname = case_when(
item ==  'nonablative' ~ 'Nonablative',
item ==  'reduced' ~ 'Reduced',
item ==  'ablative' ~ 'Ablative',
TRUE ~ `shortname`
))
entero_pt <- entero %>%
filter(grp == 'patient') %>%
mutate(shortname = factor(shortname, levels = c('Nonablative','Reduced','Ablative'))) %>%
ggplot(aes(x = coeff, y = shortname)) +
stat_pointinterval(.width = c(.66, .95)) +
labs(x = 'CLR(Enterococcus) change', y = '') +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text = element_text( size = 10),
panel.background = element_rect(fill = "#d0cccc",colour = "#d0cccc",size = 0.5, linetype = "solid"),axis.title=element_text(size=10),
aspect.ratio=1/3.1)
S4 <- ggarrange(prior_pred_entero, entero_pt,
labels = c("A", "B"), align = "v",
ncol = 1, nrow = 2)
title <- ggdraw() +
draw_label(
"Fig S4",
fontface = 'bold',
x = 0,
hjust = 0
) +
theme(
plot.margin = margin(0, 0, 0, 7)
)
combined <- plot_grid(
title, S4,
ncol = 1,
# rel_heights values control vertical title margins
rel_heights = c(0.1, 1)
) +theme(plot.margin = unit(c(1,3,1,3), "cm"))
ggsave('../data/S4_pp_check_and_intensity_enterococcus_171.pdf',
width = 210, height = 297, units = "mm", device = 'pdf',
#plot = combined,
dpi = 300)
?hclust
