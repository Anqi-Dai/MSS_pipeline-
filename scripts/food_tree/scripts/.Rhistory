mutate(yaxis = factor(yaxis, levels = c('log(Simpson reciprocal)','log10(Blautia)','log10(Enterococcus)'))) %>%
gather('xaxis', 'number', ave_cal:ave_carb) %>%
mutate(xaxis = case_when(
xaxis == 'ave_cal' ~ 'Calorie',
xaxis == 'ave_carb' ~ 'Carb',
xaxis == 'ave_Sugars' ~ 'Sugar',
xaxis == 'ave_fiber' ~ 'Fiber',
xaxis == 'ave_Protein' ~ 'Protein',
xaxis == 'ave_fat' ~ 'Fat'
)) %>%
mutate(xaxis = factor(xaxis, levels = c('Calorie','Carb','Sugar','Fiber','Protein','Fat')))
small_panel_split_each <- small_panel %>%  split(., list(.$xaxis, .$yaxis))
small_panel_split_each_fig <- small_panel_split_each %>%
imap(function(.x, .y){
res = summary(lm(value ~ number, data = .x ))
pval = round(res$coefficients[2, 'Pr(>|t|)'], 2)
# the spearman correlation
spearman_cor = cor.test(.x$number, .x$value, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
ggscatter(data = .x,x = 'number', y = 'value', alpha = 0.1, xlab ='',
ylab = '',size = 1.2, pch = 19,
title =  str_glue('{.y}\nlm pval: {pval}\nRho: {spearman_rho}\nrank pval:{spearman_pval}'),
add = "reg.line",  # Add regressin line
add.params = list(color = "darkblue", fill = "gray59"), # Customize line
conf.int = TRUE, # Add confidence interval
) +
#facet_grid_sc(rows = vars(yaxis), cols = vars(xaxis), scales = list(y = scales_y, x = scales_x)) +
theme_classic(base_size = 11) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = "gray97"),
panel.grid.major = element_blank(),
plot.title = element_text(size=10),
#strip.background = element_blank(),
#strip.text = element_blank(),
panel.grid.minor = element_blank()
)
})
})
STB <- read_csv('../data/152_combined_STB.csv')
# get the relab of the blautia and enterococcus of those
cts_genus2 <- read_csv('../data/150_b2_stool_samples_genus_counts.csv')
cts_genus1 <- read_csv('../data/cleaned_stool/022_ALL_stool_samples_genus_counts.csv')
zero_transform <- log10(0 + 2*10^-6)
genera2 <- bind_rows(cts_genus1, cts_genus2) %>%
filter(genus %in% c('Enterococcus','Blautia')) %>%
mutate(relablog = log10(relab + 2*10^-6)) %>%
select(sampleid, genus, relablog) %>%
spread('genus', 'relablog', fill = zero_transform) %>%
right_join(STB %>% select(sampleid, simpson_reciprocal, intensity)) %>%
mutate(Enterococcus = if_else(is.na(Enterococcus), zero_transform, Enterococcus),
Blautia = if_else(is.na(Blautia), zero_transform, Blautia))
p2d_all <- p2d_diet %>% full_join(genera2)
colnames(p2d_all)
split3 <- p2d_all %>%
split(.$intensity) %>%
map(function(small_df){
small_panel <- small_df %>%
mutate(simpson_reciprocal_nlog  = log(simpson_reciprocal)) %>%
rename(`log10(Blautia)` = Blautia,
`log10(Enterococcus)` = Enterococcus,
`log(Simpson reciprocal)` = simpson_reciprocal_nlog) %>%
dplyr::select(`log(Simpson reciprocal)`, `log10(Blautia)`, `log10(Enterococcus)`,  ave_cal:ave_carb ) %>%
mutate(ave_cal = ave_cal/1000) %>%  # now divide the value by 1000 to save some space in x axis text!!!
gather('yaxis', 'value', `log(Simpson reciprocal)`:`log10(Enterococcus)`) %>%
mutate(yaxis = factor(yaxis, levels = c('log(Simpson reciprocal)','log10(Blautia)','log10(Enterococcus)'))) %>%
gather('xaxis', 'number', ave_cal:ave_carb) %>%
mutate(xaxis = case_when(
xaxis == 'ave_cal' ~ 'Calorie',
xaxis == 'ave_carb' ~ 'Carb',
xaxis == 'ave_Sugars' ~ 'Sugar',
xaxis == 'ave_fiber' ~ 'Fiber',
xaxis == 'ave_Protein' ~ 'Protein',
xaxis == 'ave_fat' ~ 'Fat'
)) %>%
mutate(xaxis = factor(xaxis, levels = c('Calorie','Carb','Sugar','Fiber','Protein','Fat')))
small_panel_split_each <- small_panel %>%  split(., list(.$xaxis, .$yaxis))
small_panel_split_each_fig <- small_panel_split_each %>%
imap(function(.x, .y){
res = summary(lm(value ~ number, data = .x ))
pval = round(res$coefficients[2, 'Pr(>|t|)'], 2)
# the spearman correlation
spearman_cor = cor.test(.x$number, .x$value, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
ggscatter(data = .x,x = 'number', y = 'value', alpha = 0.1, xlab ='',
ylab = '',size = 1.2, pch = 19,
title =  str_glue('{.y}\nlm pval: {pval}\nRho: {spearman_rho}\nrank pval:{spearman_pval}'),
add = "reg.line",  # Add regressin line
add.params = list(color = "darkblue", fill = "gray59"), # Customize line
conf.int = TRUE, # Add confidence interval
) +
#facet_grid_sc(rows = vars(yaxis), cols = vars(xaxis), scales = list(y = scales_y, x = scales_x)) +
theme_classic(base_size = 11) +
theme(aspect.ratio = 1,
panel.background = element_rect(fill = "gray97"),
panel.grid.major = element_blank(),
plot.title = element_text(size=10),
#strip.background = element_blank(),
#strip.text = element_blank(),
panel.grid.minor = element_blank()
)
})
})
# assemble figure
ablatives <- split3[['ablative']]
g <- cowplot::plot_grid(ablatives[[1]],ablatives[[2]],ablatives[[3]],ablatives[[4]],ablatives[[5]],ablatives[[6]],ablatives[[7]],ablatives[[8]],ablatives[[9]],ablatives[[10]],ablatives[[11]],ablatives[[12]],ablatives[[13]],ablatives[[14]],ablatives[[15]],ablatives[[16]],ablatives[[17]],ablatives[[18]],
ncol = 6,
o = 'hv',labels = 'Ablative',label_y = -2,
#labels = 'AUTO',
axis = 'bltr')
ggsave(str_glue('../data/154_p2d_combined_conditioning_ablative.jpg'), width = 12, height = 8,  plot = g)
nonablative <- split3[['nonablative']]
g <- cowplot::plot_grid(nonablative[[1]],nonablative[[2]],nonablative[[3]],nonablative[[4]],nonablative[[5]],nonablative[[6]],nonablative[[7]],nonablative[[8]],nonablative[[9]],nonablative[[10]],nonablative[[11]],nonablative[[12]],nonablative[[13]],nonablative[[14]],nonablative[[15]],nonablative[[16]],nonablative[[17]],nonablative[[18]],
ncol = 6,
o = 'hv',labels = 'Nonablative',label_y = -2,
#labels = 'AUTO',
axis = 'bltr')
ggsave(str_glue('../data/154_p2d_combined_conditioning_nonablative.jpg'), width = 12, height = 8,  plot = g)
reduced <- split3[['reduced']]
g <- cowplot::plot_grid(reduced[[1]],reduced[[2]],reduced[[3]],reduced[[4]],reduced[[5]],reduced[[6]],reduced[[7]],reduced[[8]],reduced[[9]],reduced[[10]],reduced[[11]],reduced[[12]],reduced[[13]],reduced[[14]],reduced[[15]],reduced[[16]],reduced[[17]],reduced[[18]],
ncol = 6,
o = 'hv',labels = 'reduced',label_y = -2,
#labels = 'AUTO',
axis = 'bltr')
ggsave(str_glue('../data/154_p2d_combined_conditioning_reduced.jpg'), width = 12, height = 8,  plot = g)
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
library(tidyverse)
library(ggpubr)
library(tidyverse)
library(ggpubr)
library(tidybayes)
library(cowplot)
META <- read_csv('../data/153_combined_META.csv')
META_mod <- META %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
meta <- META %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
# when the intake is max
post_samples  <- read_csv('../data/153_model_fg_post_all2.csv')
post_coeffs <- post_samples %>%
select(b_intensityreduced,  starts_with('b_fg')) %>%
gather('term','post_coeff') %>%
split(.$term)
post_coeffs
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
# create a df with max and min and ave in 9 groups
# create a df with the corresponding value that the samples prior coeff can multiply
max_ <- ave_fg %>%
rename(mean_ = value) %>%
mutate(max_fg_egg = if_else(key == 'fg_egg', max_fg$fg_egg, mean_),
max_fg_fruit = if_else(key == 'fg_fruit', max_fg$fg_fruit, mean_),
max_fg_grain = if_else(key == 'fg_grain', max_fg$fg_grain, mean_),
max_fg_legume = if_else(key == 'fg_legume', max_fg$fg_legume, mean_),
max_fg_meat = if_else(key == 'fg_meat', max_fg$fg_meat, mean_),
max_fg_milk = if_else(key == 'fg_milk', max_fg$fg_milk, mean_),
max_fg_oils = if_else(key == 'fg_oils', max_fg$fg_oils, mean_),
max_fg_sweets = if_else(key == 'fg_sweets', max_fg$fg_sweets, mean_),
max_fg_veggie = if_else(key == 'fg_veggie', max_fg$fg_veggie, mean_)) %>%
select(-mean_) %>%
mutate(key = if_else(str_detect(key, '^fg'), str_glue('b_{key}'), key))  %>%
arrange(key)
values <- max_ %>%
select(-key) %>%
as.list()
values <- values %>%
map(~ set_names(x = ., max_$key))
# calculate the resulted prior log div
vals <- names(values)
max_each_fg_post <- vals  %>%
set_names(vals) %>%
map(function(val) {
res =
post_coeffs$b_fg_egg$post_coeff * values %>% pluck(val) %>% pluck('b_fg_egg') +
post_coeffs$b_fg_fruit$post_coeff * values %>% pluck(val) %>% pluck('b_fg_fruit') +
post_coeffs$b_fg_grain$post_coeff * values %>% pluck(val) %>% pluck('b_fg_grain') +
post_coeffs$b_fg_legume$post_coeff * values %>% pluck(val) %>% pluck('b_fg_legume') +
post_coeffs$b_fg_meat$post_coeff * values %>% pluck(val) %>% pluck('b_fg_meat') +
post_coeffs$b_fg_milk$post_coeff * values %>% pluck(val) %>% pluck('b_fg_milk') +
post_coeffs$b_fg_oils$post_coeff * values %>% pluck(val) %>% pluck('b_fg_oils') +
post_coeffs$b_fg_sweets$post_coeff * values %>% pluck(val) %>% pluck('b_fg_sweets') +
post_coeffs$b_fg_veggie$post_coeff * values %>% pluck(val) %>% pluck('b_fg_veggie') +
post_coeffs$b_intensityreduced$post_coeff
}) %>%
bind_rows(.id = 'grp')
ave_each_fg_post <- post_samples %>%
mutate(mean_fg =
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_intensityreduced ) %>%
select(mean_fg) %>%
mutate(grp = 'ave_each') %>%
rename(post_res = mean_fg) %>%
select(grp, post_res)
max_each_fg_post
max_each_fg_post
# create a df with max and min and ave in 9 groups
# create a df with the corresponding value that the samples prior coeff can multiply
max_ <- ave_fg %>%
rename(mean_ = value) %>%
mutate(max_fg_egg = if_else(key == 'fg_egg', max_fg$fg_egg, mean_),
max_fg_fruit = if_else(key == 'fg_fruit', max_fg$fg_fruit, mean_),
max_fg_grain = if_else(key == 'fg_grain', max_fg$fg_grain, mean_),
max_fg_legume = if_else(key == 'fg_legume', max_fg$fg_legume, mean_),
max_fg_meat = if_else(key == 'fg_meat', max_fg$fg_meat, mean_),
max_fg_milk = if_else(key == 'fg_milk', max_fg$fg_milk, mean_),
max_fg_oils = if_else(key == 'fg_oils', max_fg$fg_oils, mean_),
max_fg_sweets = if_else(key == 'fg_sweets', max_fg$fg_sweets, mean_),
max_fg_veggie = if_else(key == 'fg_veggie', max_fg$fg_veggie, mean_)) %>%
select(-mean_) %>%
mutate(key = if_else(str_detect(key, '^fg'), str_glue('b_{key}'), key))  %>%
arrange(key)
values <- max_ %>%
select(-key) %>%
as.list()
values <- values %>%
map(~ set_names(x = ., max_$key))
# calculate the resulted prior log div
vals <- names(values)
max_each_fg_post <- vals  %>%
set_names(vals) %>%
map(function(val) {
res =
post_coeffs$b_fg_egg$post_coeff * values %>% pluck(val) %>% pluck('b_fg_egg') +
post_coeffs$b_fg_fruit$post_coeff * values %>% pluck(val) %>% pluck('b_fg_fruit') +
post_coeffs$b_fg_grain$post_coeff * values %>% pluck(val) %>% pluck('b_fg_grain') +
post_coeffs$b_fg_legume$post_coeff * values %>% pluck(val) %>% pluck('b_fg_legume') +
post_coeffs$b_fg_meat$post_coeff * values %>% pluck(val) %>% pluck('b_fg_meat') +
post_coeffs$b_fg_milk$post_coeff * values %>% pluck(val) %>% pluck('b_fg_milk') +
post_coeffs$b_fg_oils$post_coeff * values %>% pluck(val) %>% pluck('b_fg_oils') +
post_coeffs$b_fg_sweets$post_coeff * values %>% pluck(val) %>% pluck('b_fg_sweets') +
post_coeffs$b_fg_veggie$post_coeff * values %>% pluck(val) %>% pluck('b_fg_veggie') +
post_coeffs$b_intensityreduced$post_coeff
}) %>%
bind_rows(.id = 'grp')
ave_each_fg_post <- post_samples %>%
mutate(mean_fg =
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_intensityreduced ) %>%
select(mean_fg) %>%
mutate(grp = 'ave_each') %>%
rename(post_res = mean_fg) %>%
select(grp, post_res)
maxs <- max_each_fg_post %>%  as.list()
two_diff <- map(maxs,  .f = function(maxi){
tibble(
max_=maxi,
ave=ave_each_fg_post$post_res
)  %>%
mutate(diff_max_ave = exp(max_) - exp(ave))
})%>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color, shortname))
maxs <- max_each_fg_post %>%  as.list()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
two_diff <- map(maxs,  .f = function(maxi){
tibble(
max_=maxi,
ave=ave_each_fg_post$post_res
)  %>%
mutate(diff_max_ave = exp(max_) - exp(ave))
})%>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color, shortname))
View(two_diff)
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie')) %>%
gather('grp', 'post_diff', diff_max_ave:diff_min_ave) %>%
group_by(term, shortname, grp) %>%
arrange(shortname, grp) %>%
mutate(xtxt = str_glue('{shortname}__{grp}')) %>%
ggplot(aes(y = xtxt, x = post_diff, col =grp )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = 'Change in alpha diversity',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie'))
View(two_diff_plot)
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie')) %>%
ggplot(aes(y = term, x = diff_max_ave )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
#scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = 'Change in alpha diversity',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
two_diff_plot
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie')) %>%
ggplot(aes(y = term, x = diff_max_ave )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
#scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = 'Change in alpha diversity',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
#axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie')) %>%
ggplot(aes(y = term, x = diff_max_ave )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
#scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = 'Change in alpha diversity',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
#axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
two_diff_plot
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(tidybayes)
library(cowplot)
META <- read_csv('../data/153_combined_META.csv')
meta <- META %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn)) %>%
mutate(fg_egg = fg_egg/100,
fg_fruit = fg_fruit/100,
fg_grain = fg_grain/100,
fg_legume = fg_legume/100,
fg_meat = fg_meat/100,
fg_milk = fg_milk/100,
fg_oils = fg_oils/100,
fg_sweets = fg_sweets/100,
fg_veggie = fg_veggie/100)
ave_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean)) %>%
gather
mean_fg <-  meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(mean))
max_fg <- meta %>%
select(starts_with('fg')) %>%
summarise_all(funs(max))
# when the intake is max
post_samples  <- read_csv('../data/153_model_fg_post_all2.csv')
post_coeffs <- post_samples %>%
select(b_intensityreduced,  starts_with('b_fg')) %>%
gather('term','post_coeff') %>%
split(.$term)
# create a df with max and min and ave in 9 groups
# create a df with the corresponding value that the samples prior coeff can multiply
max_ <- ave_fg %>%
rename(mean_ = value) %>%
mutate(max_fg_egg = if_else(key == 'fg_egg', max_fg$fg_egg, mean_),
max_fg_fruit = if_else(key == 'fg_fruit', max_fg$fg_fruit, mean_),
max_fg_grain = if_else(key == 'fg_grain', max_fg$fg_grain, mean_),
max_fg_legume = if_else(key == 'fg_legume', max_fg$fg_legume, mean_),
max_fg_meat = if_else(key == 'fg_meat', max_fg$fg_meat, mean_),
max_fg_milk = if_else(key == 'fg_milk', max_fg$fg_milk, mean_),
max_fg_oils = if_else(key == 'fg_oils', max_fg$fg_oils, mean_),
max_fg_sweets = if_else(key == 'fg_sweets', max_fg$fg_sweets, mean_),
max_fg_veggie = if_else(key == 'fg_veggie', max_fg$fg_veggie, mean_)) %>%
select(-mean_) %>%
mutate(key = if_else(str_detect(key, '^fg'), str_glue('b_{key}'), key))  %>%
arrange(key)
values <- max_ %>%
select(-key) %>%
as.list()
values <- values %>%
map(~ set_names(x = ., max_$key))
# calculate the resulted prior log div
vals <- names(values)
max_each_fg_post <- vals  %>%
set_names(vals) %>%
map(function(val) {
res =
post_coeffs$b_fg_egg$post_coeff * values %>% pluck(val) %>% pluck('b_fg_egg') +
post_coeffs$b_fg_fruit$post_coeff * values %>% pluck(val) %>% pluck('b_fg_fruit') +
post_coeffs$b_fg_grain$post_coeff * values %>% pluck(val) %>% pluck('b_fg_grain') +
post_coeffs$b_fg_legume$post_coeff * values %>% pluck(val) %>% pluck('b_fg_legume') +
post_coeffs$b_fg_meat$post_coeff * values %>% pluck(val) %>% pluck('b_fg_meat') +
post_coeffs$b_fg_milk$post_coeff * values %>% pluck(val) %>% pluck('b_fg_milk') +
post_coeffs$b_fg_oils$post_coeff * values %>% pluck(val) %>% pluck('b_fg_oils') +
post_coeffs$b_fg_sweets$post_coeff * values %>% pluck(val) %>% pluck('b_fg_sweets') +
post_coeffs$b_fg_veggie$post_coeff * values %>% pluck(val) %>% pluck('b_fg_veggie') +
post_coeffs$b_intensityreduced$post_coeff
}) %>%
bind_rows(.id = 'grp')
ave_each_fg_post <- post_samples %>%
mutate(mean_fg =
b_fg_fruit*mean_fg$fg_fruit +
b_fg_meat*mean_fg$fg_meat +
b_fg_milk*mean_fg$fg_milk +
b_fg_oils*mean_fg$fg_oils +
b_fg_egg*mean_fg$fg_egg +
b_fg_grain*mean_fg$fg_grain +
b_fg_sweets*mean_fg$fg_sweets +
b_fg_legume*mean_fg$fg_legume +
b_fg_veggie*mean_fg$fg_veggie +
b_intensityreduced ) %>%
select(mean_fg) %>%
mutate(grp = 'ave_each') %>%
rename(post_res = mean_fg) %>%
select(grp, post_res)
maxs <- max_each_fg_post %>%  as.list()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
two_diff <- map(maxs,  .f = function(maxi){
tibble(
max_=maxi,
ave=ave_each_fg_post$post_res
)  %>%
mutate(diff_max_ave = exp(max_) - exp(ave))
})%>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color, shortname))
two_diff_plot <-  two_diff %>%
filter(term %in% c('fg_fruit','fg_sweets', 'fg_veggie')) %>%
ggplot(aes(y = term, x = diff_max_ave )) +
stat_pointinterval(.width = c(.66, .95)) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'black') +
#scale_color_manual(values = c('#A73030FF','#00468B')) +
labs(x = 'Change in alpha diversity',
y = '',
title = 'Diversity prediction') +
theme_classic() +
theme(axis.text=element_text(size=8),
legend.position = 'none',
#axis.text.y = element_blank(),
axis.title=element_text(size=8),
aspect.ratio=1)
two_diff_plot
View(two_diff)
two_diff %>%
filter(term %in% c('fg_sweets')) %>%
count(diff_max_ave < 0)
two_diff %>%
filter(term %in% c('fg_sweets')) %>%
count(diff_max_ave < 0) %>%
mutate(perc = n/sum(n) * 100)
