axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent')
aspect.ratio=1)
# another umap colored by the daily caloric intake
umap_cal <- df %>%
full_join(day_calori)
library(viridis)
umap_caloric <- umap_cal %>%
arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'daycal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
umap_caloric
ggsave( '../data/072_umap_caloric.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_caloric, bg = "transparent")
ggsave( '../data/072_umap_caloric.png', dpi = 400, width = 2.5, height = 2.5,plot = umap_caloric, bg = "transparent")
# another umap colored by the daily caloric intake
umap_cal <- df %>%
full_join(day_calori)
library(viridis)
umap_caloric <- umap_cal %>%
arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'daycal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
umap_caloric
ggsave( '../data/072_umap_caloric.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_caloric, bg = "transparent")
ggsave( '../data/072_umap_caloric.png', dpi = 150, width = 2.5, height = 2.5,plot = umap_caloric, bg = "transparent")
ggsave( '../data/072_umap_caloric.png', dpi = 300, width = 1.5, height = 1.5,plot = umap_caloric, bg = "transparent")
ggsave( '../data/072_umap_caloric.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_caloric, bg = "transparent")
# cuztomizing the times bins of the drt
cutoff = 0 # Day 0 is conveneint but this can be varied
n_groups_pre = 3;  # all HCT days <0 will be split into 3 bins; can vary this number to play
n_groups_post = 6; # all HCT days >0 will be split into 6 bins; can vary this number to play
# split the fdrt into groups:
umap_time <- umap_cal %>%
select(taxumap1, taxumap2, fdrt)
times <- umap_time %>% select( fdrt)
splits <- times %>%
split(.$fdrt <= 0)
pre <- splits %>%
pluck('TRUE') %>%
mutate(bin = cut_number(fdrt, n_groups_pre))
post <- splits %>%
pluck('FALSE') %>%
mutate(bin = cut_number(fdrt, n_groups_post))
both <- bind_rows(pre, post) %>%
distinct(fdrt, .keep_all = T)
umap_time_df <- umap_time %>%
left_join(both)
umap_drt_high_to_low_bin <- umap_time_df %>%
arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'bin', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = RColorBrewer::brewer.pal(9,"Spectral"))  +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_drt_high_to_low_bin.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_drt_high_to_low_bin, bg = "transparent")
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray81'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
# another umap colored by the diet diversity?
another <- df %>%
full_join(faith)
library(viridis)
umap_faith <- another %>%
arrange(desc(n)) %>%
mutate(log10faith = log10(faith_pd + 1)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'faith_pd', alpha = 1,size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_viridis() +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
aspect.ratio=1,
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
legend.position = 'none')
ggsave( '../data/072_umap_faith.png', dpi = 300, width = 2.5,height = 2.5, plot = umap_faith, bg = "transparent")
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv')
fcts_fg_dom <- fcts_fg %>%
group_by(mrn, fdrt) %>%
arrange(-grp_frac, .by_group = T) %>%
slice(1) %>%
ungroup() %>%
transmute(fid = str_glue('P{mrn}d{fdrt}'),
fg1_dom = fg1_name) %>%
inner_join(link %>% select(fid, index_column))
df <- coord %>%
inner_join(fcts_fg_dom) %>%
left_join(fpalette %>% select(fg1_dom = fg1_name, color)) %>%
add_count(fg1_dom) %>%
rename(fg1_name = fg1_dom) %>%
left_join(key )
color_key <- df %>%
ungroup() %>%
distinct(shortname, color) %>%
select(shortname, color) %>%
#mutate(shortname = factor(shortname)) %>%
#arrange(shortname) %>%
deframe()
fig1_umap <- df %>%
arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
ggsave( '../data/072_fig1_umap.png', dpi = 300, width = 2.5, height = 2.5,plot = fig1_umap, bg = "transparent")
View(umap_pt)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(colors)
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray81'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(colors)
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray81'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray92'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray57'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray81'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "none",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
# Angel: we need a TaxUMAP labeled by patient ID, too. Maybe: a grey umap, and all meals by three patients in three colors highlighted
# figure out the color for them
# randomly select three patients and give them three distinct colors while others remain gray
set.seed(1234)
umap_pt_color <- umap_cal %>%
distinct(mrn) %>%
slice_sample(n = 3, replace = F) %>%
mutate(colors = RColorBrewer::brewer.pal(3, "Set1"))
umap_pt_color_all <- bind_rows(
umap_cal %>%
distinct(mrn) %>%
filter(!mrn %in% umap_pt_color$mrn) %>%
mutate(colors = 'gray81'),
umap_pt_color
)
umap_pt <- umap_cal %>%
left_join(umap_pt_color_all) %>%
mutate(mrn = as.character(mrn)) %>%
arrange(desc(colors))
color_key <- umap_pt_color_all %>%
mutate(mrn = as.character(mrn)) %>%
ungroup() %>%
deframe()
umap_pt_plot <- umap_pt %>%
# arrange(desc(fdrt)) %>%
#arrange(fdrt) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'mrn', alpha = 1, size = umap_pt_size, shape = 16,
xlab = '', ylab = '') +
scale_color_manual(values = color_key) +
theme_classic() +
theme(legend.position = "bottom",
#legend.position = 'none',
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/072_umap_pt.png', dpi = 300, width = 2.5, height = 2.5,plot = umap_pt_plot, bg = "transparent")
umap_pt_color
# make a figure of the patients ABC and the colors
umap_pt_color %>%
ggscatter( x= 'mrn', y = 'mrn')
# make a figure of the patients ABC and the colors
umap_pt_color %>%
ggscatter( x= 'mrn', y = 'mrn', color = 'colors')
# make a figure of the patients ABC and the colors
umap_pt_color %>%
ggscatter( x= 'mrn', y = 'mrn', color = 'colors') +
scale_color_manual(values = color_key)
ggsave('../data/072_umappt_legends.pdf')
