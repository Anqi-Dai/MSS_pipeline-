daily_Sweets_med = ifelse(daily_Sweets > median(daily_Sweets,na.rm=T),"Above median", "Below median"),
daily_Vegetables_med = ifelse(daily_Vegetables > median(daily_Vegetables,na.rm=T),"Above median", "Below median"),
daily_Milk_med = ifelse(daily_Milk > median(daily_Milk,na.rm=T),"Above median", "Below median")
)
for (i in 1:length(featlist)){
reg <- as.formula(paste0("Surv(tLOS,LOS)~",featlist[i]))
print(survfit2(reg, data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+
add_risktable()+ggtitle(featlist[i]))
}
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(str_glue("Surv(tLOS,LOS)~{feature_}"), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
los_plots
?survfit2
cowplot::plot_grid(los_plots)
cowplot::plot_grid(los_plots)
cowplot::plot_grid(los_plots[[1]], los_plots[[2]])
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=3) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(los_plots[[1]], los_plots[[2]])
cowplot::plot_grid(los_plots[[1]], los_plots[[2]], los_plots[[3]], los_plots[[4]], los_plots[[5]], los_plots[[6]], los_plots[[7]], los_plots[[8]], los_plots[[9]], los_plots[[10]], los_plots[[11]], los_plots[[12]], los_plots[[13]], los_plots[[14]], los_plots[[15]])
cowplot::plot_grid(plotlist = los_plots)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 5)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
?add_pvalue
?add_pvalue
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=2) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 5)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("caption",size=2) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 5)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=1) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 5)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=1.5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 5)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 8)
df_main %>% count(TRMevent, OSevent)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=1.5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 7)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=1.5) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots, align = 'hv', ncol = 7)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 6)
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', ncol = 7)
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', nrow = 1)
ggsave('../data/158_LOS_features.pdf', width = 8, height = 6)
ggsave('../data/158_LOS_features.pdf', width = 8, height = 3)
ggsave('../data/158_LOS_features.pdf', width = 10, height = 1.5)
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', nrow = 1)
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', nrow = 2)
ggsave('../data/158_LOS_features.pdf')
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=3) +
add_confidence_interval()+
ylab("Percentage of patients discharged alive")+ggtitle(str_glue('{feature_}'))
}
)
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', nrow = 2)
ggsave('../data/158_LOS_features.pdf')
ggsave('../data/158_LOS_features.pdf', width = 9)
los_plots
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=3) +
add_confidence_interval()+
ylab("% patients discharged alive")+ggtitle(str_glue('{feature_}'))
})
cowplot::plot_grid(plotlist = los_plots[1:6], align = 'hv', nrow = 2)
ggsave('../data/158_LOS_features_1.pdf', width = 9)
cowplot::plot_grid(plotlist = los_plots[7:15], align = 'hv', nrow = 3)
ggsave('../data/158_LOS_features_2.pdf', width = 9)
los_plots <- featlist %>%
set_names(featlist) %>%
map(function(feature_){
survfit2(as.formula(str_glue("Surv(tLOS,LOS)~{feature_}")), data = df_main) %>%
ggsurvfit(type = "risk", linewidth = 0.8) +
add_pvalue("annotation",size=3) +
add_confidence_interval()+
ylab("% patients discharged alive")+ggtitle(str_glue('{feature_}'))
})
cowplot::plot_grid(plotlist = los_plots[7:15], align = 'hv', nrow = 2)
ggsave('../data/158_LOS_features_2.pdf', width = 12)
coxph(Surv(OStime_landmark,OSevent) ~ median7_21 , data=df_main) %>%
tbl_regression(exponentiate=TRUE) %>% bold_p() %>% modify_caption("Univariable analysis for Overall Survival, landmarked at day of engraftment; alpha7_21")
coxph(Surv(OStime_landmark,OSevent) ~ median7_21 , data=df_main) %>%
tbl_regression(exponentiate=TRUE) %>% bold_p() %>% modify_caption("Univariable analysis for Overall Survival, landmarked at day of engraftment; alpha7_21")  %>% as_gt %>% gt::gtsave(filename = '../data/158_uni_alpha7_21_OS.png')
coxph(Surv(OStime_landmark,OSevent) ~ first_in_w1 , data=df_main) %>%
tbl_regression(exponentiate=TRUE) %>% bold_p() %>% modify_caption("Univariable analysis for Overall Survival, landmarked at day of engraftment; first_in_w1")  %>% as_gt %>% gt::gtsave(filename = '../data/158_uni_first_in_w1_OS.png')
crr(Surv(tevent_landmark,TRMevent) ~ median7_21 , data=df_main) %>%
tbl_regression(exponentiate=TRUE) %>% bold_p() %>% modify_caption("Univariable analysis for TRM, landmarked at day of engraftment; alpha7_21")  %>% as_gt %>% gt::gtsave(filename = '../data/158_uni_alpha7_21_TRM.png')
crr(Surv(tevent_landmark,TRMevent) ~ first_in_w1 , data=df_main) %>%
tbl_regression(exponentiate=TRUE) %>% bold_p() %>% modify_caption("Univariable analysis for TRM, landmarked at day of engraftment; first_in_w1")  %>% as_gt %>% gt::gtsave(filename = '../data/158_uni_first_in_w1_TRM.png')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
DTB <- read_csv('../data/152_combined_DTB.csv')
META <- read_csv('../data/153_combined_META.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(ggimage)
library(lemon)
axis_text_size <- 8
axis_title_size <- 10
stip_txt_size <- 8
alpha_val <- 0.05
point_size <- 1.2
scatter_col <- 'gray14'
pick_point_size <- 1
pick_line_size <- 0.5
example_pt_line_size <- 0.3
diet_line_color <- '#E41A1C'
stool_line_color <- 'blue'
umap_pt_size <- 1
DTB <- read_csv('../data/152_combined_DTB.csv')
META <- read_csv('../data/153_combined_META.csv')
range(META$sdrt)
# the histogram of the N stool samples over transplant time
stool_hist <- META %>%
gghistogram(x = 'sdrt', xlab = 'Transplant day', ylab = 'Count', color = 'white', fill = stool_line_color, alpha = 1) +
scale_x_continuous( breaks = seq(-10, 50, 20)) +
theme(aspect.ratio=1)
stool_hist
range(META$sdrt)
axis_text_size
axis_text_size <- 10
# the histogram of the N stool samples over transplant time
stool_hist <- META %>%
gghistogram(x = 'sdrt', xlab = 'Transplant day', ylab = 'Stool samples', color = 'white', fill = stool_line_color, alpha = 1) +
scale_x_continuous( breaks = seq(-10, 50, 20)) +
theme(aspect.ratio=1, axis.text=element_text(size=axis_text_size))
stool_hist
range(META$sdrt)
# the histogram of the N meals over transplant time
diet_hist <- DTB %>%
distinct(mrn, Meal, fdrt) %>%
gghistogram(x = 'fdrt', xlab = 'Transplant day', ylab = 'Meals recorded', color = 'white', fill = diet_line_color, alpha = 1)+
scale_x_continuous( breaks = seq(-10, 50, 20)) +
theme(aspect.ratio=1,
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
diet_hist
# the histogram of the N meals over transplant time
diet_hist <- DTB %>%
distinct(mrn, Meal, fdrt) %>%
gghistogram(x = 'fdrt', xlab = 'Transplant day', ylab = 'Meals recorded', color = 'white', fill = diet_line_color, alpha = 1)+
scale_x_continuous( breaks = seq(-10, 50, 20)) +
theme(aspect.ratio=1, axis.text=element_text(size=axis_text_size),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank())
diet_hist
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
dtb <- read_csv('../data/152_combined_DTB.csv')
dtb <- read_csv('../data/152_combined_DTB.csv')
# the weight need to be relative so needs to normalize them
fc_table <- dtb %>%
select(mrn, fdrt, Food_code, dehydrated_weight) %>%
group_by(mrn, fdrt, Food_code) %>%
summarise(total = sum(dehydrated_weight)) %>%
ungroup() %>%
mutate(index_column = str_glue('P{mrn}_{fdrt}')) %>%
select(index_column, Food_code, total)
fc_total <- fc_table %>%
group_by(index_column) %>%
summarise(daily_total = sum(total))
fc_df <- fc_table %>%
left_join(fc_total) %>%
mutate(daily_relative = total/daily_total) %>%
select(index_column,Food_code, daily_relative ) %>%
spread('Food_code', 'daily_relative', fill = 0)
fc_df %>% write_csv('../data/162_food_code_relative.csv')
dtb %>% distinct(mrn)
dtb <- read_csv('../data/152_combined_DTB.csv')
dtb %>% distinct(mrn)
actual_foodids <- colnames(fc_table)[2:length(colnames(fc_table))]
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
actual_foodids
actual_foodids <- colnames(fc_table)[2:length(colnames(fc_table))]
View(fc_table)
View(fc_total)
View(fc_df)
actual_foodids <- colnames(fc_df)[2:length(colnames(fc_df))]
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
View(final.table)
knitr::opts_chunk$set(echo = TRUE, message = F, warning = F)
library(tidyverse)
library(data.tree)
library(viridisLite)
library(readxl)
dtball <- read_csv('../data/152_combined_DTB.csv')
uniq_food <- dtball %>%
distinct(Food_code, description)
food_database <- uniq_food %>%
distinct(Food_code, .keep_all = T)  %>%
rename(FoodID = Food_code) %>%
mutate(description = str_replace_all(description,',| |-|\\(|\\)|%|/|"|;','_')) %>%
mutate(description = str_replace_all(description,"'",""))
nodes_fn <- '../data/source/NodeLabelsMCT.txt'
num.levels <- 7
fdata <- food_database
nodes <- read.table(nodes_fn, header = TRUE, sep="\t", fill = TRUE , colClasses="character")
main <- fdata[,c("FoodID", "description")]
# if there happen to be duplicate FoodIDs in main, remove them
main <- main[!duplicated(main$FoodID),]
flevels <- NULL
for(i in 1:num.levels)
flevels <- cbind(flevels, I(substr(main$FoodID, 1, i)))
colnames(flevels) <- paste0("L",1:num.levels)
main <- data.frame(main, flevels, stringsAsFactors=F)
# melt the data, merge to get the node names, then cast back
main.melt <- reshape2::melt(main, id.vars = "FoodID", variable.name = "Level", value.name = "Level.code")
main.merge <- merge(main.melt, nodes, by = "Level.code")
main.cast <- data.table::dcast(main.merge, FoodID ~ Level, value.var = "Main.food.description")
# prepend level to all level descriptions
main.cast[is.na(main.cast)] <- ""
main.cast[,colnames(main.cast)[-1]] <- sapply(colnames(main.cast)[-1], function(colname) paste(colname, main.cast[,colname], sep="_"))
# merge back with original table to grab Food Description
main.join <- merge(main.cast, main[,c("FoodID","description")], by="FoodID")
# create a proper newick string for the tree
newickstring <- paste("foodtreeroot", apply(main.join, 1, function(xx) paste(xx[-1], collapse="/")), sep="/")
# create a proper taxonomy string for QIIME
taxonomy <- apply(main.join, 1, function(xx) paste(xx[-1], collapse=";"))
final.table <- data.frame(main.join, newickstring, taxonomy, stringsAsFactors=F) %>%
# THE BELOW IS ESSENTIAL, THAT WE WANNA USE FOOD ID INSTEAD OF DESCRIPTION TO REPRESENT THE FOOD
mutate(newickstring = str_glue('foodtreeroot/{L1}/{L2}/{L3}/{L4}/{L5}/{L6}/{FoodID}'))
View(final.table)
final.table %>%
write_csv('../data/source/final_table_for_writing_out_to_newick.csv')
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
View(final.table)
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
actual_foodids <- colnames(fc_df)[2:length(colnames(fc_df))]
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(ASV = FoodID, Kingdom = L1, Phylum = L2, Class = L3, Order = L4)
final.table
actual_foodids <- colnames(fc_df)[2:length(colnames(fc_df))]
final.table <- read_csv('../data/source/final_table_for_writing_out_to_newick.csv') %>%
mutate(FoodID = as.character(FoodID))
food_taxa <- final.table %>%
filter(FoodID %in% actual_foodids) %>%
select(ASV = FoodID, Kingdom = L1, Phylum = L2, Class = L3, Order = L4)
food_taxa %>% write_csv('../data/162_food_taxa.csv')
top2level <- food_taxa %>%
distinct(Kingdom, Phylum)
dtb %>% distinct(mrn) %>% nrow
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt)) %>%
full_join(fg_sum, by = c("mrn", "fdrt"))
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
View(OUT)
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
# calculate daily caloric intake
cal <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_cal = sum(Calories_kcal))
OUT_cal <- OUT %>% full_join(cal)
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
# calculate daily caloric intake
cal <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_cal = sum(Calories_kcal))
OUT_cal <- OUT %>% full_join(cal)
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
# calculate daily caloric intake
cal <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_cal = sum(Calories_kcal))
OUT_cal <- OUT %>% full_join(cal)
OUT_caloric <- OUT_cal %>%
#arrange(desc(n)) %>%
mutate(transform_cal = sqrt(total_cal)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'transform_cal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/162_umap_cal.png', dpi = 300, width = 2.5, height = 2.5,plot = out2_caloric, bg = "transparent")
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt))
# calculate daily caloric intake
cal <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(total_cal = sum(Calories_kcal))
OUT_cal <- OUT %>% full_join(cal)
OUT_caloric <- OUT_cal %>%
#arrange(desc(n)) %>%
mutate(transform_cal = sqrt(total_cal)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'transform_cal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1)
ggsave( '../data/162_umap_cal.png', dpi = 300, width = 2.5, height = 2.5,plot = OUT_caloric, bg = "transparent")
OUT_cal %>%
#arrange(desc(n)) %>%
mutate(transform_cal = sqrt(total_cal)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'transform_cal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic()
summary(OUT$taxumap1)
OUT_cal %>%
#arrange(desc(n)) %>%
mutate(transform_cal = sqrt(total_cal)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'transform_cal', alpha = 1,size = umap_pt_size , shape = 16,
xlab = '', ylab = '') +
paletteer::scale_color_paletteer_c("viridis::plasma") +
theme_classic()
summary(OUT$taxumap1)
check <- OUT %>% filter(taxumap1 > 35)
View(check)
check <- OUT_cal %>% filter(taxumap1 > 35)
knitr::opts_chunk$set(echo = TRUE)
library(vegan)
library(vdbR)
connect_database()
STB <- read_csv('../data/152_combined_STB.csv')
STB
cts <- get_counts_subset(STB$sampleid)
cts %>% distinct(sampleid)
cts
keep_asv <- cts %>%
filter(count_relative > 0.0001) %>%
count(asv_key) %>%
filter(n > floor(nrow(STB) * 0.1)) %>%
pull(asv_key)
cts_fil <- cts %>%
filter(asv_key %in% keep_asv) %>%
select(sampleid, asv_key,count_relative ) %>%
spread(key = 'asv_key', value = 'count_relative', fill = 0) %>%
column_to_rownames('sampleid')
View(cts_fil)
dist_ <- vegan::vegdist(cts_fil, method = 'bray')
eigen <- cmdscale(dist_, eig = T)$eig
percent_var <- signif(eigen/sum(eigen), 3)*100
bc <- cmdscale(dist_, k = 2)
beta_df <- bc %>%
as.data.frame() %>%
rownames_to_column('sampleid')
View(beta_df)
View(cts_fil)
# the diet pattern using bray curtis distance
DTB <- read_csv('../data/152_combined_DTB.csv')
# the diet pattern using bray curtis distance
DTB <- read_csv('../data/152_combined_DTB.csv')
dailys <- DTB %>%
group_by(mrn, fdrt) %>%
summarise(d_protein = sum(Protein_g),
d_fat = sum(Fat_g),
d_carb = sum(Carbohydrates_g),
d_fiber = sum(Fibers_g),
d_sugar = sum(Sugars_g))
View(dailys)
?vegdist
data(varespec)
View(varespec)
View(dailys)
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(ggpubr)
