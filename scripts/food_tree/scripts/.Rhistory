panel.background = element_rect(fill = "gray96",colour = "gray96",size = 0.5, linetype = "solid"),
axis.title=element_text(size=10),
aspect.ratio=1)
macro_pt
ggsave('../data/macro_pt_176.pdf',
width = 60, height = 60, units = "mm", device = 'pdf',
plot = macro_pt,
dpi = 300)
macro_pt <- cleaned_macro %>%
filter(grp == 'patient') %>%
mutate(shortname = factor(shortname, levels = c('Nonablative','Reduced','Ablative'))) %>%
ggplot(aes(x = coeff, y = shortname)) +
stat_pointinterval(.width = c(.66, .95), fatten_point = 1.2) +
labs(x = 'Conditioning intercept [ln(diversity)]', y = '') +
xlim(1.5, 2.5) +
scale_x_continuous( breaks = seq(1.4, 2.4, 0.2)) +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text = element_text( size = 10),
panel.background = element_rect(fill = "gray96",colour = "gray96",size = 0.5, linetype = "solid"),
axis.title=element_text(size=10),
aspect.ratio=1)
macro_pt
ggsave('../data/macro_pt_176.pdf',
width = 60, height = 60, units = "mm", device = 'pdf',
plot = macro_pt,
dpi = 300)
macro_pt <- cleaned_macro %>%
filter(grp == 'patient') %>%
mutate(shortname = factor(shortname, levels = c('Nonablative','Reduced','Ablative'))) %>%
ggplot(aes(x = coeff, y = shortname)) +
stat_pointinterval(.width = c(.66, .95), fatten_point = 1.2) +
labs(x = 'Conditioning intercept [ln(diversity)]', y = '') +
xlim(1.5, 2.5) +
scale_x_continuous( breaks = seq(1.4, 2.4, 0.2)) +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text = element_text( size = 10),
panel.background = element_rect(fill = "gray96",colour = "gray96",size = 0.5, linetype = "solid"),
axis.title=element_text(size=10),
aspect.ratio=1)
macro_pt
ggsave('../data/macro_pt_176.pdf',
width = 60, height = 60, units = "mm", device = 'pdf',
plot = macro_pt,
dpi = 300)
macro_pt <- cleaned_macro %>%
filter(grp == 'patient') %>%
mutate(shortname = factor(shortname, levels = c('Nonablative','Reduced','Ablative'))) %>%
ggplot(aes(x = coeff, y = shortname)) +
stat_pointinterval(.width = c(.66, .95), fatten_point = 1.2) +
labs(x = 'Conditioning intercept [ln(diversity)]', y = '') +
xlim(1.5, 2.5) +
scale_x_continuous( breaks = seq(1.4, 2.4, 0.2)) +
theme_classic() +
theme(legend.position = 'none') +
theme(axis.text = element_text( size = 10),
panel.background = element_rect(fill = "gray96",colour = "gray96",size = 0.5, linetype = "solid"),
axis.title=element_text(size=10),
aspect.ratio=1)
macro_pt
ggsave('../data/macro_pt_176.pdf',
width = 60, height = 60, units = "mm", device = 'pdf',
plot = macro_pt,
dpi = 300)
model_div_original
model_div_original
ce=conditional_effects(model_div_original)
str(ce)
tt <- ce$`fg_sweets:empirical`
View(tt)
meta_original %>% summarise(across(everything(), list(mean)))
tt
str(ce)
tt_sweets_abx <- ce$`fg_sweets:empirical`
tt_sweets_abx
pred_dat = tt_sweets_abx %>%
distint(fg_sweets, empirical)
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical)
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical)
tt_sweets_abx <- ce$`fg_sweets:empirical`
tt_sweets_abx <- ce$`fg_sweets:empirical`
View(tt_sweets_abx)
tt_sweets_abx
tt_sweets_abx
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical)
View(tt_sweets_abx)
View(pred_dat)
mean(meta_original$fg_fruit)
mean(meta_original$fg_fruit)
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical) %>%
mutate(intensity = 'nonablative',
TPN = F, EN = F,
fg_fruit = mean(meta_original$fg_fruit),
fg_meat = mean(meta_original$fg_meat),
fg_milk = mean(meta_original$fg_milk),
fg_oils = mean(meta_original$fg_oils),
fg_egg = mean(meta_original$fg_egg),
fg_grain = mean(meta_original$fg_grain),
fg_legume = mean(meta_original$fg_legume),
fg_fruit = mean(meta_original$fg_fruit)
)
post.epred = epred_draws(model_div_original, newdata=pred_dat)
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical) %>%
mutate(intensity = 'nonablative',
TPN = F, EN = F,
fg_fruit = mean(meta_original$fg_fruit),
fg_meat = mean(meta_original$fg_meat),
fg_milk = mean(meta_original$fg_milk),
fg_oils = mean(meta_original$fg_oils),
fg_egg = mean(meta_original$fg_egg),
fg_grain = mean(meta_original$fg_grain),
fg_legume = mean(meta_original$fg_legume),
fg_fruit = mean(meta_original$fg_fruit), mrn = NA, timebin= NA)
post.epred = epred_draws(model_div_original, newdata=pred_dat)
tt_sweets_abx
pred_dat = tt_sweets_abx %>%
distinct(fg_sweets, empirical) %>%
mutate(intensity = 'nonablative',
TPN = F, EN = F,
fg_fruit = mean(meta_original$fg_fruit),
fg_meat = mean(meta_original$fg_meat),
fg_milk = mean(meta_original$fg_milk),
fg_oils = mean(meta_original$fg_oils),
fg_egg = mean(meta_original$fg_egg),
fg_grain = mean(meta_original$fg_grain),
fg_legume = mean(meta_original$fg_legume),
fg_veggie = mean(meta_original$fg_veggie),
mrn = NA, timebin= NA)
post.epred = epred_draws(model_div_original, newdata=pred_dat)
View(post.epred)
pce = plot(ce, ask=FALSE, plot=FALSE)
pce
post.epred
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .99, by = .03),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .03),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .99, by = .03),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .89, by = .03),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .03),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .1, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .2),
alpha = .2, size = 0)
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0)
?conditional_effects
post.epred %>%
ggplot(aes(x = fg_sweets, y = .epred, fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
# I wanna make a set of all of these with all the other panels
names(ce)
vars <- tibble(vars = names(ce))
vars <- tibble(vars = names(ce)) %>%
filter(str_detect(vars, ':'))
vars
ce %>% pluck(var)
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
ce %>% pluck(var)
})
View(res)
View(res[["fg_fruit:empirical"]])
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17])
})
View(res[["fg_fruit:empirical"]])
tt_sweets_abx
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal)
})
View(res[["fg_fruit:empirical"]])
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
})
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
return(post.epred)
})
View(res)
View(res[["fg_fruit:empirical"]])
res$`fg_fruit:empirical`
res$`fg_fruit:empirical` %>%
ggplot(aes_string(colnames(post.epred)[1], colnames(df)[20]), fill = empirical, color = empirical) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
res$`fg_fruit:empirical` %>%
ggplot(aes_string(colnames(res$`fg_fruit:empirical`)[1], colnames(res$`fg_fruit:empirical`)[20]), fill = empirical, color = empirical) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
res$`fg_fruit:empirical` %>%
ggplot(aes_string(colnames(res$`fg_fruit:empirical`)[1], colnames(res$`fg_fruit:empirical`)[20], fill = empirical, color = empirical)) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
res$`fg_fruit:empirical`
res$`fg_fruit:empirical` %>%
ggplot(aes_string(colnames(res$`fg_fruit:empirical`)[1], colnames(res$`fg_fruit:empirical`)[20], fill = colnames(res$`fg_fruit:empirical`)[2], color = colnames(res$`fg_fruit:empirical`)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
# I wanna make a set of all of these with all the other panels
vars <- tibble(vars = names(ce)) %>%
filter(str_detect(vars, ':'))
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
return(g)
})
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
return(g)
})
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .1),
alpha = .2, size = 0)
return(g)
})
res
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .95, by = .03),
alpha = .1, size = 0)
return(g)
})
res
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0)
return(g)
})
res
library(cowplot)
plot_grid(plotlist = res, nrow = 3)
# I wanna make a set of all of these with all the other panels
vars <- tibble(vars = names(ce)) %>%
filter(str_detect(vars, ':'))
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
return(g)
})
library(cowplot)
plot_grid(plotlist = res, nrow = 3)
# I wanna make a set of all of these with all the other panels
vars <- tibble(vars = names(ce)) %>%
filter(str_detect(vars, ':'))
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
return(g)
})
library(cowplot)
plot_grid(plotlist = res, nrow = 3)
knitr::opts_chunk$set(echo = TRUE)
set.seed(1)
library(tidyverse)
library(brms)
library(ggpubr)
library(tidybayes)
library(cowplot)
library(ggridges)
library(brmstools)
library(bayesplot)
options(mc.cores = parallel::detectCores())
rstan::rstan_options(auto_write = TRUE)
theme_set(theme_tidybayes() + panel_border())
ncores <- parallel::detectCores()
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
axis_text_size <- 10
axis_title_size <- 10
dtb <- read_csv('../data/152_combined_DTB.csv')
range(dtb$fdrt)
# I wanna use the original data types for this thing
meta_original <- read_csv('../data/153_combined_META.csv') %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left')) %>%
mutate(intensity = factor(intensity, levels = c('nonablative','reduced','ablative'))) %>%
mutate(mrn = factor(mrn))
# %>%
#   mutate(fg_egg = fg_egg/100,
#          fg_fruit = fg_fruit/100,
#          fg_grain = fg_grain/100,
#          fg_legume = fg_legume/100,
#          fg_meat = fg_meat/100,
#          fg_milk = fg_milk/100,
#          fg_oils = fg_oils/100,
#          fg_sweets = fg_sweets/100,
#          fg_veggie = fg_veggie/100)
mod_original <- log(simpson_reciprocal) ~ 0 +
intensity+
empirical+
fg_fruit:empirical+
fg_meat:empirical+
fg_milk:empirical+
fg_oils:empirical+
fg_egg:empirical+
fg_grain:empirical+
fg_sweets:empirical+
fg_legume:empirical+
fg_veggie:empirical+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
get_prior(mod_original,data = meta_original )
div_priors_original <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalFALSE:fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_egg"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_grain"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_legume"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_meat"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_milk"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_oils"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "empiricalTRUE:fg_veggie"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPNTRUE"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "ENTRUE"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "empiricalTRUE"),
# for the intensity
prior(normal( 2, .1), class = 'b', coef = "intensityablative"),
prior(normal( 2, .1), class = 'b', coef = "intensityreduced"),
prior(normal( 2, .1), class = 'b', coef = "intensitynonablative")
)
model_div_original <- brm( mod_original,
data = meta_original,
warmup = 1000, iter = 3000,
prior = div_priors_original,
cores = ncores,
chains = 2,
control = list(adapt_delta = 0.99),
seed = 123, sample_prior = T, file = '../data/173_interaction_conditional_model')
ce=conditional_effects(model_div_original)
# I wanna make a set of all of these with all the other panels
vars <- tibble(vars = names(ce)) %>%
filter(str_detect(vars, ':'))
res <- vars %>%
pull(vars) %>%
set_names(vars %>%
pull(vars)) %>%
map(function(var){
pred_dat = ce %>% pluck(var) %>%
select(names(.)[1]:names(.)[17]) %>%
select(-`log(simpson_reciprocal)`, -simpson_reciprocal) %>%
distinct()
post.epred = epred_draws(model_div_original, newdata=pred_dat)
g=  ggplot(data = post.epred, aes_string(colnames(post.epred)[1], colnames(post.epred)[20], fill = colnames(post.epred)[2], color = colnames(post.epred)[2])) +
stat_lineribbon(.width = seq(from = .03, to = .69, by = .1),
alpha = .2, size = 0) +
scale_fill_manual(values = c('darkgray','maroon')) +
scale_colour_manual(values = c('darkgray','maroon')) +
#ylim(0, 3) +
labs(y = 'Predicted log(diversity)') +
theme_classic() +
theme(aspect.ratio = 1, legend.position = 'none')
return(g)
})
library(cowplot)
ret <- plot_grid(plotlist = res, nrow = 3)
ret
ggsave('../data/173_beam_ce.pdf', width = 9, height = 8)
