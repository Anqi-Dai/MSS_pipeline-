mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal, -total_weight, -Water_g)
currentgood_all_compare
currentgood_all_compare %>% ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare %>% ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',
xlab = 'total_g - water_g', y = 'dry weight converted from calories',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare %>% ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',
xlab = 'total_g - water_g', ylab = 'dry weight converted from calories',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare %>%
ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',xlab = 'total_g - water_g', ylab = 'dry weight converted from calories', add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare %>%
ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',xlab = 'total_g - water_g', ylab = 'dry weight converted from calories', add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare %>%
ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',xlab = 'total_g - water_g', ylab = 'dry weight converted from calories', add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g)
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g)
View(currentgood_all_compare)
currentgood_all_compare <- currentgood_all %>%
distinct(Food_NSC, Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g)
question <- currentgood_all_compare %>% slice(1)
View(question)
question <- currentgood_all_compare %>%
arrange(desc(dehydrated_psu)) %>%
slice(1)
currentgood_all_compare %>%
ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',xlab = 'total_g - water_g', ylab = 'dry weight converted from calories', add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g)
currentgood_all_compare %>%
ggscatter(x = 'dehydrated_psu', y = 'dehydrated_convertion',xlab = 'total_g - water_g', ylab = 'dry weight converted from calories', add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g)
# I wanna see the comparison between the dry weight from cal and the dry weight from this
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion))
currentgood_all_compare
# I wanna see the comparison between the dry weight from cal and the dry weight from this
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion)) %>%
rename(description = Main_food_description)
# I wanna see the comparison between the dry weight from cal and the dry weight from this
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion)) %>%
rename(description = Main_food_description) %>%
arrange(abs_diff) %>%
relocate(abs_diff, .after = Food_code)
# I wanna see the comparison between the dry weight from cal and the dry weight from this
currentgood_all_compare <- currentgood_all %>%
distinct(Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion)) %>%
rename(description = Main_food_description) %>%
arrange(desc(abs_diff)) %>%
relocate(abs_diff, .after = Food_code)
currentgood_all_compare <- currentgood_all %>%
distinct(Food_NSC, Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion)) %>%
rename(description = Main_food_description) %>%
arrange(desc(abs_diff)) %>%
relocate(abs_diff, .after = Food_code)
# I wanna see the comparison between the dry weight from cal and the dry weight from this
currentgood_all_compare <- currentgood_all %>%
distinct(Food_NSC, Food_code,Unit,  cal_psu, dehydrated_psu, gram_psu) %>%
left_join(engy , by = "Food_code") %>%
mutate(total_weight = if_else(Energy_kcal == 0, 99999, cal_psu/Energy_kcal*100)) %>%
mutate(dehydrated_convertion = if_else(total_weight == 99999, 0, total_weight*(1 - Water_g/100))) %>%
select(-Energy_kcal,  -Water_g) %>%
mutate(abs_diff = abs(dehydrated_psu - dehydrated_convertion)) %>%
rename(description = Main_food_description) %>%
arrange(desc(abs_diff)) %>%
relocate(abs_diff, .after = Food_code) %>%
select(Food_NSC, Food_code, Unit,  dehydrated_psu,  dehydrated_convertion, abs_diff)
View(dtb1)
View(currentgood_all)
currentgood_all
# after asking Peter to check the top abs_diff ones he said the dehydrated_psu is good to use!
# only need to change the food_code of one thing
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code))
# after asking Peter to check the top abs_diff ones he said the dehydrated_psu is good to use!
# only need to change the food_code of one thing
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description))
View(currentgood_all2)
View(currentgood)
currentgood_all2
# after asking Peter to check the top abs_diff ones he said the dehydrated_psu is good to use!
# only need to change the food_code of one thing
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description)
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description) %>%
left_join(nutrients_fndds %>% select(Food_code, ends_with('_per')))
currentgood_all2
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description) %>%
left_join(nutrients_fndds %>% select(Food_code, ends_with('_per'))) %>%
mutate(Protein_psu = gram_psu * Protein_per,
Carbohydrate_psu = gram_psu * Carbohydrate_per,
Sugars_psu = gram_psu * Sugars_per,
Fiber_psu = gram_psu * Fiber_per,
Fat_psu = gram_psu * Fat_per,
Water_psu = gram_psu * Water_per)
# after asking Peter to check the top abs_diff ones he said the dehydrated_psu is good to use!
# only need to change the food_code of one thing
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description) %>%
left_join(nutrients_fndds %>% select(Food_code, ends_with('_per'))) %>%
mutate(Protein_psu = gram_psu * Protein_per,
Carbohydrate_psu = gram_psu * Carbohydrate_per,
Sugars_psu = gram_psu * Sugars_per,
Fiber_psu = gram_psu * Fiber_per,
Fat_psu = gram_psu * Fat_per,
Water_psu = gram_psu * Water_per) %>%
select(-ends_with('_per')) %>%
mutate(dehydrated_psu = gram_psu - Water_psu)
colnames(currentgood_all2)
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description) %>%
left_join(nutrients_fndds %>% select(Food_code, ends_with('_per'))) %>%
mutate(Protein_psu = gram_psu * Protein_per,
Carbohydrate_psu = gram_psu * Carbohydrate_per,
Sugars_psu = gram_psu * Sugars_per,
Fiber_psu = gram_psu * Fiber_per,
Fat_psu = gram_psu * Fat_per,
Water_psu = gram_psu * Water_per) %>%
select(-ends_with('_per')) %>%
mutate(dehydrated_psu = gram_psu - Water_psu)
colnames(currentgood_all2)
colnames(other3)
View(other3)
other3
other3 <- bind_rows(other2, added5_df)  %>%
mutate(dehydrated_psu = weight_grams - water_grams)
other3
colnames(currentgood_all)
colnames(other3)
colnames(currentgood_all2)
other3 <- bind_rows(other2, added5_df)  %>%
mutate(dehydrated_psu = weight_grams - water_grams) %>%
rename(cal_psu = Calories_kcal,
gram_psu = weight_grams,
Protein_psu = protein_grams,
Carbohydrate_psu = carbohydrate_grams,
Fat_psu = fat_grams,
Fiber_psu = fiber_grams,
Sugars_psu = sugar_grams,
Water_psu = water_grams)
colnames(other3)
other3 <- bind_rows(other2, added5_df)  %>%
mutate(dehydrated_psu = weight_grams - water_grams) %>%
rename(cal_psu = Calories_kcal,
gram_psu = weight_grams,
Protein_psu = protein_grams,
Carbohydrate_psu = carbohydrate_grams,
Fat_psu = fat_grams,
Fiber_psu = fiber_grams,
Sugars_psu = sugar_grams,
Water_psu = water_grams) %>%
select(-Por_eaten)
other3 %>% write_csv('../data/144_milkshake_smoothie_special_check_full.csv')
# after asking Peter to check the top abs_diff ones he said the dehydrated_psu is good to use!
# only need to change the food_code of one thing
currentgood_all2 <- currentgood_all %>%
mutate(Food_code = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 95106000, Food_code),
description = if_else(Food_NSC == 'Chocolate-Flavored Drink,Whey and Milk Based, cup', 'Nutritional drink or shake, ready-to-drink (Muscle Milk)', description)) %>%
select(Food_NSC:description) %>%
left_join(nutrients_fndds %>% select(Food_code, ends_with('_per'))) %>%
mutate(Protein_psu = gram_psu * Protein_per,
Carbohydrate_psu = gram_psu * Carbohydrate_per,
Sugars_psu = gram_psu * Sugars_per,
Fiber_psu = gram_psu * Fiber_per,
Fat_psu = gram_psu * Fat_per,
Water_psu = gram_psu * Water_per) %>%
select(-ends_with('_per')) %>%
mutate(dehydrated_psu = gram_psu - Water_psu) %>%
select(colnames(other3))
combined <- bind_rows(currentgood_all2, other3)
# finally combine the above two together to make a whole df with (2110 + 130 = 2240)
#
combined <- bind_rows(currentgood_all2, other3)
# finally combine the above two together to make a whole df with (2110 + 130 = 2240)
#
combined <- bind_rows(currentgood_all2, other3)
View(combined)
View(combined)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# the current dtb1
# the final expanded table should be the same number 22840
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
# the below data has the vetted calories and the total weight in grams
# (waiting for the fruit smoothies breaking down to different food groups)
vet <- readxl::read_excel('../data/142_batch1_diet_calories_check_peter.xlsx') %>%
rename(total_g = weight_grams)
# first make sure all of the my entries in cal is not NA
nacor <- read_csv('../data/144_check_NA_ones_peter.csv') %>%
inner_join(dtb1 %>% distinct(Food_code, description), by = "Food_code") %>%
select(colnames(vet))
# the below are the total vetted ones that are not EN
totalvet <- bind_rows(vet, nacor)
# the table that has the water gram weight for 100 gram total weight of a food code
engy <- readxl::read_excel('../data/source/2015-2016 FNDDS At A Glance - FNDDS Nutrient Values.xlsx', skip = 1, col_types  = 'text') %>%
rename_all(funs(str_replace_all(., ' ','_'))) %>%
rename_all(funs(str_replace_all(., '\\(|\\)',''))) %>%
select(Food_code, Main_food_description, Water_g, Energy_kcal) %>%
mutate(Water_g = as.numeric(Water_g),
Food_code = as.numeric(Food_code),
Energy_kcal = as.numeric(Energy_kcal))
# find the unique combinations of all of the portions for (food_nsc + unit)
allcombo <- dtb1 %>%
distinct(Food_code, Food_NSC, Por_eaten, Unit) %>%
left_join(totalvet %>%
select(Food_NSC, Por_eaten, Unit, Calories_kcal, total_g), by = c("Food_NSC", "Unit", "Por_eaten"))
scale_all_combos <- allcombo %>%
split(., list(.$Food_NSC, .$Unit))%>%
discard( ~nrow(.) == 0) %>%
map(function(df){
df %>%
arrange(Calories_kcal) %>%
mutate(ratio = Por_eaten/Por_eaten[1]) %>%
mutate(scaled_cal = Calories_kcal[1]*ratio,
scaled_total_g = total_g[1]*ratio)
})  %>%
bind_rows()
# need some manual correction of Specials, Angel Hair Pasta (2) since the data was entered wrong into computrition
part1 <- scale_all_combos %>%
filter(Unit != 'EN unit') %>%
filter(Food_NSC != 'Specials, Angel Hair Pasta (2)') %>%
add_row(totalvet %>%
filter(Food_NSC == 'Specials, Angel Hair Pasta (2)') %>%
slice(1) %>%
mutate(ratio = 1,scaled_cal = 165, scaled_total_g = 105) %>%
select(colnames(scale_all_combos)))
# now expand all of the unique combos to the whole dtb1 (excluding EN) 22787 rows
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit') %>%
# correct the portion and Unit for Specials, Angel Hair Pasta (2)
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit)) %>%
select(mrn:Por_eaten, Food_code:fdrt) %>%
left_join(part1, by = c("Food_NSC", "Unit", "Por_eaten", "Food_code")) %>%
select(mrn:fdrt, Calories_kcal = scaled_cal, total_g = scaled_total_g)
dtb_ <- dtb1 %>%
filter(Unit != 'EN unit')
dtb_ %>% distinct(Food_NSC, Unit)
dtb_ %>% distinct(Food_NSC, Unit) %>% nrow
# to double check the number is it ok
# the unique combinations
dtb_ %>% distinct(Food_NSC, Unit) %>% nrow
2234 + 6 =
2234 + 6
View(other3)
# finally combine the above two together to make a whole df with (2110 + 130 = 2240)
# yeah!!!!!
combined <- bind_rows(currentgood_all2, other3)
# to double check the number is it ok
# the unique combinations
dtb_ %>% distinct(Food_NSC, Unit) %>% nrow
# to double check the number is it ok
# the unique combinations
dtb_ %>% distinct(Food_NSC, Unit) %>% nrow
# to double check the number is it ok
# the unique combinations
dtb_ %>% distinct(Food_NSC, Unit) %>% nrow
combined %>% write_csv('../data/144_non_EN_unit_diet_metrics.csv')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv')
View(unit)
dtb1 <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb1)
dtb1
# find about the portions and dates of the intake among the patients
dtb1_portion <- dtb1 %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten)
View(dtb1_portion)
dtb1_portion_non_EN <- dtb1 %>%
filter(Unit != 'EN unit')
# find about the portions and dates of the intake among the patients
dtb1_portion_non_EN <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten)
View(dtb1_portion_non_EN)
unit
# find about the portions and dates of the intake among the patients
dtb1_portion_non_EN <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten) %>%
left_join(unit)
# find about the portions and dates of the intake among the patients
dtb1_portion_non_EN <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description"))
dtb1_p_non_EN <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description"))
# find about the portions and dates of the intake among the patients
dtb1_scale <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten) %>%
left_join(unit, by = c("Food_NSC", "Unit", "Food_code", "description"))
View(dtb1_scale)
View(unit)
knitr::opts_chunk$set(echo = TRUE)
# the data that peter double checked : 272, he removed 5 entries to be in the milkshake smoothie group.
p272 <- read_csv('../data/144_peter_check_sd_gt_1.55_ones_peter.csv') %>%
select(Food_NSC:description)
View(p272)
dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten)
unit
unit
dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,Food_code:fdrt, Por_eaten)
dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten)
# find about the portions and dates of the intake among the patients
dtb1_scale <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten) %>%
left_join(unit)
# find about the portions and dates of the intake among the patients
dtb1_scale <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten) %>%
left_join(unit, by = c("Food_NSC", "Unit"))
View(dtb1_scale)
View(p272)
# organize the 142b smoothies
psmoothie <- readxl::read_excel('../data/142b_batch1_diet_calories_check_subset_with_macros_peter.xlsx') %>% distinct()
View(psmoothie)
unit
# there are some cleaning to do, possibly char change during manual work at the spreadsheet
unit <- read_csv('../data/144_non_EN_unit_diet_metrics.csv') %>%
mutate(Food_NSC = if_else(Food_NSC == '2017 BRATT II - Smoothie, Banana Nut', '2017 BRATT II, Smoothie, Banana Nut', Food_NSC))
dtb1_p <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten)
View(dtb1_p)
# find about the portions and dates of the intake among the patients
dtb1_p <- dtb1 %>%
filter(Unit != 'EN unit') %>%
select(mrn:Unit,fdrt, Por_eaten) %>%
mutate(Por_eaten = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 0.75, Por_eaten),
Unit = if_else(Food_NSC == 'Specials, Angel Hair Pasta (2)', 'cup', Unit))
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi'))
View(scan_match)
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
select(new_nsc =  Food_NSC)
scan_match
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
select(new_nsc =  Food_NSC) %>%
separate(new_nsc, into = c('old_nsc','parts'), remove = F, sep = '--')
# I need to find a way to split the scandi shake ones
scan_match <- unit %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
select(new_nsc =  Food_NSC) %>%
separate(new_nsc, into = c('Food_NSC','parts'), remove = F, sep = '--') %>%
select(-parts)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi'))
View(dtb1_p_scandi)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi'))
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi'))
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match)
dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi'))
dtb1_p_scandi
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match) %>%
mutate(Food_NSC = new_nsc)
dtb1_p_scandi <- dtb1_p %>%
filter(str_detect(Food_NSC, 'Scandi')) %>%
right_join(scan_match) %>%
mutate(Food_NSC = new_nsc) %>%
select(-new_nsc)
View(dtb1_scale)
dtb1_p2 <- bind_rows(
dtb1_p %>% filter(!str_detect(Food_NSC, 'Scandi')),
dtb1_p_scandi
)
22787 + 11
View(dtb1_p2)
dtb1_p2
unit
# join the unit table and scale it to all the different portions
dtb1_scale <- dtb1_p2 %>%
left_join(unit, by = c("Food_NSC", "Unit"))
View(unit)
View(unit)
View(dtb1_p)
