ggsave('../data/176_raw_sweets.pdf', width = 4, height = 2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(ggimage)
library(lemon)
axis_text_size <- 10
axis_title_size <- 10
stip_txt_size <- 8
alpha_val <- 0.05
point_size <- 1.2
scatter_col <- 'gray14'
pick_point_size <- 1
pick_line_size <- 0.5
example_pt_line_size <- 0.3
diet_line_color <- '#E41A1C'
stool_line_color <- 'blue'
umap_pt_size <- 1
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
# the colors for each food group specified and saved here
fpalette <- tribble(
~fg1_name, ~color, ~fgrp1,
#--|--|
'fg_milk' , '#3498DB', '1',
'fg_meat' , '#591605', '2',
'fg_egg' , '#F1C40F', '3',
'fg_legume' , '#E67E22', '4',
'fg_grain' , '#D35400', '5',
'fg_fruit' , '#7D3C98', '6',
'fg_veggie' , '#229954', '7',
'fg_oils' , '#707B7C',  '8',
'fg_sweets' , '#db2589' , '9'
)
library(vdbR)
connect_database()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(cowplot)
library(ggimage)
library(lemon)
axis_text_size <- 10
axis_title_size <- 10
stip_txt_size <- 8
alpha_val <- 0.05
point_size <- 1.2
scatter_col <- 'gray14'
pick_point_size <- 1
pick_line_size <- 0.5
example_pt_line_size <- 0.3
diet_line_color <- '#E41A1C'
stool_line_color <- 'blue'
umap_pt_size <- 1
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv', col_types = 'ccccc')
# the colors for each food group specified and saved here
fpalette <- tribble(
~fg1_name, ~color, ~fgrp1,
#--|--|
'fg_milk' , '#3498DB', '1',
'fg_meat' , '#591605', '2',
'fg_egg' , '#F1C40F', '3',
'fg_legume' , '#E67E22', '4',
'fg_grain' , '#D35400', '5',
'fg_fruit' , '#7D3C98', '6',
'fg_veggie' , '#229954', '7',
'fg_oils' , '#707B7C',  '8',
'fg_sweets' , '#db2589' , '9'
)
library(vdbR)
connect_database()
get_table_from_database('asv_alpha_diversity_ag')
get_table_from_database('shotgun_lookup_ad')
dtb  <- read_csv('../data/152_combined_DTB.csv')
meta <- read_csv('../data/153_combined_META.csv')
# how many stool samples per patient
meta %>% count(mrn) %>% summarise(med = median(n))
dtb %>% distinct(Food_code)
# how many days of data among all of the patients?
dtb %>% count(mrn,  fdrt) %>%
count(mrn) %>%
summarise(total_days = sum(n))
dtb %>% distinct(Food_NSC)
dtb %>% count(mrn, fdrt) %>%
distinct(mrn, fdrt)
range(dtb$fdrt)
# summarize how many diet data days we have for the patients?  Median min and max.
dtb %>%
distinct(mrn, fdrt) %>%
#count(mrn) %>%
summary
# -how common was it? how many of 97 patients consumed at least 1?
#-what fraction of meals (or fraction of days) included a smoothie?
#-for how many meals  (or days) was smoothie the only thing consumed?
# find the food code that has the highest per meal average consumption
smoothie <- dtb %>%
group_by(Food_code, description) %>%
summarise(total = sum(dehydrated_weight))  %>%
arrange(desc(total)) %>%
ungroup() %>%
slice(1)  %>%
pull(Food_code)
stool_alpha <- meta %>%
ggscatter(x = 'sdrt', y = 'simpson_reciprocal', alpha = alpha_val, size = point_size,
xlab = 'Day relative to HCT', shape = 'triangle',
#ylab = expression(Microbiome~alpha~diversity),
#title = expression(Microbiome~alpha~diversity),
add = "loess", conf.int = TRUE,
add.params = list(color = stool_line_color, fill = "darkblue", size = 1)) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1) +
theme(axis.title = element_blank(),
plot.title = element_blank())
day_calori <- dtb %>%
group_by(mrn, fdrt) %>%
summarise(daycal = sum(Calories_kcal))
# REMEMBER THAT IN AXIS LABLE YOU NEED TO TIMES THE 1000 BACK!!!!!!
day_cal <- day_calori %>%
mutate(daycal = daycal/1000) %>%
ggscatter(x = 'fdrt', y = 'daycal', alpha = alpha_val, size = point_size, shape = 16,
xlab = 'Day relative to HCT',
ylab = 'Daily caloric intake',
color = scatter_col,
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1)) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1)
# this faith pd is all the combined data of the patients
faith <- read_csv('../data/162_all_faith.csv')
# REMEMBER THAT IN AXIS LABLE YOU NEED TO TIMES THE 1000 BACK!!!!!!
diet_alpha <- faith %>%
mutate(faith_pd = faith_pd/1000) %>%
ggscatter('fdrt', 'faith_pd',
alpha = alpha_val,size = point_size,
color = scatter_col, shape = 16,
ylab = 'Diet alpha diversity',
xlab = 'Day relative to HCT',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1)) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
#scale_y_continuous(limits = c(0, 2.5), breaks = seq(0, 2.5, 1) )
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
aspect.ratio=1)
# make a combined version of the faith and the day_cal
food <- day_calori %>%
full_join(faith)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000) %>%
ggscatter('fdrt', 'value',
alpha = 0.02,size = point_size,
color = scatter_col,
ylab = expression(Diet~alpha~diversity),
xlab = 'Day relative to HCT',
title = 'Daily caloric intake',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1)) +
facet_grid(type ~ .) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme_classic() +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
strip.background = element_blank(),
strip.text = element_blank(),
#plot.title = element_text(size=11, hjust = 0.5,  face = 'bold')
) +
theme(aspect.ratio=1)
umap_faith
stool_alpha
day_cal
diet_alpha
View(food)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000)
View(food2)
food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000) %>%
ggscatter('fdrt', 'value',
alpha = 0.02,size = point_size,
color = scatter_col,
ylab = expression(Diet~alpha~diversity),
xlab = 'Day relative to HCT',
title = 'Daily caloric intake',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1)) +
facet_grid(type ~ .)
food <- day_calori %>%
full_join(faith)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000)
food <- day_calori %>%
full_join(faith)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000)
food <- day_calori %>%
full_join(faith)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000)
expression(Diet~alpha~diversity)
food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000) %>%
ggscatter('fdrt', 'value',
alpha = 0.02,size = point_size,
color = scatter_col,
ylab = expression(Diet~alpha~diversity),
xlab = 'Day relative to HCT',
title = 'Daily caloric intake',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1))
food <- day_calori %>%
full_join(faith)
# make a combined version of the faith and the day_cal
food <- day_calori %>%
full_join(faith)
food2 <- food %>%
gather('type', 'value', daycal:faith_pd) %>%
mutate(value = value/1000) %>%
ggscatter('fdrt', 'value',
alpha = 0.02,size = point_size,
color = scatter_col,
ylab = 'Diet alpha diversity',
xlab = 'Day relative to HCT',
title = 'Daily caloric intake',
add = "loess", conf.int = TRUE,
add.params = list(color = diet_line_color, fill = "hotpink", size = 1)) +
facet_grid(type ~ .) +
scale_x_continuous( breaks = seq(0, 50, 20)) +
theme_classic() +
theme(axis.text=element_text(size=axis_text_size),
axis.title=element_text(size=axis_title_size),
plot.title = element_text(size=axis_title_size),
strip.background = element_blank(),
strip.text = element_blank(),
#plot.title = element_text(size=11, hjust = 0.5,  face = 'bold')
) +
theme(aspect.ratio=1)
food2
# calculate the dominant food group of that day
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv') %>% mutate(fgrp1 = as.character(fgrp1))
fg_daily <- dtb %>%
group_by(mrn, fdrt ) %>%
summarise(daily_total = sum(dehydrated_weight))
fg_sum <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
group_by(mrn, fdrt , fgrp1) %>%
summarise(daily_fg = sum(dehydrated_weight)) %>%
left_join(fg_daily) %>%
mutate(fg_relab = daily_fg/daily_total) %>%
ungroup() %>%
left_join(key) %>%
group_by(mrn, fdrt) %>%
arrange(desc(fg_relab)) %>%
slice(1)
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
# calculate the dominant food group of that day
key <- read_csv('../data/cleaned_diet_data/food_group_color_key_final.csv') %>% mutate(fgrp1 = as.character(fgrp1))
fg_daily <- dtb %>%
group_by(mrn, fdrt ) %>%
summarise(daily_total = sum(dehydrated_weight))
fg_sum <- dtb %>%
mutate(fgrp1 = str_sub(Food_code, 1, 1)) %>%
group_by(mrn, fdrt , fgrp1) %>%
summarise(daily_fg = sum(dehydrated_weight)) %>%
left_join(fg_daily) %>%
mutate(fg_relab = daily_fg/daily_total) %>%
ungroup() %>%
left_join(key) %>%
group_by(mrn, fdrt) %>%
arrange(desc(fg_relab)) %>%
slice(1)
# find out why the few dots are on that far island
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt)) %>%
full_join(fg_sum, by = c("mrn", "fdrt"))
color_key <- OUT %>%
distinct( color, shortname) %>% select(shortname, color) %>%
deframe()
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
out2_umap
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
# find out why the few dots are on that far island
OUT <- read_csv('../data/taxumap_embedding.csv') %>%
separate(index_column, into = c('mrn','fdrt'), sep = '_') %>%
mutate(mrn = as.numeric(str_replace(mrn, 'P','')),
fdrt = as.numeric(fdrt)) %>%
full_join(fg_sum, by = c("mrn", "fdrt"))
color_key <- OUT %>%
distinct( color, shortname) %>% select(shortname, color) %>%
deframe()
out2_umap
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2') +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
install.packages('ggrastr')
library(ggrastr)
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
rasterize(ggscatter(x = 'taxumap1', y = 'taxumap2', color = 'shortname', alpha = 1,size = umap_pt_size , shape = 16,
xlab = 'TaxUMAP1', ylab = 'TaxUMAP2'), layers = 'Point', dpi = 50) +
scale_color_manual(values = color_key) +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggplot(aes(x = taxumap1, y = taxumap2, color = shortname)) +
geom_point(alpha = 1,size = umap_pt_size , shape = 16) +
scale_color_manual(values = color_key) +
labs(x = 'TaxUMAP1', y = 'TaxUMAP2') +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggplot() +
rasterise(geom_point(aes(x = taxumap1, y = taxumap2, color = shortname), alpha = 1,size = umap_pt_size , shape = 16), dpi = 50) +
scale_color_manual(values = color_key) +
labs(x = 'TaxUMAP1', y = 'TaxUMAP2') +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggplot() +
rasterise(geom_point(aes(x = taxumap1, y = taxumap2, color = shortname), alpha = 1,size = umap_pt_size , shape = 16), dpi = 50) +
scale_color_manual(values = color_key) +
labs(x = 'TaxUMAP1', y = 'TaxUMAP2') +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
OUT %>%
#arrange(desc(n)) %>%
ggplot() +
rasterise(geom_point(aes(x = taxumap1, y = taxumap2, color = shortname), alpha = 1,size = umap_pt_size , shape = 16), dpi = 50) +
scale_color_manual(values = color_key) +
labs(x = 'TaxUMAP1', y = 'TaxUMAP2') +
theme_classic()
out2_umap <- OUT %>%
#arrange(desc(n)) %>%
ggplot() +
rasterise(geom_point(aes(x = taxumap1, y = taxumap2, color = shortname), alpha = 1,size = umap_pt_size , shape = 16), dpi = 50) +
scale_color_manual(values = color_key) +
labs(x = 'TaxUMAP1', y = 'TaxUMAP2') +
theme_classic() +
#lemon::coord_capped_cart(bottom = 'both', left = 'both') +
theme(legend.position = "none",
line = element_blank(),
legend.title = element_blank(),
axis.title=element_blank(),
axis.text= element_blank(),
axis.ticks = element_blank(),
panel.background = element_rect(fill='transparent'), #transparent panel bg
plot.background = element_rect(fill='transparent', color=NA), #transparent plot bg
panel.grid.major = element_blank(), #remove major gridlines
panel.grid.minor = element_blank(), #remove minor gridlines
legend.background = element_rect(fill='transparent'), #transparent legend bg
legend.box.background = element_rect(fill='transparent') ,
aspect.ratio=1) +
guides(colour = guide_legend(override.aes = list(alpha=1)))
out2_umap
