# what about the p2d only
p2d_max <- df %>%
filter(str_detect(best_species, 'Enterococcus')) %>%
# summarizing the diet data in various ways
filter(p2date_missing == 'FALSE'  ) %>%
select(sampleid, sdrt, best_species, iRep, pid, intensity, empirical, starts_with('max_p2d')) %>%
gather('grp','gram', max_p2d_fg_Eggs:max_p2d_fg_Vegetables)
# fruits sig with enterococcus
p2d_max %>%
ggscatter(x = 'gram', y = 'iRep', alpha = 0.4, shape = 16,
xlab = '',
ylab = 'Growth rate',
title = 'Enterococcus',
add = "reg.line",  # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n"),
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE)  +
facet_wrap(~ grp, scales = 'free')
p1d_df_max <- p1d_max %>%
spread('grp', 'gram')  %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left'))
View(p1d_df_max)
p1d_df_max
p1d_df_max <- p1d_max %>%
spread('grp', 'gram')  %>%
mutate(timebin = cut_width(sdrt, 7, boundary=0, closed = 'left'))
mod_p1d_max <-  lmer(iRep ~
max_p1d_fg_Eggs+
max_p1d_fg_Fruits+
max_p1d_fg_Grains+
max_p1d_fg_Legumes+
max_p1d_fg_Meats+
max_p1d_fg_Milk+
max_p1d_fg_Oils+
max_p1d_fg_Sweets+
max_p1d_fg_Vegetables+
intensity +
empirical +
(1 | timebin)  +
(1 | pid) , REML = F, data = p1d_df_max )
summary(mod_p1d_max)
# what can I do with the max of the three meals on the p1d and p2d
colnames(df)
contributors()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(tidybayes)
library(brms)
library(rstan)
options(mc.cores = parallel::detectCores())
ncores = parallel::detectCores()
rstan_options(auto_write = TRUE)
axis_text_size <- 10
axis_title_size <- 10
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
post_df <- read_csv('../data/090_genus_macro_fat_model_post.csv', col_select = c('genus','b_ave_fiber','b_ave_fat','b_ave_Sugars'))
View(post_df)
post_res_genera <- post_df %>%
select(genus, starts_with('b_ave')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = if_else(item == 'Fiber', 'Fibers', item))
col_key <- post_res_genera %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
genus_macro_fat_main <- ggplot(post_res_genera, aes(x = genus, y = item)) +
geom_tile(aes(fill = color,  x = genus, y =  item), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  item),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
legend.title = element_blank() ,
#panel.grid.major = element_line( colour = "gray50"),
#panel.grid.minor = element_line( colour = "gray50"),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background=element_rect(colour="black"))
genus_macro_fat_main
View(post_res_genera)
post_res_genera %>% distinct(genus) %>% nrow()
post_df <- read_csv('../data/090_genus_macro_fat_model_post.csv', col_select = c('genus','b_ave_fiber','b_ave_fat','b_ave_Sugars'))
post_res_genera <- post_df %>%
select(genus, starts_with('b_ave')) %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item = str_replace(item, 'b_ave_','')) %>%
mutate(item = str_to_title(item)) %>%
mutate(item = if_else(item == 'Fiber', 'Fibers', item))
col_key <- post_res_genera %>%
ungroup() %>%
distinct(color) %>%
pull(color)
names(col_key) <- col_key
genus_macro_fat_main <- ggplot(post_res_genera, aes(x = genus, y = item)) +
geom_tile(aes(fill = color,  x = genus, y =  item), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  item),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0', '75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
legend.title = element_blank() ,
#panel.grid.major = element_line( colour = "gray50"),
#panel.grid.minor = element_line( colour = "gray50"),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background=element_rect(colour="black"))
genus_macro_fat_main %>% write_rds('../data/090_genus_macro_fat_main.rds')
# the factor variables for the genus macro fat
# doesn't need to include the intensity ones since they are the intercepts
post_df <- read_csv('../data/090_genus_macro_fat_model_post.csv', col_select = c('genus', 'b_ENTRUE', 'b_TPNTRUE', 'b_empiricalTRUE'))
post_bi_res <- post_df %>%
gather('item','coeff', names(.)[2]:names(.)[ncol(.)]) %>%
group_by(genus, item) %>%
summarise(q50 = median(coeff),
q2.5 = quantile(coeff, probs = 0.025),
q97.5 = quantile(coeff, probs = 0.975),
q12.5 = quantile(coeff, probs = 0.125),
q87.5 = quantile(coeff, probs = 0.875),
q1.25 = quantile(coeff, probs = 0.0125),
q98.75 = quantile(coeff, probs = 0.9875),
q0.5 = quantile(coeff, probs = 0.005),
q99.5 = quantile(coeff, probs = 0.995)
) %>%
ungroup() %>%
mutate(mark = if_else(q99.5 < 0 | q0.5 > 0, '***', if_else(q98.75 < 0 | q1.25 > 0, '**', if_else(q97.5 < 0 | q2.5 > 0, '*', '')))) %>%
mutate(color = if_else(q87.5 < 0, 'steelblue', if_else(q12.5 > 0, 'maroon', 'white'))) %>%
mutate(item_name = case_when(
item ==  'b_empiricalTRUE' ~ 'Empirical abx exposure',
item == 'b_TPNTRUE' ~ 'TPN exposure',
item ==  'b_ENTRUE' ~ 'EN exposure'
))
genus_macro_fat_factor <- ggplot(post_bi_res, aes(x = genus, y = item_name)) +
geom_tile(aes(fill = color,  x = genus, y =  item_name), alpha = 0.5, color='white', width=0.95, height=0.95) +
geom_text(aes(label = mark, x = genus,y =  item_name),
nudge_y = -0.1, nudge_x = 0,size = 5) +
scale_fill_manual(values = col_key, labels = c('Less than 75% CI crosses 0','75% CI < 0 negative','75% CI > 0 positive')) +
theme_pubr() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_text(angle=50, hjust=1, size=11),
axis.text.y=element_text(size=11),
axis.title=element_text(size=axis_title_size),
#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
legend.position = 'top',
legend.key = element_rect( colour = "gray50"),
panel.background = element_rect(colour="black"))
genus_macro_fat_factor %>%
write_rds('../data/090_genus_macro_fat_factor.rds')
genus_macro_fat_factor
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(cowplot)
fat_cal_cor <- read_rds('../data/090_fat_cal_cor.rds')
corr <- read_rds('../data/090_fat_pro_cor.rds')
alpha_main <- read_rds('../data/090_macronutrients_alpha_main.rds')
alpha_factor <- read_rds('../data/090_macronutrients_alpha_factor.rds')
alpha <-  plot_grid(corr, fat_cal_cor,  alpha_main,alpha_factor,
nrow = 2, labels = c('A','B', 'C', "D"),  align = 'hv', axis = 'tblr')
alpha
genus_main <- read_rds('../data/090_genus_macro_fat_main.rds')
genus_factor <- read_rds('../data/090_genus_macro_fat_factor.rds')
genus <-  plot_grid(  genus_main,genus_factor,
nrow = 2, labels = c('E','F'),
rel_heights  = c(1, 1),
align = 'v', axis = 'lb')
genus
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 2),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.pdf',
width = 240,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.jpg',
width = 240,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 2),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.pdf',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.jpg',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 2),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.pdf',
width = 260,
height = 330,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.jpg',
width = 260,
height = 330,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 1.5),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.pdf',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.jpg',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
macro <- plot_grid(  alpha, genus,
nrow = 2,
rel_heights  = c(1, 1),
align = 'v', axis = 'tblr')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.pdf',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'pdf')
ggsave('../figs/paper/S3_macronutrients_alpha_and_genus_093.jpg',
width = 260,
height = 350,
#height = 60,
units = c("mm"),
dpi = 400, device = 'jpg')
knitr::opts_chunk$set(echo = TRUE)
library(vdbR)
library(tidyverse)
connect_database('~/dbConfig.txt')
get_table_from_database('asv_alpha_diversity_ag')
get_table_from_database('asv_alpha_diversity_ag')
get_table_from_database('asv_annotation_blast_ag')
View(asv_alpha_diversity_ag)
alpha <- asv_alpha_diversity_ag %>%
filter(uploaded_date == '2021-07-07') %>%
select(sampleid:shannon)
# pool 1137 for Urvi
alpha <- asv_alpha_diversity_ag %>%
filter(uploaded_date == '2022-07-07') %>%
select(sampleid:shannon)
View(alpha)
alpha <- asv_alpha_diversity_ag %>%
filter(uploaded_date == '2022-07-07') %>%
select(sampleid:shannon)
cts <- asv_counts_ag %>%
filter(sampleid %in% alpha$sampleid) %>%
select(asv_key:count_total, count_relative)
cts <- get_counts_subset(alpha$sampleid) %>%
select(asv_key:count_total, count_relative)
taxa <- asv_annotation_blast_ag %>%
filter(asv_key %in% cts$asv_key) %>%
select(asv_key:blast_pass)
list(alpha = alpha,
counts = cts,
taxa = taxa) %>%
imap(function(.x, .y){
write_csv(.x, str_glue('../data/pool1137_Urvi_ASV_{.y}.csv'))
})
cts %>% distinct(sampleid)
knitr::opts_chunk$set(echo = TRUE)
dtb <- read_csv('../data/cleaned_diet_data/FINAL_97_with_code_all_foods_drt_with_EN_finalized.csv')
View(dtb)
dtb %>% distinct(Food_NSC)
View(dtb)
dtb %>% distinct(Food_NSC)
dtb %>% distinct(mrn, Meal)
dtb %>% count(mrn, Meal)
dtb %>% count(mrn, Meal, fdrt)
dtb %>% count(mrn,  fdrt)
View(dtb)
dtb %>% count(mrn,  fdrt) %>%
sum(n)
dtb %>% count(mrn,  fdrt)
dtb %>% count(mrn,  fdrt) %>%
summarise(total_days = sum(n))
dtb %>% count(mrn,  fdrt) %>%
ungroup() %>%
summarise(total_days = sum(n))
dtb %>% count(mrn,  fdrt) %>%
ungroup()
dtb %>% count(mrn,  fdrt) %>%
count(mrn)
dtb %>% count(mrn,  fdrt) %>%
count(mrn) %>%
summarise(total_days = sum(n))
dtb %>% count(mrn,  fdrt)
dtb %>% count(mrn,  fdrt) %>%
count(mrn) %>%
summarise(total_days = sum(n))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(vdbR)
connect_database()
get_table_from_database('patient_allo_ag')
View(patient_allo_ag)
new <- read_csv('../data/complete_yearly_pull_data_2022-05-12.csv')
View(patient_allo_ag)
View(new)
colnames(new)
colnames(patient_allo_ag)
length(intersect(colnames(patient_allo_ag), colnames(new)))
colnames(patient_allo_ag)
length(intersect(colnames(patient_allo_ag), colnames(new)))
setdiff(colnames(new), colnames(patient_allo_ag))
setdiff( colnames(patient_allo_ag), colnames(new))
View(new)
colnames(patient_allo_ag)
setdiff(colnames(new), colnames(patient_allo_ag))
View(patient_allo_ag)
colnames(patient_allo_ag)
View(patient_allo_ag)
View(new)
View(new)
new %>%
count(icu)
new %>%
count(icu_days)
new %>%
count(icu)
setdiff(colnames(new), colnames(patient_allo_ag))
colnames(patient_allo_ag)
setdiff(colnames(new), colnames(patient_allo_ag))
# transplant_id the order for different transplants for same patient
# race_dscrp, ethnicity   new
# older tt_anc_500 == newer time_aneut_500
patient_allo_ag %>% count(tt_anc_500)
patient_allo_ag %>% count(anc_500)
# transplant_id the order for different transplants for same patient
# race_dscrp, ethnicity   new
# older tt_anc_500 == newer time_aneut_500
patient_allo_ag %>% count(tt_anc_500)
new %>% count(time_aneut_500)
setdiff(colnames(new), colnames(patient_allo_ag))
new %>% count(aneut_500_date)
new %>% count(time_aneut_500)
setdiff(colnames(new), colnames(patient_allo_ag))
# transplant_id the order for different transplants for same patient
# race_dscrp, ethnicity   new
new %>% summary
new %>% count(days_per_reason)
View(patient_allo_ag)
patient_allo_ag %>% summary()
new %>% count(given_gvhd_prophy)
colnames(patient_allo_ag)
new %>% count(status)
View(patient_allo_ag)
new %>%
select(starts_with('d100'))
new %>%
select(starts_with('d100')) %>%
summary
new %>%
select(starts_with('d100')) %>%
glimpse
patient_allo_ag %>% select(gvhd:overall_agvhd) %>% glimpse()
setdiff(colnames(new), colnames(patient_allo_ag))
setdiff( colnames(patient_allo_ag), setdiff(colnames(new), colnames(patient_allo_ag)))
setdiff( colnames(patient_allo_ag), setdiff(colnames(new)))
setdiff( colnames(patient_allo_ag), setdiff(colnames(new))
setdiff( colnames(patient_allo_ag), colnames(new)
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% count(assessment_period)
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% count(assessment_period)
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% count(los)
colnames(patient_allo_ag)
colnames(patient_allo_ag)
patient_allo_ag
patient_allo_ag$start == patient_allo_ag$admit
patient_allo_ag %>%
mutate(stay = discharge - admit)
patient_allo_ag %>%
mutate(stay = as.numeric(discharge - start)) %>%
mutate(stay == los) %>%
count(stay)
patient_allo_ag %>%
mutate(stay = as.numeric(discharge - start)) %>%
mutate(same = if_else(stay == los, T, F)) %>%
count(same)
patient_allo_ag %>%
mutate(stay = as.numeric(discharge - admit)) %>%
mutate(same = if_else(stay == los, T, F)) %>%
count(same)
patient_allo_ag %>%
mutate(stay = as.numeric(discharge - start)) %>%
mutate(same = if_else(stay == los, T, F)) %>%
count(same)
patient_allo_ag %>%
mutate(stay = as.numeric(discharge - start)) %>%
mutate(same = if_else(stay == los, T, F)) %>%
count(same)
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% select(gvhd:overall_agvhd) %>% glimpse()
patient_allo_ag %>% count(staging_system)
View(patient_allo_ag)
new %>%
select(starts_with('d100')) %>%
glimpse
# older
# assessment_period :  0-100 days
# length of stay :
# earlier to thru 2019: staging is IBMTR
new %>%
filter(!is.na(d100_przepiorka_highest_overall_grade))
patient_allo_ag %>% select(gvhd:overall_agvhd) %>% glimpse()
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% select(starts_with('gvhd')) %>% glimpse()
patient_allo_ag %>% select(starts_with('gvhd')) %>% filter(!is.na(gvhd_ppx)) %>% glimpse()
# what is the difference betweem gvhd_prophylaxis, gvhd_ppx and gvhd_ppx_group_molly? should we keep all of them
patient %>%
count(gvhd_type)
# what is the difference betweem gvhd_prophylaxis, gvhd_ppx and gvhd_ppx_group_molly? should we keep all of them
patient %>%
count(gvhd_type)
# what is the difference betweem gvhd_prophylaxis, gvhd_ppx and gvhd_ppx_group_molly? should we keep all of them
patient_allo_ag %>%
count(gvhd_type)
View(new)
View(new)
patient_allo_ag %>%
count(type)
new %>% count(type)
patient_allo_ag %>%
count(type)
patient_allo_ag %>%
count(source)
View(new)
patient_allo_ag %>%
count(gvhd_type)
setdiff(colnames(new), colnames(patient_allo_ag))
setdiff( colnames(patient_allo_ag), colnames(new))
new %>%
count(icu)
setdiff(colnames(new), colnames(patient_allo_ag))
new %>% count(d100_a_gvhd)
new %>%
filter(type != 'auto') %>%
count(d100_a_gvhd)
new %>%
filter(type != 'auto') %>%
count(d100_a_gvhd)
patient_allo_ag %>% count(type)
patient_allo_ag %>% count(gvhd_type)
setdiff(colnames(new), colnames(patient_allo_ag))
setdiff( colnames(patient_allo_ag), colnames(new))
patient_allo_ag %>% select(starts_with('gvhd')) %>% filter(!is.na(gvhd_ppx)) %>% glimpse()
patient_allo_ag %>% select(starts_with('gvhd')) %>% filter(!is.na(gvhd_ppx)) %>%  select(-gvhd, -gvhd_type) %>% glimpse()
