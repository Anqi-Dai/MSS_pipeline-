)  %>%
gather('item', 'coeff', b_fg_fruit:b_fg_veggie)
summ <- both %>%
group_by(grp, item) %>%
summarise(q025 = quantile(coeff, 0.025),
q975 = quantile(coeff, 0.975),
q50 = quantile(coeff, 0.5)) %>%
arrange(grp, q50)
fg_order <- summ %>%
filter(grp == 'post') %>%
arrange(-q50) %>%
pull(item)
pinterval <- both %>%
#mutate(item = str_replace(item, 'b_','')) %>%
left_join(key %>%
select(item = fg1_name)) %>%
mutate(item = factor(item, levels = fg_order)) %>%
ggplot(aes(x = coeff, y = grp, color = grp)) +
stat_pointinterval(.width = c(.66, .95)) +
scale_color_manual(values = c('#EC0000','#00468B')) +
geom_vline(xintercept = 0, col = 'gray', linetype = 'dashed') +
facet_wrap(item ~ .) +
labs(x = 'Regression coefficients',
y = '') +
theme(legend.position = 'none')
pinterval
ggsave('../figs/paper/prior_post_pinterval_coeff.pdf', width = 10, height = 4)
# post_all <- bind_rows(ave_each_fg_post, max_each_fg_post) %>%
#   mutate(div = exp(post_res))
# post_all %>%  write_csv('../figs/paper/data/post_ave_max_min_res_68.csv')
#
# post_check_list <- fg_cha %>%
#   set_names(fg_cha) %>%
#   map(function(char){
#     post_all %>%
#       filter(str_detect(grp, str_glue('ave_each|{char}'))) %>%
#       gghistogram(x = 'div', fill = 'grp', color = 'white', palette = 'lancet', xlab = 'logdiversity',
#                   #add_density = TRUE,
#                   bins = 30,
#                   title = str_glue('Post check {char}'))
#     })
#
# g_post <- cowplot::plot_grid(post_check_list[[1]],post_check_list[[2]],post_check_list[[3]],post_check_list[[4]],post_check_list[[5]],post_check_list[[6]],post_check_list[[7]],post_check_list[[8]],post_check_list[[9]],
#     ncol = 3, nrow= 3,
#     o = 'hv',
#     #labels = 'AUTO',
#     axis = 'bltr')
# g_post
#
# ggsave('../figs/paper/post_check_9fg.pdf', width = 10, height = 10, dpi = 300, plot = g_post)
# the top and bottom fruit eaters diet
# set.seed(123)
# N <- 5
# N_sample <- 1000
# topdiet <- meta %>%
#   top_n(n = N, wt = fg_fruit) %>%
#   mutate(TPNTRUE = if_else(TPN == TRUE, 1, 0),
#          ENTRUE = if_else(EN == TRUE, 1, 0),
#          empiricalTRUE = if_else(empirical == TRUE, 1, 0),
#          intensityreduced = if_else(intensity == 'reduced', 1, 0),
#          intensityablative = if_else(intensity == 'ablative', 1, 0)) %>%
#   select(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie)
#
# botdiet <- meta %>%
#   filter(fg_fruit == 0) %>%
#   slice_sample(n = 5) %>%
#   mutate(TPNTRUE = if_else(TPN == TRUE, 1, 0),
#          ENTRUE = if_else(EN == TRUE, 1, 0),
#          empiricalTRUE = if_else(empirical == TRUE, 1, 0),
#          intensityreduced = if_else(intensity == 'reduced', 1, 0),
#          intensityablative = if_else(intensity == 'ablative', 1, 0))%>%
#   select(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie)
#
#
# per_diet_post_pred <- function(fg_egg_, fg_fruit_, fg_grain_, fg_legume_, fg_meat_, fg_milk_, fg_oils_,
#                                fg_sweets_, fg_veggie_) {
#   post_samp <- post_samples %>%
#     sample_n(size = N_sample, replace = F)
#
#   ret = pmap(post_samp, function(b_Intercept, b_fg_fruit, b_fg_meat, b_fg_milk, b_fg_oils, b_fg_egg,
#                                  b_fg_grain, b_fg_sweets, b_fg_legume, b_fg_veggie) {
#     b_Intercept + b_fg_fruit*fg_fruit_ + b_fg_meat*fg_meat_ + b_fg_milk*fg_milk_ + b_fg_oils*fg_oils_ +
#       b_fg_egg*fg_egg_ + b_fg_grain*fg_grain_ + b_fg_sweets*fg_sweets_ + b_fg_legume*fg_legume_ +
#       b_fg_veggie*fg_veggie_
#   }) %>%
#     set_names(seq(1, N_sample)) %>%
#     bind_rows() %>%
#     gather()
#   return(ret)
#                                }
#
#
# res_top <- pmap(topdiet, function(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie){
#   per_diet_post_pred(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie)
# }) %>%
#   set_names(paste('D', seq(1, nrow(topdiet)), sep = '')) %>%
#   bind_rows(.id = 'diet')
#
#
# res_bot <- pmap(botdiet, function(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie){
#   per_diet_post_pred(fg_egg, fg_fruit, fg_grain, fg_legume, fg_meat, fg_milk, fg_oils, fg_sweets, fg_veggie)
# }) %>%
#   set_names(paste('D', seq(1, nrow(topdiet)), sep = '')) %>%
#   bind_rows(.id = 'diet')
#
#
# # plot them together in one
# bind_rows(
#   res_top %>% mutate(grp = 'top'),
#   res_bot %>% mutate(grp = 'bot')
# ) %>%
#   gghistogram(x = 'value',bins = 30, fill = 'grp', palette = 'nejm', color = 'white', add = 'mean',
#                   xlab = 'Predicted log diversity', ylab = 'Probability density') +
#   ggsave('../figs/predicted_logdiversi_top_tybottom_5.pdf', width = 7, height = 5)
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
View(post_diff_df)
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
View(key)
key
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F)) %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color))
key
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F)) %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
post_diff_df
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'top') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average',
y = '',
title = '') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
# calculate the absolute difference between the max in each fg and the mean
# note the mean is from EN-free records.
maxs <- max_each_fg_post %>%
as.list()
diff_value_lt0 <-  maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_ = max_ - ave)
}) %>%
map( ~ count(x = ., post_diff_ < 0) %>%
mutate(perc = n/sum(n) * 100) %>%
slice(2) %>%
select(perc)) %>%
bind_rows(.id = 'term')
theme_set(theme_tidybayes() + cowplot::panel_border())
post_diff_df <- maxs %>%
map(function(vec) {
tibble(
max_=vec,
ave=ave_each_fg_post$post_res
) %>%
mutate(post_diff_original_scale = exp(max_) - exp(ave))
}) %>%
bind_rows(.id = 'term') %>%
mutate(term = str_replace(term, 'max_','')) %>%
left_join(key %>%
select(term = fg1_name, color)) %>%
mutate(term = fct_reorder(term, post_diff_original_scale, .fun=median, .desc = F))
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe())
ggsave('../figs/paper/fg9_post_diff.png', width = 7, height = 6)
ggsave('../figs/paper/fg9_post_diff.png',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-4.1, 14)
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
post_diff_df %>%
ggplot(aes(y = term, x = post_diff_original_scale, col = term)) +
stat_halfeye() +
#scale_fill_manual(values = c("gray80", "skyblue")) +
geom_vline(xintercept = 0, linetype = "dashed", col = 'red') +
labs(x = "Difference in Simpson's reciprocal diversity",
y = '',
title = 'The diff in simpson reciprocal diversity if one food group is consumed\nat max amount than the average') +
theme(legend.position = 'none') +
scale_x_continuous(breaks = seq(-10, 20, 2)) +
scale_color_manual(values = key %>%
select(fg1_name, color) %>% deframe()) +
xlim(-4.1, 12)
ggsave('../figs/paper/fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
ggsave('../figs/paper/fig2_fg9_post_diff.eps',  width = 100,
height = 100,
#height = 60,
units = c("mm"),
dpi = 400, device = 'eps')
knitr::opts_chunk$set(echo = TRUE)
fns <- list.files('../data/growth/irep/bhatirep/', full.names = T, pattern = '.tsv')
irep <- fns %>%
set_names(fns) %>%
purrr::map(~  read_tsv(file = ., n_max = 1 , col_types = 'cc',  skip = 2, col_names = c('bin','iRep')) %>%  select(iRep) ) %>%
bind_rows(.id = 'fn') %>%
mutate(fn = str_replace(fn, '_irep.tsv$',''),
fn = str_replace(fn, '../data/growth/irep/bhatirep//','')) %>%
separate(fn, into = c('sampleid','samplebin'), sep = '__concat__', remove = T) %>%
mutate(iRep = as.numeric(iRep)) %>%
mutate(samplebin = str_replace(samplebin, '_irep_dastool.tsv','')) %>%
mutate(sbid = str_glue('{sampleid}__{samplebin}'))
View(irep)
# after the dastool, do the drep to de-replicate
drep <- read_delim('../data/growth/bhatpipeline/all_derepliated_genomes.txt', col_names = F, delim = ' ') %>%
select(X9) %>%
separate(X9, into = c('Sample','bin'), remove = F, sep = '__concat__')
View(drep)
all <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
View(all)
all <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
View(all)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .))
View(tb)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))
tb
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75)
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid')
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
# combined %>%
#   mutate(gt15 = if_else(iRep > 1.5, T, F)) %>%
#   count(gt15) %>%
#   mutate(perc = n/sum(n)*100)
tb <- read_tsv('../data/growth/bhatpipeline/binning_table_all_simple.tsv') %>%
rename_all(~ gsub("\\.", "_", .)) %>%
filter(bin_quality_call %in% c('2) medium quality','3) high quality Nayfach','4) high quality Bowers'))  %>%
filter(Completeness >= 75) %>%
mutate(Sample = str_replace(Sample, '__concat',''),
sbid = str_glue('{Sample}__{Bin}')) %>%
inner_join(irep, by  = 'sbid') %>%
distinct(Sample, best_species, .keep_all = T)
# combined %>%
#   mutate(gt15 = if_else(iRep > 1.5, T, F)) %>%
#   count(gt15) %>%
#   mutate(perc = n/sum(n)*100)
# meta data of the samples
meta <- read_csv('../data/cleaned_stool/all_samples_meta_p2d_fg9_updated.csv')
View(tb)
View(tb)
# ignore the NA irep values for now
dat <- tb %>%
filter(!is.na(iRep))
combined <- dat %>%
inner_join(meta , by = "sampleid") %>%
select(sampleid, iRep, sbid, mrn, best_level, best_species, starts_with('fg'), simpson_reciprocal, empirical)
combined %>%
select(-mrn) %>%
write_csv('../data/growth/irep_with_diet_for_jonas.csv')
combined <- dat %>%
inner_join(meta , by = "sampleid") %>%
select(sampleid, iRep, sbid, mrn, best_level, best_species, starts_with('fg'), simpson_reciprocal, empirical)
View(combined)
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
# save this table , very important
combined %>%
write_csv('../data/growth/irep_combined_res.csv')
View(combined)
5/845
# check the coverage of these bins
fns <- list.files('../data/growth/irep/coverage_from_sam/', pattern = 'txt')
covs <- read_tsv(fns[1])
# check the coverage of these bins
fns <- list.files('../data/growth/irep/coverage_from_sam/', pattern = 'txt')
covs <- read_tsv(fns[1])
