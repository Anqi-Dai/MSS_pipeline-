conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
fitPrior <- brm(div_model, data=meta,
prior=div_priors,
sample_prior = "only")
# the below is the posterior predictive check
prior_c <- pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
prior_c
prior_c <- pp_check(fitPrior, type = "scatter_avg", ndraws = 100)$data
prior_c
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
prior_c <- pp_check(fitPrior, type = "scatter_avg", ndraws = 100)$data
fitPrior <- brm(div_model, data=meta,
prior=div_priors,
sample_prior = "only")
fitPrior
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
# to see the pearson correlation of that
post_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
# to see the pearson correlation of that
post_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
# to see the pearson correlation of that
post_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
# I think it's a good fit from the posterior !
pp_check(fitPrior, plotfun = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior, type = "scatter", nreps = 3)
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
View(post_c)
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
# to see the pearson correlation of that
post_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
# I think it's a good fit from the posterior !
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
?pp_check
pp_check(fitPrior)
get_prior(div_model,data = meta )
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
View(prior_c)
View(fitPrior)
# the below is the posterior predictive check
prior_c <- pp_check(fitPrior)$data
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
prior_c
prior_c <- pp_check(fitPrior)$data
prior_c
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
# the below is the posterior predictive check
prior_c <- pp_check(fitPrior, type = "scatter_avg", ndraws = 100)$data
# to see the pearson correlation of that
prior_c %>%
ggscatter(x = 'y_obs', y = 'value',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "pearson",  label.sep = "\n"))
?brm
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior)
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
knitr::opts_chunk$set(echo = TRUE)
gcts <- read_csv('../data/088_genus_relab_log10_wide.csv') %>%
select(sampleid, all_of(target_genera))
gcts <- read_csv('../data/088_genus_relab_log10_wide.csv')
View(meta)
View(gcts)
gghistogram(meta$simpson_reciprocal)
gghistogram(log(meta$simpson_reciprocal))
ggboxplot(log(meta$simpson_reciprocal))
gghistogram(log(meta$simpson_reciprocal))
gcts %>% filter(sampleid == 'FMT.0160K' ) %>% gather %>% view()
10^(-0.000287721435136314)
fitPrior <- brm(div_model, data=meta,
family = 'Gamma',
prior=div_priors,
sample_prior = "only")
# the below is the posterior predictive check
prior_c <- pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior)
pp_check(fitPrior)
pp_check(fitPrior, type = "scatter_avg", ndraws = 100)
div_model  <- simpson_reciprocal ~ 0 +
intensity+
fg_fruit_e+
fg_meat_e+
fg_milk_e+
fg_oils_e+
fg_egg_e+
fg_grain_e+
fg_sweets_e+
fg_legume_e+
fg_veggie_e+
abx+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
div_priors <- c(# for the food group variables
prior(normal(0, 1), class = 'b', coef = "fg_egg"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit"),
prior(normal(0, 1), class = 'b', coef = "fg_grain"),
prior(normal(0, 1), class = 'b', coef = "fg_legume"),
prior(normal(0, 1), class = 'b', coef = "fg_meat"),
prior(normal(0, 1), class = 'b', coef = "fg_milk"),
prior(normal(0, 1), class = 'b', coef = "fg_oils"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie"),
# interaction terms
prior(normal(0, 1), class = 'b', coef = "fg_egg_e"),
prior(normal(0, 1), class = 'b', coef = "fg_fruit_e"),
prior(normal(0, 1), class = 'b', coef = "fg_grain_e"),
prior(normal(0, 1), class = 'b', coef = "fg_legume_e"),
prior(normal(0, 1), class = 'b', coef = "fg_meat_e"),
prior(normal(0, 1), class = 'b', coef = "fg_milk_e"),
prior(normal(0, 1), class = 'b', coef = "fg_oils_e"),
prior(normal(0, 1), class = 'b', coef = "fg_sweets_e"),
prior(normal(0, 1), class = 'b', coef = "fg_veggie_e"),
# for the TPN
prior(normal(0, 0.1), class = 'b', coef = "TPN"),
# for the EN
prior(normal(0, 0.1), class = 'b', coef = "EN"),
# for the empirical
prior(normal(0, 0.5), class = 'b', coef = "abx"),
# for the intensity
prior(normal( 2, .1), class = 'b', coef = "intensityablative"),
prior(normal( 2, .1), class = 'b', coef = "intensityreduced"),
prior(normal( 2, .1), class = 'b', coef = "intensitynonablative")
)
fitPrior <- brm(div_model, data=meta,
family = 'lognormal',
prior=div_priors,
sample_prior = "only")
pp_check(fitPrior)
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
div_model  <- log(simpson_reciprocal) ~ 0 +
intensity+
fg_fruit_e+
fg_meat_e+
fg_milk_e+
fg_oils_e+
fg_egg_e+
fg_grain_e+
fg_sweets_e+
fg_legume_e+
fg_veggie_e+
abx+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
fitPrior <- brm(div_model, data=meta,
family = 'lognormal',
prior=div_priors,
sample_prior = "only")
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
pp_check(fitPrior)
div_model  <- log(simpson_reciprocal) ~ 0 +
intensity+
fg_fruit_e+
fg_meat_e+
fg_milk_e+
fg_oils_e+
fg_egg_e+
fg_grain_e+
fg_sweets_e+
fg_legume_e+
fg_veggie_e+
abx+
fg_fruit+
fg_meat+
fg_milk+
fg_oils+
fg_egg+
fg_grain+
fg_sweets+
fg_legume+
fg_veggie+
TPN+
EN+
(1 | mrn) +
(1 | timebin)
fitPrior <- brm(div_model, data=meta,
family = 'gaussian',
prior=div_priors,
sample_prior = "only")
pp_check(fitPrior, type = "boxplot", nreps = 10, notch = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(brms)
# correlate top genus abundance with diversity, check if entero and kleb have most negative correlation
meta <- read_csv('../data/153_combined_META.csv')
g_relab <- read_csv('../data/022_ALL173_stool_samples_genus_counts.csv') %>%
filter(!is.na(genus)) %>%
spread('genus','relab', fill = 0) %>%
gather('genus','relab', names(.)[2]:names(.)[ncol(.)]) %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
# just calculate the spearman correlation and p value
spearman_res <- g_relab %>%
split(.$genus) %>%
imap_dfr(function(.x, .y ){
# the spearman correlation
spearman_cor = cor.test(.x$simpson_reciprocal, .x$relab, method = c( "spearman"))
spearman_rho = round(spearman_cor$estimate, 2)
spearman_pval = round(spearman_cor$p.value , 2)
return(list(genus = .y, rho = spearman_rho, pval = spearman_pval))
} )
# show the % of the samples that have the relab of the genus > 10^-4
perc_thre <- g_relab %>%
count(genus, relab > 10^-4) %>%
filter(`relab > 10^-4` == 'TRUE') %>%
mutate(passthre_perc = round(n/1009*100, 0))
spearman_all <- spearman_res %>%
left_join(perc_thre) %>%
mutate(n = ifelse(is.na(n), 0, n),
passthre_perc = ifelse(is.na(passthre_perc), 0, passthre_perc))
# to visualize the ones that passed the threshold to scatter plot
selected <- spearman_all %>%
filter(passthre_perc > 10 & pval < 0.05)
g_relab %>%
filter(genus %in% selected$genus) %>%
left_join(selected %>% select(genus, rho, pval)) %>%
filter(rho < 0) %>%
ggscatter( x = 'simpson_reciprocal', y = 'relab', facet.by = 'genus',alpha =0.2,
title = 'genus with correlation < 0',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", label.y.npc = "top", color = 'red'))
ggsave('../data/172_diversity_genus_relab_cor.pdf', width = 9)
spearman_all %>% write_csv('../data/172_spearman_all.csv')
domination <- g_relab %>%
count(genus, relab > 0.3) %>%
filter(`relab > 0.3` == 'TRUE') %>%
mutate(dom_perc = round(n/1009*100, 0))
domination %>%
filter(dom_perc > 0) %>%
write_csv('../data/172_has_domination30_genus.csv')
passthregenus <- spearman_all %>%
filter(passthre_perc > 15 )
logrelab <- read_csv('../data/088_genus_relab_log10_wide.csv') %>%
gather('genus','logrelab', names(.)[2]:names(.)[ncol(.)]) %>%
filter(genus %in% passthregenus$genus) %>%
spread('genus','logrelab') %>%
inner_join(meta %>% select(sampleid, simpson_reciprocal))
response <- logrelab$simpson_reciprocal
genuslog <- logrelab %>% select(-sampleid) %>% as.matrix()
res <- lm(response ~ 1 + genuslog )
summary(res)
View(spearman_all)
irep <- read_csv('../data/114_combined_irep_915.csv') %>%
select(sampleid:sdrt, iRep, best_species) %>%
mutate(best_species = str_replace(best_species, '\\[',''),
best_species = str_replace(best_species, '\\]','')) %>%
mutate(genus = str_extract(best_species, "[^\\s]+"))
meta <- read_csv('../data/153_combined_META.csv')
# the ones identify as from Enterococcus
entero <- irep %>%
filter(str_detect(best_species, 'Enterococcus')) %>%
group_by(sampleid) %>%
summarise(max_entero = max(iRep)) %>%
inner_join(meta %>% select(sampleid, fg_sweets, empirical))
View(entero)
entero %>%
ggscatter(x = 'fg_sweets', y = 'max_entero',
facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero %>%
ggscatter(x = 'fg_sweets', y = 'max_entero',
#facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero
# the ones identify as from Enterococcus
entero <- irep %>%
filter(str_detect(best_species, 'Enterococcus')) %>%
group_by(sampleid) %>%
summarise(max_entero = max(iRep)) %>%
inner_join(meta %>% select(sampleid, fg_sweets, empirical))%>%
mutate(iRep_zscore = scale(max_entero, center = T, scale = T))
entero %>%
ggscatter(x = 'fg_sweets', y = 'iRep_zscore',
#facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero <- irep %>%
filter(str_detect(best_species, 'Enterococcus')) %>%
group_by(sampleid) %>%
summarise(max_entero = max(iRep)) %>%
inner_join(meta %>% select(sampleid, fg_sweets, empirical))%>%
mutate(iRep_zscore = scale(max_entero, center = T, scale = T))
entero %>%
ggscatter(x = 'fg_sweets', y = 'iRep_zscore',
#facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero %>%
ggscatter(x = 'fg_sweets', y = 'iRep_zscore',
facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero %>%
ggscatter(x = 'fg_sweets', y = 'iRep_zscore',
#facet.by = 'empirical',
#color = 'genus',palette = 'lancet',
xlab = 'Sweets',
ylab = 'Growth rate ',
add = "reg.line",  # Add regressin line
add.params = list(color = "blue", fill = "lightgray"), # Customize line
conf.int = TRUE, # Add confidence interval
cor.coef = TRUE, # Add correlation coefficient.
cor.coeff.args = list(method = "spearman",  label.sep = "\n", label.x.npc = "left", size = 2.5))
entero %>% count(mrn)
entero
meta %>% select(sampleid, fg_sweets, empirical, mrn, timebin)
# the ones identify as from Enterococcus
entero <- irep %>%
filter(str_detect(best_species, 'Enterococcus')) %>%
group_by(sampleid) %>%
summarise(max_entero = max(iRep)) %>%
inner_join(meta %>% select(sampleid, fg_sweets, empirical, mrn, timebin, intensity))%>%
mutate(iRep_zscore = scale(max_entero, center = T, scale = T))
lmer(iRep_zscore ~
fg_sweets+
empirical +
intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = dat )
library(lmerTest)
lmer(iRep_zscore ~
fg_sweets+
empirical +
intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
lmer(iRep_zscore ~
fg_sweets+
empirical +
#intensity +
(1 | mrn)  REML = F, data = entero )
library(lmerTest)
lmer(iRep_zscore ~
fg_sweets+
empirical +
#intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
library(lmerTest)
lmer(iRep_zscore ~
fg_sweets*empirical+
empirical +
intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
mod <-  lmer(iRep_zscore ~
fg_sweets*empirical+
empirical +
intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
summary(mod)
anova(mod)
mod <-  lmer(iRep_zscore ~
fg_sweets+
empirical +
intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
summary(mod)
anova(mod)
mod <-  lmer(iRep_zscore ~
fg_sweets+
empirical +
#intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
summary(mod)
anova(mod)
mod <-  lmer(max_entero ~
fg_sweets+
empirical +
#intensity +
(1 | mrn) +
(1 | timebin), REML = F, data = entero )
summary(mod)
anova(mod)
