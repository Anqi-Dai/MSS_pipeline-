filter(!Condition %in% c('Post-FMT 2','5th Week post-CAR T','4th Week post-CAR T')) %>%
#arrange(Date_Collected) %>%
mutate(condition_simple = factor(condition_simple, levels = order_level)) %>%
ggboxplot(x = 'Group', y = 'relative_abundance', add = 'jitter', add.params = list( size = 3),color = 'Group',
xlab = '', ylab = 'Ruminococcus_bromii relative abundance') +
scale_color_manual(values = color_key) +
facet_grid(. ~ condition_simple, scales = 'free') +
theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
stat_compare_means(comparisons= list(c('Responder', 'Non-Responder')),
label= "p.format",
method= 'wilcox.test',
correct=FALSE)
ggsave('../data/03_Ruminococcus_bromii_FMT.pdf', width = 8, height = 6)
# bacterial composition throughout time for responder vs not responder
genera <- all %>%
#filter(!str_detect(clade_name, '^k__Viruses')) %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$')) %>%
left_join(FMT, by = "sampleid") %>%
mutate(condition_simple = factor(condition_simple, levels = order_level)) %>%
arrange(Date_Collected, Group, Mouse_num) %>%
mutate(sid = str_glue('Condition {condition_simple}: Group {Group}: Mouse {Mouse_num}: {sampleid}'))
genera %>% distinct(Mouse_num, Group, Condition)
colnames(genera)
genera %>%
ungroup() %>%
distinct(genus) %>% nrow
# find the genera > 0.1% in more than 10% samples
#   left
keepgenera <- genera %>%
filter(relab > 0.001) %>%
count(genus) %>%
filter(n > floor(nrow(FMT) * 0.1)) %>%
pull(genus)
keepgenera <- genera %>% distinct(ge)
#to find colors for these features
library(randomcoloR)
set.seed(1)
n <- length(keepgenera)
palette <- distinctColorPalette(n)
pie(rep(1, n), col=palette)
# output this palette otherwise another random generated ...
bar_palette <- genera %>%
filter(genus %in% keepgenera) %>%
distinct(ge) %>%
arrange(ge) %>%
mutate(color = palette)
bar_palette %>% write_csv('../data/03_genus_bar_palette.csv')
bar_plot_pal <- deframe(bar_palette)
bar_plot_pal <- read_csv('../data/03_genus_bar_palette.csv') %>% deframe
# all samples
genera %>%
filter(genus %in% keepgenera) %>%
ggbarplot(x = 'sid', y = 'relab', fill = 'ge', color = 'white' , xlab = '', ylab = 'Relative abundance') +
#facet_wrap(Day ~ fiber, scales = 'free') +
scale_fill_manual(values = bar_plot_pal) +
theme( axis.text.x = element_text(angle=90, hjust=0, size = 6.5),
legend.position = 'bottom')
ggsave('../data/03_bar_all.pdf', width = 14, height = 7)
pheno <- read_csv('../data/01_pheno_with_alpha.csv')
# the few samples
few <- all %>%
filter(sampleid %in% c('PH18','PH19','PH20','PH21','PH22','PH23', 'PH24', 'PH25', 'PH26', 'PH131')) %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$')) %>%
left_join(FMT, by = "sampleid") %>%
mutate(condition_simple = factor(condition_simple, levels = order_level)) %>%
arrange(Date_Collected, Group, Mouse_num) %>%
mutate(sid = str_glue('Condition {condition_simple}: Group {Group}: Mouse {Mouse_num}: {sampleid}'))
few %>%
filter(genus %in% keepgenera) %>%
ggbarplot(x = 'sid', y = 'relab', fill = 'ge', color = 'white' , xlab = '', ylab = 'Relative abundance') +
#facet_wrap(Day ~ fiber, scales = 'free') +
scale_fill_manual(values = bar_plot_pal) +
theme( axis.text.x = element_text(angle=90, hjust=0, size = 6.5),
legend.position = 'bottom')
ggsave('../data/03_bar_few.pdf', width = 14, height = 7)
slurry_responder <- c('PH131')
slurry_df <- genera %>%
filter(sampleid == slurry_responder)
responder_A20 <- FMT %>%
filter(Group == 'Responder' & Condition == 'Pre-A20') %>%
pull(sampleid)
# to find the shared genus and percentage of between the slurry and the pre-A20 samples
shared <- responder_A20 %>%
set_names(responder_A20) %>%
map(function(samp){
A20_df = genera %>% filter(sampleid == samp)
shared_genera = intersect(A20_df$ge, slurry_df$ge)
relab_in_A20 = A20_df %>%
filter(ge %in% shared_genera) %>% group_by(sampleid) %>% summarise(shared_relab = sum(relab))
relab_in_slurry = slurry_df %>%
filter(ge %in% shared_genera) %>% group_by(sampleid) %>% summarise(shared_relab = sum(relab))
res = tibble(
shared_genus = paste(shared_genera,collapse = ', '),
relab_in_A20 = relab_in_A20$shared_relab,
relab_in_slurry = relab_in_slurry$shared_relab
)
}) %>% bind_rows(.id = 'sampleid')
shared %>% write_csv('../data/03_shared_genera_between_PH131_and_A20_responder.csv')
View(all)
View(pheno)
View(FMT)
FMT
allFMT <- FMT %>%
select(sampleid,Group, Condition )
?add_row
?add_row
View(FMT)
allFMT <- FMT %>%
select(sampleid,Group, Condition ) %>%
add_row(sampleid = 'PH131', Group = 'Responder', Condition = 'slurry')
View(allFMT)
View(all)
these <- FMT %>%
select(sampleid,Group, Condition ) %>%
add_row(sampleid = 'PH131', Group = 'Responder', Condition = 'slurry') %>%
filter(sampleid %in% c(responder_A20, 'PH131'))
View(these)
# find the spp > 0.01% in more than 20% samples
keep_spp <- all %>%
filter(sampleid %in% these$sampleid)
View(keep_spp)
keep_spp <- all %>%
filter(sampleid %in% these$sampleid) %>%
filter(relative_abundance > 0.0001) %>%
count(clade_name) %>%
filter(n > floor(nrow(these) * 0.2)) %>%
pull(clade_name)
cts_fil <- all %>%
filter(sampleid %in% these$sampleid) %>%
filter(clade_name %in% keep_spp)
View(cts_fil)
# calculate the Bray curtis beta diversity
cts_fil <- all %>%
filter(sampleid %in% these$sampleid) %>%
filter(clade_name %in% keep_spp) %>%
select(sampleid, clade_name,relative_abundance ) %>%
spread(key = 'clade_name', value = 'relative_abundance', fill = 0) %>%
column_to_rownames('sampleid')
dist_ <- vegdist(cts_fil, method = 'bray')
dist_ <- vegan::vegdist(cts_fil, method = 'bray')
eigen <- cmdscale(dist_, eig = T)$eig
percent_var <- signif(eigen/sum(eigen), 3)*100
bc <- cmdscale(dist_, k = 2)
beta_df <- bc %>%
as.data.frame() %>%
rownames_to_column('sampleid')
View(beta_df)
beta_df <- bc %>%
as.data.frame() %>%
rownames_to_column('sampleid')  %>%
full_join(these)
beta_df
pcoa_gvhd_all <- beta_df %>%
ggscatter(x = 'V1', y = 'V2', color =  'Condition', palette = 'lancet', ) +
labs(title = '') +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]")) +
theme(aspect.ratio=1, legend.position = 'right')
pcoa_gvhd_all
pcoa_all <- beta_df %>%
ggscatter(x = 'V1', y = 'V2', color =  'Condition', palette = 'lancet', ) +
labs(title = '') +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]")) +
theme(aspect.ratio=1, legend.position = 'right')
pcoa_all <- beta_df %>%
ggscatter(x = 'V1', y = 'V2', color =  'Condition', palette = 'lancet' ) +
labs(title = '') +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]")) +
theme(aspect.ratio=1, legend.position = 'right')
pcoa_all
ggsave(
'../data/03_pcoa_10samples.pdf', width = 5, height = 4
)
pcoa_all <- beta_df %>%
ggscatter(x = 'V1', y = 'V2', color =  'Condition', palette = 'lancet' ) +
labs(title = 'Responders') +
xlab(paste0("PC 1 [",percent_var[1],"%]")) +
ylab(paste0("PC 2 [",percent_var[2],"%]")) +
theme(aspect.ratio=1, legend.position = 'right')
ggsave(
'../data/03_pcoa_10samples.pdf', width = 5, height = 4
)
View(shared)
paired
# the paired boxplot
shared %>%
```
shared
# the paired boxplot
shared %>%
ggboxplot( x= 'relab_in_slurry', y = 'relab_in_A20')
shared
# the paired boxplot
shared %>%
ggboxplot( x= 'relab_in_slurry', y = 'relab_in_A20')
shared
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry)
ggboxplot( x= 'grp', y = 'relab')
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggboxplot( x= 'grp', y = 'relab')
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggboxplot( x= 'grp', y = 'relab', ylab = 'relative abundance',
title = 'Responders', xlab = '',add = 'jitter')
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry)
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggboxplot( x= 'grp', y = 'relab', ylab = 'relative abundance',
title = 'Responders', xlab = '',add = 'jitter') +
stat_compare_means(paired = T)
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggboxplot( x= 'grp', y = 'relab', ylab = 'relative abundance',line.color = "gray", line.size = 0.4,
title = 'Responders', xlab = '',add = 'jitter') +
stat_compare_means(paired = T )
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggbarplot(x= 'grp', y = 'relab')
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,
position = position_dodge(0.9))
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,
position = position_dodge(0.9))
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry)
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
mutate(relab = round(relab, 2)) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,
position = position_dodge(0.9))
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
mutate(relab = round(relab, 2)) %>%
mutate(grp = factor(grp, levels = c('relab_in_slurry','relab_in_A20')))
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
mutate(relab = round(relab, 2)) %>%
mutate(grp = factor(grp, levels = c('relab_in_slurry','relab_in_A20'))) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,
position = position_dodge(0.9))
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
mutate(relab = round(relab, 2)) %>%
mutate(grp = factor(grp, levels = c('relab_in_slurry','relab_in_A20'))) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,ylab = 'relative abundance',
position = position_dodge(0.5))
# the paired boxplot
shared %>%
gather('grp', 'relab', relab_in_A20:relab_in_slurry) %>%
mutate(relab = round(relab, 2)) %>%
mutate(grp = factor(grp, levels = c('relab_in_slurry','relab_in_A20'))) %>%
ggbarplot(x= 'sampleid', y = 'relab',fill = "grp", color = "grp", palette = "Paired",
label = TRUE,ylab = 'relative abundance',
position = position_dodge(0.8))
ggsave('../data/03_shared_genera.pdf', width = 5, height = 4)
ggsave('../data/03_shared_genera.pdf', width = 6, height = 5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(vdbR)
connect_database()
get_table_from_database('shotgun_lookup_ad')
get_table_from_database('asv_annotation_blast_ag')
list_table_from_database()
FMT <- read_csv('../data/01_FMT_pheno.csv') %>%
mutate(Condition = str_replace(Condition, ' cells','')) %>%
mutate(condition_simple = case_when(
Condition == '1st Collection (2 days) post-CAR T' ~ 'Week1 post-CAR',
Condition == '2nd Week post-CAR T' ~ 'Week2 post-CAR',
Condition == '3rd Week post-CAR T' ~ 'Week3 post-CAR',
Condition == '4th Week post-CAR T' ~ 'Week4 post-CAR',
Condition == '5th Week post-CAR T' ~ 'Week5 post-CAR',
TRUE ~ Condition
))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
# find the species shared between slurry and w1
pheno <- read_csv('../data/01_FMT_pheno.csv')
View(pheno)
all <- read_csv('../data/01_all_metaphlan.csv')
View(all)
pheno
pheno
w1ressam <- pheno %>%
filter(Group == 'Responder' & Condition == '1st Collection (2 days) post-CAR T cells')
View(w1ressam)
# find the species shared between slurry and w1
pheno <- read_csv('../data/01_FMT_pheno.csv')
# find the species shared between slurry and w1
pheno <- read_csv('../data/01_FMT_pheno.csv')
w1ressam <- pheno %>%
filter(Group == 'Responder' & Condition == '1st Collection (2 days) post-CAR T cells')
w1res <- all %>%
filter(sampleid %in% w1ressam$sampleid)
View(w1res)
w1res
w1res <- all %>%
filter(sampleid %in% w1ressam$sampleid) %>%
distinct(clade_name)
slurryres <- all %>%
filter(sampleid %in% c('PH131')) %>%
distinct(clade_name)
# find the species shared between slurry and w1
pheno <- read_csv('../data/01_FMT_pheno.csv')
slurryres <- all %>%
filter(sampleid %in% c('PH131')) %>%
distinct(clade_name)
slurryres <- all %>%
filter(sampleid %in% c('PH131')) %>%
distinct(clade_name)
slurryres
slurryres
w1res <- all %>%
filter(sampleid %in% w1ressam$sampleid) %>%
distinct(clade_name)
slurryres <- all %>%
filter(sampleid %in% c('PH131')) %>%
distinct(clade_name)
w1res <- all %>%
filter(sampleid %in% w1ressam$sampleid) %>%
distinct(clade_name)
slurryres <- all %>%
filter(sampleid %in% c('PH131')) %>%
distinct(clade_name)
overlapres <- intersect(w1res$clade_name, slurryres$clade_name)
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name))
View(overlapres)
overlapres
View(all)
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name))
View(asv_annotation_blast_ag)
View(overlapres)
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 6))
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7))
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7))
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7))
overlapres
overlapres
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
rename(taxa = names(.)[1],
kindom = names(.)[2],
phylum = names(.)[3],
class = names(.)[4],
order = names(.)[5],
family = names(.)[6],
genus = names(.)[7],
species = names(.)[8])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
rename(taxa = names(.)[1],
kindom = names(.)[2],
phylum = names(.)[3],
class = names(.)[4],
order = names(.)[5],
family = names(.)[6],
genus = names(.)[7],
species = names(.)[8])
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
rename(taxa = names(.)[1])
View(overlapres)
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
rename(taxa = names(.)[1],
kindom = names(.)[2],
phylum = names(.)[3],
class = names(.)[4],
order = names(.)[5],
family = names(.)[6],
genus = names(.)[7],
species = names(.)[8])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
rename(taxa = names(.)[1],
kindom = names(.)[2])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
as.data.frame()
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
as.data.frame()
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kindom = splits[1]))
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kindom = splits[[1]])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[[1]],
phylum = splits[[2]],
class = splits[[3]],
order = splits[[4]],
family = splits[[5]],
genus = splits[[6]],
species = splits[[7]])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[[1]],
phylum = splits[[2]],
class = splits[[3]],
order = splits[[4]],
family = splits[[5]],
genus = splits[[6]],
species = splits[[7]])
overlapres
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[,1],
phylum = splits[[2]],
class = splits[[3]],
order = splits[[4]],
family = splits[[5]],
genus = splits[[6]],
species = splits[,7])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7))
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[,1],
phylum = splits[,2],
class = splits[,3],
order = splits[,4],
family = splits[,5],
genus = splits[,6],
species = splits[,7])
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[,1],
phylum = splits[,2],
class = splits[,3],
order = splits[,4],
family = splits[,5],
genus = splits[,6],
species = splits[,7]) %>%
select(-spilts)
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[,1],
phylum = splits[,2],
class = splits[,3],
order = splits[,4],
family = splits[,5],
genus = splits[,6],
species = splits[,7]) %>%
select(-splits)
overlapres
final_table_name <- overlapres %>%
mutate(newickstring_name = str_glue('foodtreeroot/{kingdom}/{phylum}/{class}/{order}/{family}/{genus}/{species}/{shared}'))
#### Make and export the tree ####
sharedtree <- as.Node(final_table_name, pathName = "newickstring_name")
library(data.tree)
overlapres <- tibble(shared = intersect(w1res$clade_name, slurryres$clade_name)) %>%
mutate(splits = str_split_fixed(shared, pattern = '\\|', n = 7)) %>%
mutate(kingdom = splits[,1],
phylum = splits[,2],
class = splits[,3],
order = splits[,4],
family = splits[,5],
genus = splits[,6],
species = splits[,7]) %>%
select(-splits)
final_table_name <- overlapres %>%
mutate(newickstring_name = str_glue('foodtreeroot/{kingdom}/{phylum}/{class}/{order}/{family}/{genus}/{species}/{shared}'))
#### Make and export the tree ####
sharedtree <- as.Node(final_table_name, pathName = "newickstring_name")
tree <- ToNewick(sharedtree)
cat(tree, file = '../data/08_shared_tree.newick')
