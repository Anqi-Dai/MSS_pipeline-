ggboxplot( x = 'grp', y = 'inv', add = 'jitter',ylab = 'alpha diversity' ,
add.params = list(color = 'grp', size = 2)) +
facet_grid( ~ Condition) +
scale_color_manual(values = c('#42B440','#EC0000')) +
theme(axis.text.x = element_text(angle = 90))
ggsave('../data/07_abx_experiment_alpha.pdf', height = 6)
ggsave('../data/07_abx_experiment_alpha.pdf', height = 5)
abx <- read_csv('../data/abx_experiment_pheno.csv') %>%
inner_join(meta_mouse)  %>% # 26 samples
mutate(grp = if_else(Group == '1B', 'control', 'treatment'))
fns <- list.files('../../shotgun_pipeline/data/IGO_13852/', pattern = 'metaphlan3_profile.txt', full.names = T)
taxa <- fns %>%
set_names(fns) %>%
map(~ read_tsv(., skip = 4, col_types = 'ccddd') %>%
rename(clade_name = names(.)[1]) %>%
select(clade_name, relative_abundance) %>%
filter(str_detect(clade_name, 's__')) %>%
mutate(relative_abundance = relative_abundance/100)) %>%
bind_rows(.id = 'sampleid') %>%
mutate(sampleid = str_replace(sampleid, '../../shotgun_pipeline/data/IGO_13852//Sample_',''),
sampleid = str_replace(sampleid, '_IGO_.+$',''))
taxa %>% write_csv('../data/01_all_metaphlan.csv')
cts <- taxa %>%
spread(key = 'clade_name', value = 'relative_abundance', fill = 0) %>%
column_to_rownames('sampleid')
meta_mouse <- diversity(cts, index = 'inv')%>%
enframe(name = 'sampleid', value = 'inv')
abx <- read_csv('../data/abx_experiment_pheno.csv') %>%
inner_join(meta_mouse)  %>% # 26 samples
mutate(grp = if_else(Group == '1B', 'control', 'treatment'))
abx <- read_csv('../data/abx_experiment_pheno.csv') %>%
inner_join(meta_mouse)  %>% # 26 samples
mutate(grp = if_else(Group == '1B', 'control', 'treatment'))
View(abx)
abx %>% write_csv('../data/abx_experiment_pheno_alpha.csv')
# the bar plot using the same palette
all  <- read_csv('../data/01_all_metaphlan.csv')
genus <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(abx) %>%
select(-ge)
View(genus)
# the bar plot using the same palette
all  <- read_csv('../data/01_all_metaphlan.csv')
library(vdbR)
connect_database()
get_table_from_database('asv_annotation_blast_color_ag')
View(asv_annotation_blast_color_ag)
# the genus that can find color in the 16s pal
pals <- asv_annotation_blast_color_ag %>%
filter(genus %in% genus$genus)
genus <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(abx) %>%
select(-ge)
# the genus that can find color in the 16s pal
pals <- asv_annotation_blast_color_ag %>%
filter(genus %in% genus$genus)
# the bar plot using the same palette
all  <- read_csv('../data/01_all_metaphlan.csv')
genus_ <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(abx) %>%
select(-ge)
# the genus that can find color in the 16s pal
pals <- asv_annotation_blast_color_ag %>%
filter(genus %in% genus_$genus)
View(pals)
# the genus that can find color in the 16s pal
pals <- asv_annotation_blast_color_ag %>%
filter(genus %in% genus_$genus) %>%
distinct(genus,color_label_group_distinct, color)
length(intersect(asv_annotation_blast_color_ag$genus, genus_$genus))
pals
# the genus that can find color in the 16s pal
pals <- asv_annotation_blast_color_ag %>%
filter(genus %in% genus_$genus) %>%
distinct(genus,color_label_group_distinct, color) %>%
add_row(genus = 'Other', color_label_group_distinct = 'other__other.164', color = '#BBBBBB') %>%
rename(genus_cleaned = genus)
genus_ <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(abx) %>%
select(-ge) %>%
mutate(genus_cleaned = if_else(genus %in% asv_annotation_blast_color_ag$genus, genus, 'Other'))
genus_df <- genus_ %>%
left_join(pals)
genus_df <- genus_ %>%
left_join(pals, by = "genus_cleaned")
View(genus_df)
color_set <- pals %>%
select(color_label_group_distinct, color) %>%
deframe()
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set)
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set)
View(abx)
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(Condition ~ grp, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
ggsave('../data/07_abx_bar.pdf', width = 5, height = 4)
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
genus_df %>%
ggplot(aes(sampleid, relab, fill = color_label_group_distinct) ) +
geom_bar(stat = "identity", position="fill", width = 1) +
theme_classic() +
labs(title = '',
x = '',
y = 'Relative abundance') +
theme(axis.text.x = element_text(angle = 90),
legend.position = "none") +
scale_fill_manual(values = color_set) +
facet_grid(grp ~ Condition, scales = 'free')
ggsave('../data/07_abx_bar.pdf', width = 5, height = 4)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
FMT <- read_csv('../data/01_FMT_pheno.csv')
pheno <- read_csv('../data/01_pheno_with_alpha.csv')
# PH131 is the slurry of 1964A which is the 16s responder patient stool that FMT to the mice
# PH132 is the slurry of 1943B which is the 16s nonresponder patient stool that FMT to the mice
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
FMT <- read_csv('../data/01_FMT_pheno.csv')
pheno <- read_csv('../data/01_pheno_with_alpha.csv')
# PH131 is the slurry of 1964A which is the 16s responder patient stool that FMT to the mice
# PH132 is the slurry of 1943B which is the 16s nonresponder patient stool that FMT to the mice
# plot at the genus level
# find the genus of the shotgun samples
all  <- read_csv('../data/01_all_metaphlan.csv')
genus <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(barshot) %>%
select(-ge)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
FMT <- read_csv('../data/01_FMT_pheno.csv')
pheno <- read_csv('../data/01_pheno_with_alpha.csv')
# PH131 is the slurry of 1964A which is the 16s responder patient stool that FMT to the mice
# PH132 is the slurry of 1943B which is the 16s nonresponder patient stool that FMT to the mice
# the sampleids of shotgun  34
barshot <- FMT %>%
filter(Condition %in% c('Pre-A20','2nd Week post-CAR T cells')) %>%
select(sampleid, Group, Condition) %>%
add_row(sampleid = 'PH131', Group = 'Responder', Condition = 'Slurry')
# two 16s samples.   2
amplisamp <- c('1964A','1943B')
# plot at the genus level
# find the genus of the shotgun samples
all  <- read_csv('../data/01_all_metaphlan.csv')
genus <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(barshot) %>%
select(-ge)
# find the genus of the 16s samples
genus_16 <- get_counts_subset(c('1964A','1943B')) %>%
select(asv_key:count_total, count_relative) %>%
left_join(asv_annotation_blast_ag %>%
select(asv_key,genus), by = "asv_key") %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(count_relative)) %>%
mutate(Group = if_else(sampleid == '1964A', 'Responder', 'Non-Responder'),
Condition = 'donor')
library(vdbR)
connect_database()
connect_database()
get_table_from_database('asv_annotation_blast_ag')
get_table_from_database('asv_annotation_blast_color_ag')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(vdbR)
connect_database()
get_table_from_database('asv_annotation_blast_ag')
get_table_from_database('asv_annotation_blast_color_ag')
FMT <- read_csv('../data/01_FMT_pheno.csv')
pheno <- read_csv('../data/01_pheno_with_alpha.csv')
# PH131 is the slurry of 1964A which is the 16s responder patient stool that FMT to the mice
# PH132 is the slurry of 1943B which is the 16s nonresponder patient stool that FMT to the mice
# the sampleids of shotgun  34
barshot <- FMT %>%
filter(Condition %in% c('Pre-A20','2nd Week post-CAR T cells')) %>%
select(sampleid, Group, Condition) %>%
add_row(sampleid = 'PH131', Group = 'Responder', Condition = 'Slurry')
# two 16s samples.   2
amplisamp <- c('1964A','1943B')
# plot at the genus level
# find the genus of the shotgun samples
all  <- read_csv('../data/01_all_metaphlan.csv')
genus <- all %>%
mutate(genus = str_replace(clade_name, '\\|s__.+$','')) %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(relative_abundance)) %>%
ungroup() %>%
mutate(ge = str_extract(genus, 'g__.+$'),
genus = str_replace(ge, 'g__', '')) %>%
inner_join(barshot) %>%
select(-ge)
# find the genus of the 16s samples
genus_16 <- get_counts_subset(c('1964A','1943B')) %>%
select(asv_key:count_total, count_relative) %>%
left_join(asv_annotation_blast_ag %>%
select(asv_key,genus), by = "asv_key") %>%
group_by(sampleid, genus) %>%
summarise(relab = sum(count_relative)) %>%
mutate(Group = if_else(sampleid == '1964A', 'Responder', 'Non-Responder'),
Condition = 'donor')
# find the shared genus of the 16s and shotgun
length(intersect(genus_16$genus, genus$genus))
length(genus_16$genus)
length(genus$genus)
shared_genus <- intersect(genus_16$genus, genus$genus)
# the color pal for the shared genus
shard_pal <- asv_annotation_blast_color_ag %>%
filter(genus %in% shared_genus) %>%
distinct(genus,color_label_group_distinct, color ) %>%
add_row(genus = 'Other', color_label_group_distinct = 'other__other.164', color = '#BBBBBB') %>%
rename(genus_cleaned = genus)
# combine them to be the same df
combined <- bind_rows(
genus,
genus_16 %>% select(colnames(genus))
) %>%
mutate(genus_cleaned = if_else(genus %in% shared_genus, genus, 'Other')) %>%
left_join(shard_pal, by = "genus_cleaned") %>%
mutate(Condition = factor(Condition, levels = c('donor','Slurry','Pre-A20','2nd Week post-CAR T cells')))
color_set <- shard_pal %>%
select(color_label_group_distinct, color) %>%
deframe()
View(combined)
combined
# the genera in donor responder
sub <- combined %>%
mutate(Condition = as.character(Condition)) %>%
filter(Condition %in% c('donor','Pre-A20'))
View(sub)
sub
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
genera_in_donor =  each_group %>% filter(Condition == 'donor')
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid')
})
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
genera_in_donor =  each_group %>% filter(Condition == 'donor')
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather()
})
# calculate num of shared genera between donor and each preA20 mouse
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
genera_in_donor =  each_group %>% filter(Condition == 'donor')
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num')
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
genera_in_donor =  each_group %>% filter(Condition == 'donor')
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num')
})
# the genera in donor responder
sub <- combined %>%
mutate(Condition = as.character(Condition)) %>%
filter(Condition %in% c('donor','Pre-A20'))
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
genera_in_donor =  each_group %>% filter(Condition == 'donor')
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num')
})
# the genera in donor responder
sub <- combined %>%
mutate(Condition = as.character(Condition)) %>%
filter(Condition %in% c('donor','Pre-A20'))
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
genera_in_donor =  each_group %>% filter(Condition == 'donor')
donor_genera_number = genera_in_donor %>% distinct(genus) %>% nrow
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num') %>%
mutate(donor_genera_num = donor_genera_number)
})
# the genera in donor responder
sub <- combined %>%
mutate(Condition = as.character(Condition)) %>%
filter(Condition %in% c('donor','Pre-A20'))
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
genera_in_donor =  each_group %>% filter(Condition == 'donor')
donor_genera_number = genera_in_donor %>% distinct(genus) %>% nrow
each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num') %>%
mutate(donor_genera_num = donor_genera_number) %>%
mutate(perc = round(shared_genera_num/donor_genera_num*100,2))
})
# the genera in donor responder
sub <- combined %>%
mutate(Condition = as.character(Condition)) %>%
filter(Condition %in% c('donor','Pre-A20'))
# calculate the percentage of the shared genera relative to donor (a distribution)
sub %>%
split(.$Group) %>%
map(function(each_group){
# calculate num of shared genera between donor and each preA20 mouse
genera_in_donor =  each_group %>% filter(Condition == 'donor')
donor_genera_number = genera_in_donor %>% distinct(genus) %>% nrow
shared_dist <- each_group %>%
filter(Condition != 'donor') %>%
split(.$sampleid) %>%
map(function(each_prea20_sample){
shared_num = length(intersect(each_prea20_sample$genus, genera_in_donor$genus))
}) %>% bind_rows(.id = 'sampleid') %>%
gather('sampleid','shared_genera_num') %>%
mutate(donor_genera_num = donor_genera_number) %>%
mutate(perc = round(shared_genera_num/donor_genera_num*100,2))
return(mean(shared_dist$perc))
})
