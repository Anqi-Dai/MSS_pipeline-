stringsAsFactors = F);
no_date_str = as.Date("5/5/5555", "%m/%d/%Y");
col_names = colnames(d_set);
is_date_type = is.element(col_names, c( "DateCollection", "DateReceived", "DateAliquot", "castori_downloaded_date"));
ind_date_type = which(is_date_type);
d_set[,is_date_type][is.na(d_set[,is_date_type])] = no_date_str;
d_set[,ind_date_type]=format(d_set[,ind_date_type],"%m-%d-%Y")
#d_set[,ind_date_type]= as.character(format(d_set[,ind_date_type],"%m-%d-%Y"));
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==7){
table_name = "metaphlan_shotgun_rel_abundance";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/metaphlan_cleaned_220502.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
clade_name=d_set_input$clade_name,
clade_taxid=d_set_input$clade_taxid,
relative_abundance=d_set_input$relative_abundance,
coverage = d_set_input$coverage,
estimated_number_of_reads_from_the_clade = d_set_input$estimated_number_of_reads_from_the_clade,
CHOCOPhlAn_version = d_set_input$CHOCOPhlAn_version);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==8){
table_name = "humann_shotgun_path_abundance_cpm_unstratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_unstratified_cleaned.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
pathway=d_set_input$pathway,
pabun_cpm=d_set_input$pabun_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==9){
table_name = "humann_shotgun_path_abundance_cpm_stratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_stratified_cleaned.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
pathway_spp=d_set_input$pathway,
pabun_cpm=d_set_input$pabun_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==10){
table_name = "humann_shotgun_ko_cpm_unstratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_unstratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
KO=d_set_input$KO,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
}
# 4-29-2022
# run the code starting from  table_name to d_set[,ind_date_type]=format(d_set[,ind_date_type],"%m-%d-%Y")
# and then run the code update_data_from_query_OTU_check_and_submission(table_name, d_set);
upload_data_from_query_OTU(10)
d_set_to_upload = d_set
table_name = 'humann_shotgun_ko_cpm_unstratified'
table_name <- table_name
d_set_to_upload <- d_set
#Clean temp_table
temp_table="temp_updating";
query_check_temp = sprintf("SELECT EXISTS (SELECT 1 FROM   information_schema.tables WHERE table_name = '%s')",
temp_table);
q_check = dbGetQuery(con,query_check_temp);
if(q_check$exists){
dbSendQuery(con, sprintf("drop table %s", temp_table));
}
#Add uploaded_date to date_frame.
uploaded_date = format(Sys.time(),"%m-%d-%Y");
d_set_to_upload$uploaded_date = uploaded_date;#!!!!
#Assign incremental key values starting on `maximum` value in current table.
q_key_max_cur = get_data_from_query_OTU(0.2,table_name);
if(is.na(q_key_max_cur$max)){
q_key_max_cur$max = 0;
}
d_set_to_upload$key = ( 1:length(d_set_to_upload$uploaded_date) ) + q_key_max_cur$max;
#Get columns for `column names`
q_column_names = get_data_from_query_OTU(0.1,table_name);
#q_column_unique_names = get_data_from_query_OTU(0.1,sprintf("%s_unique",table_name));
#stop("Add step to compare columns, re-order data, add key and upload!");
if( ! all(is.element(q_column_names$column_name, colnames(d_set_to_upload) )) ){
stop( sprintf("Some fields in table %s are not defined in upload dataset", table_name));
}
q_column_names$column_name
colnames(d_set_to_upload)
table_name = "humann_shotgun_ko_cpm_unstratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_unstratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
ko=d_set_input$ko,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
d_set_to_upload = d_set
table_name = 'humann_shotgun_ko_cpm_unstratified'
table_name <- table_name
d_set_to_upload <- d_set
#Clean temp_table
temp_table="temp_updating";
query_check_temp = sprintf("SELECT EXISTS (SELECT 1 FROM   information_schema.tables WHERE table_name = '%s')",
temp_table);
q_check = dbGetQuery(con,query_check_temp);
if(q_check$exists){
dbSendQuery(con, sprintf("drop table %s", temp_table));
}
#Add uploaded_date to date_frame.
uploaded_date = format(Sys.time(),"%m-%d-%Y");
d_set_to_upload$uploaded_date = uploaded_date;#!!!!
#Assign incremental key values starting on `maximum` value in current table.
q_key_max_cur = get_data_from_query_OTU(0.2,table_name);
if(is.na(q_key_max_cur$max)){
q_key_max_cur$max = 0;
}
d_set_to_upload$key = ( 1:length(d_set_to_upload$uploaded_date) ) + q_key_max_cur$max;
#Get columns for `column names`
q_column_names = get_data_from_query_OTU(0.1,table_name);
#q_column_unique_names = get_data_from_query_OTU(0.1,sprintf("%s_unique",table_name));
#stop("Add step to compare columns, re-order data, add key and upload!");
if( ! all(is.element(q_column_names$column_name, colnames(d_set_to_upload) )) ){
stop( sprintf("Some fields in table %s are not defined in upload dataset", table_name));
}
q_column_names$column_name
colnames(d_set_to_upload)
d_set_input
table_name = "humann_shotgun_ko_cpm_unstratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_unstratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
ko=d_set_input$KO,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
table_name = "humann_shotgun_ko_cpm_stratified";
table_fields=c("full_id","ko_spp", "ko_cpm");
field_type=c("text","text", "real");
unique_set = c("full_id","ko_spp");
create_table(con, table_name, table_fields, field_type, unique_set = unique_set,access_type="restricted");
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_stratified_cleaned_KO.csv")
View(d_set_input)
d_set_input
table_name = "humann_shotgun_ko_cpm_stratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_stratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
ko_spp=d_set_input$ko,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
source("~/Work/projects/MSS_pipeline-/scripts/database_related/create_new_postgres_user_vbdlab.R", echo=TRUE)
dbSendQuery(conn = con, "drop owned by lyum1; drop role lyum1")
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
