full_id=d_set_input$full_id,
pathway=d_set_input$pathway,
pabun_cpm=d_set_input$pabun_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==9){
table_name = "humann_shotgun_path_abundance_cpm_stratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_stratified_cleaned.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
pathway_spp=d_set_input$pathway,
pabun_cpm=d_set_input$pabun_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==10){
table_name = "humann_shotgun_ko_cpm_unstratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_unstratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
ko=d_set_input$KO,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==11){
table_name = "humann_shotgun_ko_cpm_stratified";
d_set_input = read_csv("~/pipeline/scripts/shotgun_pipeline/data/all_stratified_cleaned_KO.csv")
d_set=data.frame(
full_id=d_set_input$full_id,
ko_spp=d_set_input$ko,
ko_cpm=d_set_input$ko_cpm);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
if(query_number==12){
table_name = "test9";
d_set_input = read_csv("test.csv")
d_set=data.frame(id=d_set_input$id,
value=d_set_input$value);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
}
}
# 4-29-2022
# run the code starting from  table_name to d_set[,ind_date_type]=format(d_set[,ind_date_type],"%m-%d-%Y")
# and then run the code update_data_from_query_OTU_check_and_submission(table_name, d_set);
update_data_from_query_OTU_check_and_submission(1)
??fread
d_set_input = readr::fread("/Users/daia1/pipeline/scripts/shotgun_pipeline/data/update_shotgun_lookup_sept2.csv")
d_set_input = readr::fread("/Users/daia1/pipeline/scripts/shotgun_pipeline/data/update_shotgun_lookup_sept2.csv")
d_set_input = read_csv("/Users/daia1/pipeline/scripts/shotgun_pipeline/data/update_shotgun_lookup_sept2.csv")
View(d_set_input)
table_name = "shotgun_lookup_ad";
d_set=data.frame(directory=d_set_input$directory,
projectid=d_set_input$projectid,
sampleid=d_set_input$sampleid,
fid=d_set_input$fid);
update_data_from_query_OTU_check_and_submission(table_name, d_set);
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
'Katsamakisz',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
source("~/Work/projects/MSS_pipeline-/scripts/database_related/create_new_postgres_user_vbdlab.R", echo=TRUE)
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
'Katsamakisz',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
library(vdbR)
connect_database()
source("~/Work/projects/MSS_pipeline-/scripts/database_related/create_new_postgres_user_vbdlab.R", echo=TRUE)
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
'Katsamakisz',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
'Katsamakisz',
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"katsamakisz",
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
sessionInfo()
source('create_new_postgres_user.R');
sessionInfo()
devtools::install_version("RPostgreSQL", version="0.6-2")
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
sessionInfo()
devtools::install_version("RPostgreSQL", version="0.6-2")
library(DBI)
source('create_new_postgres_user.R');
sessionInfo()
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
sessionInfo()
devtools::install_version("RPostgreSQL", version="0.6-2")
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#
#
#New users will be granted View permission for all tables.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#
library(DBI)
source('get_data_from_query_OTU.R');
sessionInfo()
devtools::install_version("RPostgreSQL", version="0.6-2")
devtools::install_version("RPostgreSQL", version="0.7-0")
renv::init()
install.packages('renv')
renv::init()
renv::purge()
renv::purge('RPostgreSQL')
renv::purge('RPostgres')
devtools::install_version("RPostgreSQL", version="0.6-2")
renv::purge('DBI')
devtools::install_version("RPostgreSQL", version="0.6-2")
sessionInfo()
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#
#
#New users will be granted View permission for all tables.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#
library(DBI)
source('get_data_from_query_OTU.R');
sessionInfo()
#Oct/22/2019
#
#Create username specific access to database in VDB lab.
#It removes the general `guest` account.
#
#
#Dropping user:
#  drop owned by test; drop role test; (https://stackoverflow.com/questions/9840955/postgresql-drop-role-fails-because-of-default-privileges)
#
#In order to set a new password, users need to run the following command:
#dbSendQuery(conn = con,"alter role YOUR_USERNAME password 'YOUR_PASSWORD'");
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# when there is request for new connection, add the new username to the list downbelow
# after the person changed the password, run this script again to unlock this user. then he should be good to go.
# (if the person doesn't change pw within 3 days), run :
#dbSendQuery(conn = con, "drop owned by <user>; drop role <user>")
#to drop the user
# (run this script and look down below to check who changed and who didn't  )
#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
library(DBI)
source('create_new_postgres_user.R');
vdb_users <- c("peledj",
"burgosdm",
"slingerj",
"nguyenc1",
"daia1",
"miltiado",
"andrlovh",
"lindners",
"khann2",
"hatfielp",
"clurmana",
"adintorp",
"ngb",
"chens8",
"elkriefa",
"harfordl",
"jesusfar",
"crossj",
'funnellt',
"watersn",
"maclachlan",
"feit1",
#"MarcellL",
"piasevok",
"lyum1",
'sadeghik',
"katsamakisz",
"rajs");
#               "gomesa_cluster");
collaboration_users <- c("shouvalr",
"lesokhia",
"rollingt",
"chowelld",
"krishnac");
#temporary_pw=my.name <- readline(prompt="Enter temporary password: ")
temporary_pw='test123456';
vdb_and_collaborator_users <- c(vdb_users,
collaboration_users);
#stop("Stopping before creating user");
for(i in 1:length(vdb_and_collaborator_users)){
create_new_postgres_user(vdb_and_collaborator_users[i],temporary_pw);
}
cat("\n\n")
#create_new_postgres_user(vdb_users[length(vdb_users)],temporary_pw);
#dbDisconnect(con)
if(1){
#Run this part to remove passwords!
for(i in 1:length(vdb_and_collaborator_users)){
block_user_who_did_not_change_password(vdb_and_collaborator_users[i],
temporary_pw)
}
}
#block_user_who_did_not_change_password(vdb_users[length(vdb_users)],temporary_pw);
View(block_user_who_did_not_change_password)
